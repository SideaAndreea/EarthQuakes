{"ast":null,"code":"import MathArray from './base/math-array';\nimport { checkNumber, checkVector } from '../lib/validators';\nimport Vector4 from './vector4';\nimport * as quat from 'gl-matrix/quat';\nimport * as vec4 from 'gl-matrix/vec4';\nconst IDENTITY_QUATERNION = [0, 0, 0, 1];\nexport default class Quaternion extends MathArray {\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    super(-0, -0, -0, -0);\n\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x, y, z, w);\n    }\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    return this.check();\n  }\n\n  set(x, y, z, w) {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = w;\n    return this.check();\n  }\n\n  fromObject(object) {\n    this[0] = object.x;\n    this[1] = object.y;\n    this[2] = object.z;\n    this[3] = object.w;\n    return this.check();\n  }\n\n  fromMatrix3(m) {\n    quat.fromMat3(this, m);\n    return this.check();\n  }\n\n  fromAxisRotation(axis, rad) {\n    quat.setAxisAngle(this, axis, rad);\n    return this.check();\n  }\n\n  identity() {\n    quat.identity(this);\n    return this.check();\n  }\n\n  setAxisAngle(axis, rad) {\n    return this.fromAxisRotation(axis, rad);\n  }\n\n  get ELEMENTS() {\n    return 4;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get z() {\n    return this[2];\n  }\n\n  set z(value) {\n    this[2] = checkNumber(value);\n  }\n\n  get w() {\n    return this[3];\n  }\n\n  set w(value) {\n    this[3] = checkNumber(value);\n  }\n\n  len() {\n    return quat.length(this);\n  }\n\n  lengthSquared() {\n    return quat.squaredLength(this);\n  }\n\n  dot(a) {\n    return quat.dot(this, a);\n  }\n\n  rotationTo(vectorA, vectorB) {\n    quat.rotationTo(this, vectorA, vectorB);\n    return this.check();\n  }\n\n  add(a) {\n    quat.add(this, this, a);\n    return this.check();\n  }\n\n  calculateW() {\n    quat.calculateW(this, this);\n    return this.check();\n  }\n\n  conjugate() {\n    quat.conjugate(this, this);\n    return this.check();\n  }\n\n  invert() {\n    quat.invert(this, this);\n    return this.check();\n  }\n\n  lerp(a, b, t) {\n    if (t === undefined) {\n      return this.lerp(this, a, b);\n    }\n\n    quat.lerp(this, a, b, t);\n    return this.check();\n  }\n\n  multiplyRight(a) {\n    quat.multiply(this, this, a);\n    return this.check();\n  }\n\n  multiplyLeft(a) {\n    quat.multiply(this, a, this);\n    return this.check();\n  }\n\n  normalize() {\n    const length = this.len();\n    const l = length > 0 ? 1 / length : 0;\n    this[0] = this[0] * l;\n    this[1] = this[1] * l;\n    this[2] = this[2] * l;\n    this[3] = this[3] * l;\n\n    if (length === 0) {\n      this[3] = 1;\n    }\n\n    return this.check();\n  }\n\n  rotateX(rad) {\n    quat.rotateX(this, this, rad);\n    return this.check();\n  }\n\n  rotateY(rad) {\n    quat.rotateY(this, this, rad);\n    return this.check();\n  }\n\n  rotateZ(rad) {\n    quat.rotateZ(this, this, rad);\n    return this.check();\n  }\n\n  scale(b) {\n    quat.scale(this, this, b);\n    return this.check();\n  }\n\n  slerp(arg0, arg1, arg2) {\n    let start;\n    let target;\n    let ratio;\n\n    switch (arguments.length) {\n      case 1:\n        ({\n          start = IDENTITY_QUATERNION,\n          target,\n          ratio\n        } = arg0);\n        break;\n\n      case 2:\n        start = this;\n        target = arg0;\n        ratio = arg1;\n        break;\n\n      default:\n        start = arg0;\n        target = arg1;\n        ratio = arg2;\n    }\n\n    quat.slerp(this, start, target, ratio);\n    return this.check();\n  }\n\n  transformVector4(vector) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector4();\n    vec4.transformQuat(result, vector, this);\n    return checkVector(result, 4);\n  }\n\n  lengthSq() {\n    return this.lengthSquared();\n  }\n\n  setFromAxisAngle(axis, rad) {\n    return this.setAxisAngle(axis, rad);\n  }\n\n  premultiply(a) {\n    return this.multiplyLeft(a);\n  }\n\n  multiply(a) {\n    return this.multiplyRight(a);\n  }\n\n}","map":{"version":3,"mappings":"AAEA,OAAOA,SAAP,MAAsB,mBAAtB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,mBAAvC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,KAAKC,IAAZ,MAAsB,gBAAtB;AACA,OAAO,KAAKC,IAAZ,MAAsB,gBAAtB;AAGA,MAAMC,mBAAmB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA5B;AAEA,eAAe,MAAMC,UAAN,SAAyBP,SAAzB,CAAmC;EAChDQ,WAAW,GAA8D;IAAA,IAA7DC,CAA6D,uEAAxB,CAAwB;IAAA,IAArBC,CAAqB,uEAAjB,CAAiB;IAAA,IAAdC,CAAc,uEAAV,CAAU;IAAA,IAAPC,CAAO,uEAAH,CAAG;IAEvE,MAAM,CAAC,CAAP,EAAU,CAAC,CAAX,EAAc,CAAC,CAAf,EAAkB,CAAC,CAAnB;;IAEA,IAAIC,KAAK,CAACC,OAAND,CAAcJ,CAAdI,KAAoBE,SAAS,CAACC,MAAVD,KAAqB,CAA7C,EAAgD;MAC9C,KAAKE,IAAL,CAAUR,CAAV;IADF,OAEO;MACL,KAAKS,GAAL,CAAST,CAAT,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4BC,CAA5B;IACD;EACF;;EAEDK,IAAI,CAACE,KAAD,EAAsC;IACxC,KAAK,CAAL,IAAUA,KAAK,CAAC,CAAD,CAAf;IACA,KAAK,CAAL,IAAUA,KAAK,CAAC,CAAD,CAAf;IACA,KAAK,CAAL,IAAUA,KAAK,CAAC,CAAD,CAAf;IACA,KAAK,CAAL,IAAUA,KAAK,CAAC,CAAD,CAAf;IACA,OAAO,KAAKC,KAAL,EAAP;EACD;;EAEDF,GAAG,CAACT,CAAD,EAAYC,CAAZ,EAAuBC,CAAvB,EAAkCC,CAAlC,EAAmD;IACpD,KAAK,CAAL,IAAUH,CAAV;IACA,KAAK,CAAL,IAAUC,CAAV;IACA,KAAK,CAAL,IAAUC,CAAV;IACA,KAAK,CAAL,IAAUC,CAAV;IACA,OAAO,KAAKQ,KAAL,EAAP;EACD;;EAEDC,UAAU,CAACC,MAAD,EAA6D;IACrE,KAAK,CAAL,IAAUA,MAAM,CAACb,CAAjB;IACA,KAAK,CAAL,IAAUa,MAAM,CAACZ,CAAjB;IACA,KAAK,CAAL,IAAUY,MAAM,CAACX,CAAjB;IACA,KAAK,CAAL,IAAUW,MAAM,CAACV,CAAjB;IACA,OAAO,KAAKQ,KAAL,EAAP;EACD;;EASDG,WAAW,CAACC,CAAD,EAAkC;IAC3CpB,IAAI,CAACqB,QAALrB,CAAc,IAAdA,EAAoBoB,CAApBpB;IACA,OAAO,KAAKgB,KAAL,EAAP;EACD;;EAEDM,gBAAgB,CAACC,IAAD,EAA+BC,GAA/B,EAAkD;IAChExB,IAAI,CAACyB,YAALzB,CAAkB,IAAlBA,EAAwBuB,IAAxBvB,EAA8BwB,GAA9BxB;IACA,OAAO,KAAKgB,KAAL,EAAP;EACD;;EAGDU,QAAQ,GAAS;IACf1B,IAAI,CAAC0B,QAAL1B,CAAc,IAAdA;IACA,OAAO,KAAKgB,KAAL,EAAP;EACD;;EASDS,YAAY,CAACF,IAAD,EAA+BC,GAA/B,EAAkD;IAC5D,OAAO,KAAKF,gBAAL,CAAsBC,IAAtB,EAA4BC,GAA5B,CAAP;EACD;;EAGW,IAARG,QAAQ,GAAW;IACrB,OAAO,CAAP;EACD;;EAEI,IAADtB,CAAC,GAAW;IACd,OAAO,KAAK,CAAL,CAAP;EACD;;EACI,IAADA,CAAC,CAACuB,KAAD,EAAgB;IACnB,KAAK,CAAL,IAAU/B,WAAW,CAAC+B,KAAD,CAArB;EACD;;EAEI,IAADtB,CAAC,GAAW;IACd,OAAO,KAAK,CAAL,CAAP;EACD;;EACI,IAADA,CAAC,CAACsB,KAAD,EAAgB;IACnB,KAAK,CAAL,IAAU/B,WAAW,CAAC+B,KAAD,CAArB;EACD;;EAEI,IAADrB,CAAC,GAAW;IACd,OAAO,KAAK,CAAL,CAAP;EACD;;EACI,IAADA,CAAC,CAACqB,KAAD,EAAgB;IACnB,KAAK,CAAL,IAAU/B,WAAW,CAAC+B,KAAD,CAArB;EACD;;EAEI,IAADpB,CAAC,GAAW;IACd,OAAO,KAAK,CAAL,CAAP;EACD;;EACI,IAADA,CAAC,CAACoB,KAAD,EAAgB;IACnB,KAAK,CAAL,IAAU/B,WAAW,CAAC+B,KAAD,CAArB;EACD;;EAGDC,GAAG,GAAW;IACZ,OAAO7B,IAAI,CAACY,MAALZ,CAAY,IAAZA,CAAP;EACD;;EAGD8B,aAAa,GAAW;IACtB,OAAO9B,IAAI,CAAC+B,aAAL/B,CAAmB,IAAnBA,CAAP;EACD;;EAIDgC,GAAG,CAACC,CAAD,EAAoC;IACrC,OAAOjC,IAAI,CAACgC,GAALhC,CAAS,IAATA,EAAeiC,CAAfjC,CAAP;EACD;;EAkBDkC,UAAU,CAACC,OAAD,EAAwBC,OAAxB,EAAqD;IAC7DpC,IAAI,CAACkC,UAALlC,CAAgB,IAAhBA,EAAsBmC,OAAtBnC,EAA+BoC,OAA/BpC;IACA,OAAO,KAAKgB,KAAL,EAAP;EACD;;EAaDqB,GAAG,CAACJ,CAAD,EAAkC;IACnCjC,IAAI,CAACqC,GAALrC,CAAS,IAATA,EAAe,IAAfA,EAAqBiC,CAArBjC;IACA,OAAO,KAAKgB,KAAL,EAAP;EACD;;EAIDsB,UAAU,GAAS;IACjBtC,IAAI,CAACsC,UAALtC,CAAgB,IAAhBA,EAAsB,IAAtBA;IACA,OAAO,KAAKgB,KAAL,EAAP;EACD;;EAIDuB,SAAS,GAAS;IAChBvC,IAAI,CAACuC,SAALvC,CAAe,IAAfA,EAAqB,IAArBA;IACA,OAAO,KAAKgB,KAAL,EAAP;EACD;;EAGDwB,MAAM,GAAS;IACbxC,IAAI,CAACwC,MAALxC,CAAY,IAAZA,EAAkB,IAAlBA;IACA,OAAO,KAAKgB,KAAL,EAAP;EACD;;EAGDyB,IAAI,CAACR,CAAD,EAA4BS,CAA5B,EAAgEC,CAAhE,EAAkF;IACpF,IAAIA,CAAC,KAAKC,SAAV,EAAqB;MACnB,OAAO,KAAKH,IAAL,CAAU,IAAV,EAAgBR,CAAhB,EAAmBS,CAAnB,CAAP;IACD;;IACD1C,IAAI,CAACyC,IAALzC,CAAU,IAAVA,EAAgBiC,CAAhBjC,EAAmB0C,CAAnB1C,EAAsC2C,CAAtC3C;IACA,OAAO,KAAKgB,KAAL,EAAP;EACD;;EAGD6B,aAAa,CAACZ,CAAD,EAAkC;IAC7CjC,IAAI,CAAC8C,QAAL9C,CAAc,IAAdA,EAAoB,IAApBA,EAA0BiC,CAA1BjC;IACA,OAAO,KAAKgB,KAAL,EAAP;EACD;;EAED+B,YAAY,CAACd,CAAD,EAAkC;IAC5CjC,IAAI,CAAC8C,QAAL9C,CAAc,IAAdA,EAAoBiC,CAApBjC,EAAuB,IAAvBA;IACA,OAAO,KAAKgB,KAAL,EAAP;EACD;;EAGDgC,SAAS,GAAS;IAEhB,MAAMpC,MAAM,GAAG,KAAKiB,GAAL,EAAf;IACA,MAAMoB,CAAC,GAAGrC,MAAM,GAAG,CAATA,GAAa,IAAIA,MAAjBA,GAA0B,CAApC;IACA,KAAK,CAAL,IAAU,KAAK,CAAL,IAAUqC,CAApB;IACA,KAAK,CAAL,IAAU,KAAK,CAAL,IAAUA,CAApB;IACA,KAAK,CAAL,IAAU,KAAK,CAAL,IAAUA,CAApB;IACA,KAAK,CAAL,IAAU,KAAK,CAAL,IAAUA,CAApB;;IAEA,IAAIrC,MAAM,KAAK,CAAf,EAAkB;MAChB,KAAK,CAAL,IAAU,CAAV;IACD;;IACD,OAAO,KAAKI,KAAL,EAAP;EACD;;EAGDkC,OAAO,CAAC1B,GAAD,EAAoB;IACzBxB,IAAI,CAACkD,OAALlD,CAAa,IAAbA,EAAmB,IAAnBA,EAAyBwB,GAAzBxB;IACA,OAAO,KAAKgB,KAAL,EAAP;EACD;;EAGDmC,OAAO,CAAC3B,GAAD,EAAoB;IACzBxB,IAAI,CAACmD,OAALnD,CAAa,IAAbA,EAAmB,IAAnBA,EAAyBwB,GAAzBxB;IACA,OAAO,KAAKgB,KAAL,EAAP;EACD;;EAGDoC,OAAO,CAAC5B,GAAD,EAAoB;IACzBxB,IAAI,CAACoD,OAALpD,CAAa,IAAbA,EAAmB,IAAnBA,EAAyBwB,GAAzBxB;IACA,OAAO,KAAKgB,KAAL,EAAP;EACD;;EAGDqC,KAAK,CAACX,CAAD,EAAkB;IACrB1C,IAAI,CAACqD,KAALrD,CAAW,IAAXA,EAAiB,IAAjBA,EAAuB0C,CAAvB1C;IACA,OAAO,KAAKgB,KAAL,EAAP;EACD;;EAWDsC,KAAK,CACHC,IADG,EAQHC,IARG,EASHC,IATG,EAUG;IACN,IAAIC,KAAJ;IACA,IAAIC,MAAJ;IACA,IAAIC,KAAJ;;IAEA,QAAQjD,SAAS,CAACC,MAAlB;MACE,KAAK,CAAL;QAEE,CAAC;UACC8C,KAAK,GAAGxD,mBADT;UAECyD,MAFD;UAGCC;QAHD,IAIGL,IAJJ;QASA;;MACF,KAAK,CAAL;QACEG,KAAK,GAAG,IAARA;QACAC,MAAM,GAAGJ,IAATI;QACAC,KAAK,GAAGJ,IAARI;QACA;;MACF;QAEEF,KAAK,GAAGH,IAARG;QACAC,MAAM,GAAGH,IAATG;QACAC,KAAK,GAAGH,IAARG;IAtBJ;;IAwBA5D,IAAI,CAACsD,KAALtD,CAAW,IAAXA,EAAiB0D,KAAjB1D,EAAwB2D,MAAxB3D,EAAgC4D,KAAhC5D;IACA,OAAO,KAAKgB,KAAL,EAAP;EACD;;EAED6C,gBAAgB,CACdC,MADc,EAGA;IAAA,IADdC,MACc,uEADS,IAAIhE,OAAJ,EACT;IACdE,IAAI,CAAC+D,aAAL/D,CAAmB8D,MAAnB9D,EAA2B6D,MAA3B7D,EAAmC,IAAnCA;IACA,OAAOH,WAAW,CAACiE,MAAD,EAAS,CAAT,CAAlB;EACD;;EAGDE,QAAQ,GAAW;IACjB,OAAO,KAAKnC,aAAL,EAAP;EACD;;EAEDoC,gBAAgB,CAAC3C,IAAD,EAA+BC,GAA/B,EAAkD;IAChE,OAAO,KAAKC,YAAL,CAAkBF,IAAlB,EAAwBC,GAAxB,CAAP;EACD;;EAED2C,WAAW,CAAClC,CAAD,EAAkC;IAC3C,OAAO,KAAKc,YAAL,CAAkBd,CAAlB,CAAP;EACD;;EAEDa,QAAQ,CAACb,CAAD,EAAkC;IACxC,OAAO,KAAKY,aAAL,CAAmBZ,CAAnB,CAAP;EACD;;AAvT+C","names":["MathArray","checkNumber","checkVector","Vector4","quat","vec4","IDENTITY_QUATERNION","Quaternion","constructor","x","y","z","w","Array","isArray","arguments","length","copy","set","array","check","fromObject","object","fromMatrix3","m","fromMat3","fromAxisRotation","axis","rad","setAxisAngle","identity","ELEMENTS","value","len","lengthSquared","squaredLength","dot","a","rotationTo","vectorA","vectorB","add","calculateW","conjugate","invert","lerp","b","t","undefined","multiplyRight","multiply","multiplyLeft","normalize","l","rotateX","rotateY","rotateZ","scale","slerp","arg0","arg1","arg2","start","target","ratio","transformVector4","vector","result","transformQuat","lengthSq","setFromAxisAngle","premultiply"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@math.gl\\core\\src\\classes\\quaternion.ts"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport MathArray from './base/math-array';\nimport {checkNumber, checkVector} from '../lib/validators';\nimport Vector4 from './vector4';\nimport * as quat from 'gl-matrix/quat';\nimport * as vec4 from 'gl-matrix/vec4';\nimport {NumericArray} from '@math.gl/types';\n\nconst IDENTITY_QUATERNION = [0, 0, 0, 1] as const;\n\nexport default class Quaternion extends MathArray {\n  constructor(x: number | Readonly<NumericArray> = 0, y = 0, z = 0, w = 1) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x as number, y, z, w);\n    }\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    return this.check();\n  }\n\n  set(x: number, y: number, z: number, w: number): this {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = w;\n    return this.check();\n  }\n\n  fromObject(object: {x: number; y: number; z: number; w: number}): this {\n    this[0] = object.x;\n    this[1] = object.y;\n    this[2] = object.z;\n    this[3] = object.w;\n    return this.check();\n  }\n\n  /**\n   * Creates a quaternion from the given 3x3 rotation matrix.\n   * NOTE: The resultant quaternion is not normalized, so you should\n   * be sure to renormalize the quaternion yourself where necessary.\n   * @param m\n   * @returns\n   */\n  fromMatrix3(m: Readonly<NumericArray>): this {\n    quat.fromMat3(this, m);\n    return this.check();\n  }\n\n  fromAxisRotation(axis: Readonly<NumericArray>, rad: number): this {\n    quat.setAxisAngle(this, axis, rad);\n    return this.check();\n  }\n\n  /** Set a quat to the identity quaternion */\n  identity(): this {\n    quat.identity(this);\n    return this.check();\n  }\n\n  // Set the components of a quat to the given values\n  // set(i, j, k, l) {\n  //   quat.set(this, i, j, k, l);\n  //   return this.check();\n  // }\n\n  // Sets a quat from the given angle and rotation axis, then returns it.\n  setAxisAngle(axis: Readonly<NumericArray>, rad: number): this {\n    return this.fromAxisRotation(axis, rad);\n  }\n\n  // Getters/setters\n  get ELEMENTS(): number {\n    return 4;\n  }\n\n  get x(): number {\n    return this[0];\n  }\n  set x(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get y(): number {\n    return this[1];\n  }\n  set y(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get z(): number {\n    return this[2];\n  }\n  set z(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  get w(): number {\n    return this[3];\n  }\n  set w(value: number) {\n    this[3] = checkNumber(value);\n  }\n\n  // Calculates the length of a quat\n  len(): number {\n    return quat.length(this);\n  }\n\n  // Calculates the squared length of a quat\n  lengthSquared(): number {\n    return quat.squaredLength(this);\n  }\n\n  // Calculates the dot product of two quat's\n  // @return {Number}\n  dot(a: Readonly<NumericArray>): number {\n    return quat.dot(this, a);\n  }\n\n  // Gets the rotation axis and angle for a given quaternion.\n  // If a quaternion is created with setAxisAngle, this method will\n  // return the same values as providied in the original parameter\n  // list OR functionally equivalent values.\n  // Example: The quaternion formed by axis [0, 0, 1] and angle -90\n  // is the same as the quaternion formed by [0, 0, 1] and 270.\n  // This method favors the latter.\n  // @return {{[x,y,z], Number}}\n  // getAxisAngle() {\n  //   const axis = [];\n  //   const angle = quat.getAxisAngle(axis, this);\n  //   return {axis, angle};\n  // }\n  // MODIFIERS\n  // Sets a quaternion to represent the shortest rotation from one vector\n  // to another. Both vectors are assumed to be unit length.\n  rotationTo(vectorA: NumericArray, vectorB: NumericArray): this {\n    quat.rotationTo(this, vectorA, vectorB);\n    return this.check();\n  }\n\n  // Sets the specified quaternion with values corresponding to the given axes.\n  // Each axis is a vec3 and is expected to be unit length and perpendicular\n  // to all other specified axes.\n  // setAxes() {\n  //   Number\n  // }\n  // Performs a spherical linear interpolation with two control points\n  // sqlerp() {\n  //   Number;\n  // }\n  // Adds two quat's\n  add(a: Readonly<NumericArray>): this {\n    quat.add(this, this, a);\n    return this.check();\n  }\n\n  // Calculates the W component of a quat from the X, Y, and Z components.\n  // Any existing W component will be ignored.\n  calculateW(): this {\n    quat.calculateW(this, this);\n    return this.check();\n  }\n\n  // Calculates the conjugate of a quat If the quaternion is normalized,\n  // this function is faster than quat.inverse and produces the same result.\n  conjugate(): this {\n    quat.conjugate(this, this);\n    return this.check();\n  }\n\n  // Calculates the inverse of a quat\n  invert(): this {\n    quat.invert(this, this);\n    return this.check();\n  }\n\n  // Performs a linear interpolation between two quat's\n  lerp(a: Readonly<NumericArray>, b: Readonly<NumericArray> | number, t?: number): this {\n    if (t === undefined) {\n      return this.lerp(this, a, b as number);\n    }\n    quat.lerp(this, a, b as NumericArray, t);\n    return this.check();\n  }\n\n  // Multiplies two quat's\n  multiplyRight(a: Readonly<NumericArray>): this {\n    quat.multiply(this, this, a);\n    return this.check();\n  }\n\n  multiplyLeft(a: Readonly<NumericArray>): this {\n    quat.multiply(this, a, this);\n    return this.check();\n  }\n\n  // Normalize a quat\n  normalize(): this {\n    // Handle 0 case\n    const length = this.len();\n    const l = length > 0 ? 1 / length : 0;\n    this[0] = this[0] * l;\n    this[1] = this[1] * l;\n    this[2] = this[2] * l;\n    this[3] = this[3] * l;\n    // Set to [0, 0, 0, 1] if length is 0\n    if (length === 0) {\n      this[3] = 1;\n    }\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the X axis\n  rotateX(rad: number): this {\n    quat.rotateX(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Y axis\n  rotateY(rad: number): this {\n    quat.rotateY(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Z axis\n  rotateZ(rad: number): this {\n    quat.rotateZ(this, this, rad);\n    return this.check();\n  }\n\n  // Scales a quat by a scalar number\n  scale(b: number): this {\n    quat.scale(this, this, b);\n    return this.check();\n  }\n\n  slerp(target: Readonly<NumericArray>, ratio: number): this;\n  slerp(start: Readonly<NumericArray>, target: Readonly<NumericArray>, ratio: number): this;\n  slerp(params: {\n    start: Readonly<NumericArray>;\n    target: Readonly<NumericArray>;\n    ratio: number;\n  }): this;\n\n  // Performs a spherical linear interpolation between two quat\n  slerp(\n    arg0:\n      | Readonly<NumericArray>\n      | {\n          start: Readonly<NumericArray>;\n          target: Readonly<NumericArray>;\n          ratio: number;\n        },\n    arg1?: Readonly<NumericArray> | number,\n    arg2?: number\n  ): this {\n    let start: Readonly<NumericArray>;\n    let target: Readonly<NumericArray>;\n    let ratio: number;\n    // eslint-disable-next-line prefer-rest-params\n    switch (arguments.length) {\n      case 1: // Deprecated signature ({start, target, ratio})\n        // eslint-disable-next-line prefer-rest-params\n        ({\n          start = IDENTITY_QUATERNION,\n          target,\n          ratio\n        } = arg0 as {\n          start: Readonly<NumericArray>;\n          target: Readonly<NumericArray>;\n          ratio: number;\n        });\n        break;\n      case 2: // THREE.js compatibility signature (target, ration)\n        start = this; // eslint-disable-line\n        target = arg0 as Readonly<NumericArray>;\n        ratio = arg1 as number;\n        break;\n      default:\n        // Default signature: (start, target, ratio)\n        start = arg0 as Readonly<NumericArray>;\n        target = arg1 as Readonly<NumericArray>;\n        ratio = arg2;\n    }\n    quat.slerp(this, start, target, ratio);\n    return this.check();\n  }\n\n  transformVector4(\n    vector: Readonly<NumericArray>,\n    result: NumericArray = new Vector4()\n  ): NumericArray {\n    vec4.transformQuat(result, vector, this);\n    return checkVector(result, 4);\n  }\n\n  // THREE.js Math API compatibility\n  lengthSq(): number {\n    return this.lengthSquared();\n  }\n\n  setFromAxisAngle(axis: Readonly<NumericArray>, rad: number): this {\n    return this.setAxisAngle(axis, rad);\n  }\n\n  premultiply(a: Readonly<NumericArray>): this {\n    return this.multiplyLeft(a);\n  }\n\n  multiply(a: Readonly<NumericArray>): this {\n    return this.multiplyRight(a);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}