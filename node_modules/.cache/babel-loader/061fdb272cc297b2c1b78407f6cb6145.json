{"ast":null,"code":"import { getTypedArrayFromGLType } from '../webgl-utils/typed-array-utils';\nimport { assert } from '../utils/assert';\nimport { checkProps } from '../utils/check-props';\nconst DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: 5126,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\nconst PROP_CHECKS = {\n  deprecatedProps: {\n    instanced: 'divisor',\n    isInstanced: 'divisor'\n  }\n};\nexport default class Accessor {\n  static getBytesPerElement(accessor) {\n    const ArrayType = getTypedArrayFromGLType(accessor.type || 5126);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static getBytesPerVertex(accessor) {\n    assert(accessor.size);\n    const ArrayType = getTypedArrayFromGLType(accessor.type || 5126);\n    return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n  }\n\n  static resolve() {\n    for (var _len = arguments.length, accessors = new Array(_len), _key = 0; _key < _len; _key++) {\n      accessors[_key] = arguments[_key];\n    }\n\n    return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]);\n  }\n\n  constructor() {\n    for (var _len2 = arguments.length, accessors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      accessors[_key2] = arguments[_key2];\n    }\n\n    accessors.forEach(accessor => this._assign(accessor));\n    Object.freeze(this);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  get BYTES_PER_ELEMENT() {\n    return Accessor.getBytesPerElement(this);\n  }\n\n  get BYTES_PER_VERTEX() {\n    return Accessor.getBytesPerVertex(this);\n  }\n\n  _assign() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    props = checkProps('Accessor', props, PROP_CHECKS);\n\n    if (props.type !== undefined) {\n      this.type = props.type;\n\n      if (props.type === 5124 || props.type === 5125) {\n        this.integer = true;\n      }\n    }\n\n    if (props.size !== undefined) {\n      this.size = props.size;\n    }\n\n    if (props.offset !== undefined) {\n      this.offset = props.offset;\n    }\n\n    if (props.stride !== undefined) {\n      this.stride = props.stride;\n    }\n\n    if (props.normalized !== undefined) {\n      this.normalized = props.normalized;\n    }\n\n    if (props.integer !== undefined) {\n      this.integer = props.integer;\n    }\n\n    if (props.divisor !== undefined) {\n      this.divisor = props.divisor;\n    }\n\n    if (props.buffer !== undefined) {\n      this.buffer = props.buffer;\n    }\n\n    if (props.index !== undefined) {\n      if (typeof props.index === 'boolean') {\n        this.index = props.index ? 1 : 0;\n      } else {\n        this.index = props.index;\n      }\n    }\n\n    if (props.instanced !== undefined) {\n      this.divisor = props.instanced ? 1 : 0;\n    }\n\n    if (props.isInstanced !== undefined) {\n      this.divisor = props.isInstanced ? 1 : 0;\n    }\n\n    return this;\n  }\n\n}\nexport { DEFAULT_ACCESSOR_VALUES };","map":{"version":3,"mappings":"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","names":["getTypedArrayFromGLType","assert","checkProps","DEFAULT_ACCESSOR_VALUES","offset","stride","type","size","divisor","normalized","integer","PROP_CHECKS","deprecatedProps","instanced","isInstanced","Accessor","getBytesPerElement","accessor","ArrayType","BYTES_PER_ELEMENT","getBytesPerVertex","resolve","accessors","arguments","constructor","forEach","_assign","Object","freeze","toString","JSON","stringify","BYTES_PER_VERTEX","props","undefined","buffer","index"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\AplicaÈ›ii\\earthquakes\\node_modules\\@luma.gl\\webgl\\src\\classes\\accessor.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {getTypedArrayFromGLType} from '../webgl-utils/typed-array-utils';\nimport {assert} from '../utils/assert';\nimport {checkProps} from '../utils/check-props';\n\nconst DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: GL.FLOAT,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\n\nconst PROP_CHECKS = {\n  deprecatedProps: {\n    instanced: 'divisor',\n    isInstanced: 'divisor'\n  }\n};\n\nexport default class Accessor {\n  static getBytesPerElement(accessor) {\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static getBytesPerVertex(accessor) {\n    assert(accessor.size);\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n  }\n\n  // Combines (merges) a list of accessors. On top of default values\n  // Usually [programAccessor, bufferAccessor, appAccessor]\n  // All props will be set in the returned object.\n  // TODO check for conflicts between values in the supplied accessors\n  static resolve(...accessors) {\n    return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]); // Default values\n  }\n\n  constructor(...accessors) {\n    accessors.forEach(accessor => this._assign(accessor)); // Merge in sequence\n    Object.freeze(this);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  // ACCESSORS\n\n  // TODO - remove>\n  get BYTES_PER_ELEMENT() {\n    return Accessor.getBytesPerElement(this);\n  }\n\n  get BYTES_PER_VERTEX() {\n    return Accessor.getBytesPerVertex(this);\n  }\n\n  // PRIVATE\n\n  // eslint-disable-next-line complexity, max-statements\n  _assign(props = {}) {\n    props = checkProps('Accessor', props, PROP_CHECKS);\n\n    if (props.type !== undefined) {\n      this.type = props.type;\n\n      // Auto-deduce integer type?\n      if (props.type === GL.INT || props.type === GL.UNSIGNED_INT) {\n        this.integer = true;\n      }\n    }\n    if (props.size !== undefined) {\n      this.size = props.size;\n    }\n    if (props.offset !== undefined) {\n      this.offset = props.offset;\n    }\n    if (props.stride !== undefined) {\n      this.stride = props.stride;\n    }\n    if (props.normalized !== undefined) {\n      this.normalized = props.normalized;\n    }\n    if (props.integer !== undefined) {\n      this.integer = props.integer;\n    }\n\n    // INSTANCE DIVISOR\n    if (props.divisor !== undefined) {\n      this.divisor = props.divisor;\n    }\n\n    // Buffer is optional\n    if (props.buffer !== undefined) {\n      this.buffer = props.buffer;\n    }\n\n    // The binding index (for binding e.g. Transform feedbacks and Uniform buffers)\n    // TODO - should this be part of accessor?\n    if (props.index !== undefined) {\n      if (typeof props.index === 'boolean') {\n        this.index = props.index ? 1 : 0;\n      } else {\n        this.index = props.index;\n      }\n    }\n\n    // DEPRECATED\n    if (props.instanced !== undefined) {\n      this.divisor = props.instanced ? 1 : 0;\n    }\n    if (props.isInstanced !== undefined) {\n      this.divisor = props.isInstanced ? 1 : 0;\n    }\n\n    return this;\n  }\n}\n\n// TEST EXPORTS\nexport {DEFAULT_ACCESSOR_VALUES};\n"]},"metadata":{},"sourceType":"module"}