{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { h3SetToMultiPolygon } from 'h3-js';\nimport { createIterable } from '@deck.gl/core';\nimport { H3HexagonLayer } from '@deck.gl/geo-layers';\nimport GeoCellLayer from '../geo-cell-layer/GeoCellLayer';\nconst defaultProps = {\n  getHexagons: {\n    type: 'accessor',\n    value: d => d.hexagons\n  }\n};\nexport default class H3ClusterLayer extends GeoCellLayer {\n  initializeState() {\n    H3HexagonLayer._checkH3Lib();\n  }\n\n  updateState(_ref) {\n    let {\n      props,\n      changeFlags\n    } = _ref;\n\n    if (changeFlags.dataChanged || changeFlags.updateTriggersChanged && changeFlags.updateTriggersChanged.getHexagons) {\n      const {\n        data,\n        getHexagons\n      } = props;\n      const polygons = [];\n      const {\n        iterable,\n        objectInfo\n      } = createIterable(data);\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n        for (const polygon of multiPolygon) {\n          polygons.push(this.getSubLayerRow({\n            polygon\n          }, object, objectInfo.index));\n        }\n      }\n\n      this.setState({\n        polygons\n      });\n    }\n  }\n\n  indexToBounds() {\n    return {\n      data: this.state.polygons,\n      getPolygon: d => d.polygon\n    };\n  }\n\n}\n\n_defineProperty(H3ClusterLayer, \"layerName\", 'H3ClusterLayer');\n\n_defineProperty(H3ClusterLayer, \"defaultProps\", defaultProps);","map":{"version":3,"mappings":";AAAA,SAAQA,mBAAR,QAAgD,OAAhD;AAEA,SAA0BC,cAA1B,QAA+E,eAA/E;AACA,SAAQC,cAAR,QAA6B,qBAA7B;AACA,OAAOC,YAAP,MAA8C,gCAA9C;AAEA,MAAMC,YAA+C,GAAG;EACtDC,WAAW,EAAE;IAACC,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAEC,CAAC,IAAIA,CAAC,CAACC;EAAjC;AADyC,CAAxD;AAkBA,eAAe,MAAMC,cAAN,SAA2DP,YAA3D,CAGb;EAIAQ,eAAe,GAAS;IACtBT,cAAc,CAACU,WAAfV;EACD;;EAEDW,WAAW,OAAqD;IAAA,IAApD;MAACC,KAAD;MAAQC;IAAR,CAAoD;;IAC9D,IACEA,WAAW,CAACC,WAAZD,IACCA,WAAW,CAACE,qBAAZF,IAAqCA,WAAW,CAACE,qBAAZF,CAAkCV,WAF1E,EAGE;MACA,MAAM;QAACa,IAAD;QAAOb;MAAP,IAAsBS,KAA5B;MACA,MAAMK,QAAmC,GAAG,EAA5C;MAEA,MAAM;QAACC,QAAD;QAAWC;MAAX,IAAyBpB,cAAc,CAACiB,IAAD,CAA7C;;MACA,KAAK,MAAMI,MAAX,IAAqBF,QAArB,EAA+B;QAC7BC,UAAU,CAACE,KAAXF;QACA,MAAMZ,QAAQ,GAAGJ,WAAW,CAACiB,MAAD,EAASD,UAAT,CAA5B;QACA,MAAMG,YAAY,GAAGxB,mBAAmB,CAACS,QAAD,EAAW,IAAX,CAAxC;;QAEA,KAAK,MAAMgB,OAAX,IAAsBD,YAAtB,EAAoC;UAClCL,QAAQ,CAACO,IAATP,CAAc,KAAKQ,cAAL,CAAoB;YAACF;UAAD,CAApB,EAA+BH,MAA/B,EAAuCD,UAAU,CAACE,KAAlD,CAAdJ;QACD;MACF;;MAED,KAAKS,QAAL,CAAc;QAACT;MAAD,CAAd;IACD;EACF;;EAEDU,aAAa,GAAmC;IAC9C,OAAO;MACLX,IAAI,EAAE,KAAKY,KAAL,CAAWX,QADZ;MAELY,UAAU,EAAEvB,CAAC,IAAIA,CAAC,CAACiB;IAFd,CAAP;EAID;;AApCD;;gBAHmBf,gB,aAIA;;gBAJAA,gB,gBAKGN","names":["h3SetToMultiPolygon","createIterable","H3HexagonLayer","GeoCellLayer","defaultProps","getHexagons","type","value","d","hexagons","H3ClusterLayer","initializeState","_checkH3Lib","updateState","props","changeFlags","dataChanged","updateTriggersChanged","data","polygons","iterable","objectInfo","object","index","multiPolygon","polygon","push","getSubLayerRow","setState","indexToBounds","state","getPolygon"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@deck.gl\\geo-layers\\src\\h3-layers\\h3-cluster-layer.ts"],"sourcesContent":["import {h3SetToMultiPolygon, H3IndexInput} from 'h3-js';\n\nimport {AccessorFunction, createIterable, UpdateParameters, DefaultProps} from '@deck.gl/core';\nimport {H3HexagonLayer} from '@deck.gl/geo-layers';\nimport GeoCellLayer, {GeoCellLayerProps} from '../geo-cell-layer/GeoCellLayer';\n\nconst defaultProps: DefaultProps<H3ClusterLayerProps> = {\n  getHexagons: {type: 'accessor', value: d => d.hexagons}\n};\n\n/** All properties supported by H3ClusterLayer. */\nexport type H3ClusterLayerProps<DataT = any> = _H3ClusterLayerProps<DataT> &\n  GeoCellLayerProps<DataT>;\n\n/** Properties added by H3ClusterLayer. */\ntype _H3ClusterLayerProps<DataT> = {\n  /**\n   * Called for each data object to retrieve the hexagon identifiers.\n   *\n   * By default, it reads `hexagons` property of data object.\n   */\n  getHexagons?: AccessorFunction<DataT, H3IndexInput[]>;\n};\n\nexport default class H3ClusterLayer<DataT = any, ExtraProps = {}> extends GeoCellLayer<\n  DataT,\n  Required<_H3ClusterLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'H3ClusterLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    H3HexagonLayer._checkH3Lib();\n  }\n\n  updateState({props, changeFlags}: UpdateParameters<this>): void {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged && changeFlags.updateTriggersChanged.getHexagons)\n    ) {\n      const {data, getHexagons} = props;\n      const polygons: {polygon: number[][][]}[] = [];\n\n      const {iterable, objectInfo} = createIterable(data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n        for (const polygon of multiPolygon) {\n          polygons.push(this.getSubLayerRow({polygon}, object, objectInfo.index));\n        }\n      }\n\n      this.setState({polygons});\n    }\n  }\n\n  indexToBounds(): Partial<GeoCellLayer['props']> {\n    return {\n      data: this.state.polygons,\n      getPolygon: d => d.polygon\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}