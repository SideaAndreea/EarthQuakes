{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Texture2D, ProgramManager } from '@luma.gl/core';\nimport { AmbientLight } from './ambient-light';\nimport { DirectionalLight } from './directional-light';\nimport { Matrix4, Vector3 } from '@math.gl/core';\nimport ShadowPass from '../../passes/shadow-pass';\nimport shadow from '../../shaderlib/shadow/shadow';\nconst DEFAULT_AMBIENT_LIGHT_PROPS = {\n  color: [255, 255, 255],\n  intensity: 1.0\n};\nconst DEFAULT_DIRECTIONAL_LIGHT_PROPS = [{\n  color: [255, 255, 255],\n  intensity: 1.0,\n  direction: [-1, 3, -1]\n}, {\n  color: [255, 255, 255],\n  intensity: 0.9,\n  direction: [1, -8, -2.5]\n}];\nconst DEFAULT_SHADOW_COLOR = [0, 0, 0, 200 / 255];\nexport default class LightingEffect {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"id\", 'lighting-effect');\n\n    _defineProperty(this, \"props\", null);\n\n    _defineProperty(this, \"shadowColor\", DEFAULT_SHADOW_COLOR);\n\n    _defineProperty(this, \"shadow\", void 0);\n\n    _defineProperty(this, \"ambientLight\", null);\n\n    _defineProperty(this, \"directionalLights\", []);\n\n    _defineProperty(this, \"pointLights\", []);\n\n    _defineProperty(this, \"shadowPasses\", []);\n\n    _defineProperty(this, \"shadowMaps\", []);\n\n    _defineProperty(this, \"dummyShadowMap\", null);\n\n    _defineProperty(this, \"programManager\", void 0);\n\n    _defineProperty(this, \"shadowMatrices\", void 0);\n\n    for (const key in props) {\n      const lightSource = props[key];\n\n      switch (lightSource.type) {\n        case 'ambient':\n          this.ambientLight = lightSource;\n          break;\n\n        case 'directional':\n          this.directionalLights.push(lightSource);\n          break;\n\n        case 'point':\n          this.pointLights.push(lightSource);\n          break;\n\n        default:\n      }\n    }\n\n    this._applyDefaultLights();\n\n    this.shadow = this.directionalLights.some(light => light.shadow);\n  }\n\n  preRender(gl, _ref) {\n    let {\n      layers,\n      layerFilter,\n      viewports,\n      onViewportActive,\n      views\n    } = _ref;\n    if (!this.shadow) return;\n    this.shadowMatrices = this._calculateMatrices();\n\n    if (this.shadowPasses.length === 0) {\n      this._createShadowPasses(gl);\n    }\n\n    if (!this.programManager) {\n      this.programManager = ProgramManager.getDefaultProgramManager(gl);\n\n      if (shadow) {\n        this.programManager.addDefaultModule(shadow);\n      }\n    }\n\n    if (!this.dummyShadowMap) {\n      this.dummyShadowMap = new Texture2D(gl, {\n        width: 1,\n        height: 1\n      });\n    }\n\n    for (let i = 0; i < this.shadowPasses.length; i++) {\n      const shadowPass = this.shadowPasses[i];\n      shadowPass.render({\n        layers,\n        layerFilter,\n        viewports,\n        onViewportActive,\n        views,\n        moduleParameters: {\n          shadowLightId: i,\n          dummyShadowMap: this.dummyShadowMap,\n          shadowMatrices: this.shadowMatrices\n        }\n      });\n    }\n  }\n\n  getModuleParameters(layer) {\n    const parameters = this.shadow ? {\n      shadowMaps: this.shadowMaps,\n      dummyShadowMap: this.dummyShadowMap,\n      shadowColor: this.shadowColor,\n      shadowMatrices: this.shadowMatrices\n    } : {};\n    parameters.lightSources = {\n      ambientLight: this.ambientLight,\n      directionalLights: this.directionalLights.map(directionalLight => directionalLight.getProjectedLight({\n        layer\n      })),\n      pointLights: this.pointLights.map(pointLight => pointLight.getProjectedLight({\n        layer\n      }))\n    };\n    return parameters;\n  }\n\n  cleanup() {\n    for (const shadowPass of this.shadowPasses) {\n      shadowPass.delete();\n    }\n\n    this.shadowPasses.length = 0;\n    this.shadowMaps.length = 0;\n\n    if (this.dummyShadowMap) {\n      this.dummyShadowMap.delete();\n      this.dummyShadowMap = null;\n    }\n\n    if (this.shadow && this.programManager) {\n      this.programManager.removeDefaultModule(shadow);\n      this.programManager = null;\n    }\n  }\n\n  _calculateMatrices() {\n    const lightMatrices = [];\n\n    for (const light of this.directionalLights) {\n      const viewMatrix = new Matrix4().lookAt({\n        eye: new Vector3(light.direction).negate()\n      });\n      lightMatrices.push(viewMatrix);\n    }\n\n    return lightMatrices;\n  }\n\n  _createShadowPasses(gl) {\n    for (let i = 0; i < this.directionalLights.length; i++) {\n      const shadowPass = new ShadowPass(gl);\n      this.shadowPasses[i] = shadowPass;\n      this.shadowMaps[i] = shadowPass.shadowMap;\n    }\n  }\n\n  _applyDefaultLights() {\n    const {\n      ambientLight,\n      pointLights,\n      directionalLights\n    } = this;\n\n    if (!ambientLight && pointLights.length === 0 && directionalLights.length === 0) {\n      this.ambientLight = new AmbientLight(DEFAULT_AMBIENT_LIGHT_PROPS);\n      this.directionalLights.push(new DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[0]), new DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[1]));\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Texture2D","ProgramManager","AmbientLight","DirectionalLight","Matrix4","Vector3","ShadowPass","shadow","DEFAULT_AMBIENT_LIGHT_PROPS","color","intensity","DEFAULT_DIRECTIONAL_LIGHT_PROPS","direction","DEFAULT_SHADOW_COLOR","LightingEffect","constructor","props","_defineProperty","key","lightSource","type","ambientLight","directionalLights","push","pointLights","_applyDefaultLights","some","light","preRender","gl","layers","layerFilter","viewports","onViewportActive","views","shadowMatrices","_calculateMatrices","shadowPasses","length","_createShadowPasses","programManager","getDefaultProgramManager","addDefaultModule","dummyShadowMap","width","height","i","shadowPass","render","moduleParameters","shadowLightId","getModuleParameters","layer","parameters","shadowMaps","shadowColor","lightSources","map","directionalLight","getProjectedLight","pointLight","cleanup","delete","removeDefaultModule","lightMatrices","viewMatrix","lookAt","eye","negate","shadowMap"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplicații\\earthquakes\\node_modules\\@deck.gl\\core\\src\\effects\\lighting\\lighting-effect.ts"],"sourcesContent":["import {Texture2D, ProgramManager} from '@luma.gl/core';\nimport {AmbientLight} from './ambient-light';\nimport {DirectionalLight} from './directional-light';\nimport {PointLight} from './point-light';\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport ShadowPass from '../../passes/shadow-pass';\nimport shadow from '../../shaderlib/shadow/shadow';\n\nimport type Layer from '../../lib/layer';\nimport type {Effect, PreRenderOptions} from '../../lib/effect';\n\nconst DEFAULT_AMBIENT_LIGHT_PROPS = {color: [255, 255, 255], intensity: 1.0};\nconst DEFAULT_DIRECTIONAL_LIGHT_PROPS = [\n  {\n    color: [255, 255, 255],\n    intensity: 1.0,\n    direction: [-1, 3, -1]\n  },\n  {\n    color: [255, 255, 255],\n    intensity: 0.9,\n    direction: [1, -8, -2.5]\n  }\n];\nconst DEFAULT_SHADOW_COLOR = [0, 0, 0, 200 / 255];\n\n// Class to manage ambient, point and directional light sources in deck\nexport default class LightingEffect implements Effect {\n  id = 'lighting-effect';\n  props = null;\n  shadowColor: number[] = DEFAULT_SHADOW_COLOR;\n\n  private shadow: boolean;\n  private ambientLight: AmbientLight | null = null;\n  private directionalLights: DirectionalLight[] = [];\n  private pointLights: PointLight[] = [];\n  private shadowPasses: ShadowPass[] = [];\n  private shadowMaps: Texture2D[] = [];\n  private dummyShadowMap: Texture2D | null = null;\n  private programManager?: ProgramManager;\n  private shadowMatrices?: Matrix4[];\n\n  constructor(props: Record<string, PointLight | DirectionalLight | AmbientLight> = {}) {\n    for (const key in props) {\n      const lightSource = props[key];\n\n      switch (lightSource.type) {\n        case 'ambient':\n          this.ambientLight = lightSource;\n          break;\n\n        case 'directional':\n          this.directionalLights.push(lightSource as DirectionalLight);\n          break;\n\n        case 'point':\n          this.pointLights.push(lightSource as PointLight);\n          break;\n        default:\n      }\n    }\n    this._applyDefaultLights();\n\n    this.shadow = this.directionalLights.some(light => light.shadow);\n  }\n\n  preRender(\n    gl: WebGLRenderingContext,\n    {layers, layerFilter, viewports, onViewportActive, views}: PreRenderOptions\n  ) {\n    if (!this.shadow) return;\n\n    // create light matrix every frame to make sure always updated from light source\n    this.shadowMatrices = this._calculateMatrices();\n\n    if (this.shadowPasses.length === 0) {\n      this._createShadowPasses(gl);\n    }\n    if (!this.programManager) {\n      // TODO - support multiple contexts\n      this.programManager = ProgramManager.getDefaultProgramManager(gl);\n      if (shadow) {\n        this.programManager.addDefaultModule(shadow);\n      }\n    }\n\n    if (!this.dummyShadowMap) {\n      this.dummyShadowMap = new Texture2D(gl, {\n        width: 1,\n        height: 1\n      });\n    }\n\n    for (let i = 0; i < this.shadowPasses.length; i++) {\n      const shadowPass = this.shadowPasses[i];\n      shadowPass.render({\n        layers,\n        layerFilter,\n        viewports,\n        onViewportActive,\n        views,\n        moduleParameters: {\n          shadowLightId: i,\n          dummyShadowMap: this.dummyShadowMap,\n          shadowMatrices: this.shadowMatrices\n        }\n      });\n    }\n  }\n\n  getModuleParameters(layer: Layer) {\n    const parameters: {\n      lightSources?: {\n        ambientLight: AmbientLight | null;\n        directionalLights: DirectionalLight[];\n        pointLights: PointLight[];\n      };\n      shadowMaps?: Texture2D[];\n      dummyShadowMap?: Texture2D;\n      shadowColor?: number[];\n      shadowMatrices?: Matrix4[];\n    } = this.shadow\n      ? {\n          shadowMaps: this.shadowMaps,\n          dummyShadowMap: this.dummyShadowMap,\n          shadowColor: this.shadowColor,\n          shadowMatrices: this.shadowMatrices\n        }\n      : {};\n\n    // when not rendering to screen, turn off lighting by adding empty light source object\n    // lights shader module relies on the `lightSources` to turn on/off lighting\n    parameters.lightSources = {\n      ambientLight: this.ambientLight,\n      directionalLights: this.directionalLights.map(directionalLight =>\n        directionalLight.getProjectedLight({layer})\n      ),\n      pointLights: this.pointLights.map(pointLight => pointLight.getProjectedLight({layer}))\n    };\n\n    return parameters;\n  }\n\n  cleanup(): void {\n    for (const shadowPass of this.shadowPasses) {\n      shadowPass.delete();\n    }\n    this.shadowPasses.length = 0;\n    this.shadowMaps.length = 0;\n\n    if (this.dummyShadowMap) {\n      this.dummyShadowMap.delete();\n      this.dummyShadowMap = null;\n    }\n\n    if (this.shadow && this.programManager) {\n      this.programManager.removeDefaultModule(shadow);\n      this.programManager = null;\n    }\n  }\n\n  private _calculateMatrices(): Matrix4[] {\n    const lightMatrices: Matrix4[] = [];\n    for (const light of this.directionalLights) {\n      const viewMatrix = new Matrix4().lookAt({\n        eye: new Vector3(light.direction).negate()\n      });\n\n      lightMatrices.push(viewMatrix);\n    }\n    return lightMatrices;\n  }\n\n  private _createShadowPasses(gl: WebGLRenderingContext): void {\n    for (let i = 0; i < this.directionalLights.length; i++) {\n      const shadowPass = new ShadowPass(gl);\n      this.shadowPasses[i] = shadowPass;\n      this.shadowMaps[i] = shadowPass.shadowMap;\n    }\n  }\n\n  private _applyDefaultLights(): void {\n    const {ambientLight, pointLights, directionalLights} = this;\n    if (!ambientLight && pointLights.length === 0 && directionalLights.length === 0) {\n      this.ambientLight = new AmbientLight(DEFAULT_AMBIENT_LIGHT_PROPS);\n      this.directionalLights.push(\n        new DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[0]),\n        new DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[1])\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}