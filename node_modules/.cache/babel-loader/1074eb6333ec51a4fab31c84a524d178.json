{"ast":null,"code":"const BASE32_CODES = '0123456789bcdefghjkmnpqrstuvwxyz';\nconst BASE32_CODES_DICT = {};\n\nfor (let i = 0; i < BASE32_CODES.length; i++) {\n  BASE32_CODES_DICT[BASE32_CODES.charAt(i)] = i;\n}\n\nconst MIN_LAT = -90;\nconst MAX_LAT = 90;\nconst MIN_LON = -180;\nconst MAX_LON = 180;\nexport function getGeohashBounds(geohash) {\n  let isLon = true;\n  let maxLat = MAX_LAT;\n  let minLat = MIN_LAT;\n  let maxLon = MAX_LON;\n  let minLon = MIN_LON;\n  let mid;\n  let hashValue = 0;\n\n  for (let i = 0, l = geohash.length; i < l; i++) {\n    const code = geohash[i].toLowerCase();\n    hashValue = BASE32_CODES_DICT[code];\n\n    for (let bits = 4; bits >= 0; bits--) {\n      const bit = hashValue >> bits & 1;\n\n      if (isLon) {\n        mid = (maxLon + minLon) / 2;\n\n        if (bit === 1) {\n          minLon = mid;\n        } else {\n          maxLon = mid;\n        }\n      } else {\n        mid = (maxLat + minLat) / 2;\n\n        if (bit === 1) {\n          minLat = mid;\n        } else {\n          maxLat = mid;\n        }\n      }\n\n      isLon = !isLon;\n    }\n  }\n\n  return [minLat, minLon, maxLat, maxLon];\n}\nexport function getGeohashPolygon(geohash) {\n  const [s, w, n, e] = getGeohashBounds(geohash);\n  return [e, n, e, s, w, s, w, n, e, n];\n}","map":{"version":3,"mappings":"AAAA,MAAMA,YAAY,GAAG,kCAArB;AACA,MAAMC,iBAAiB,GAAG,EAA1B;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,YAAY,CAACG,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;EAC5CD,iBAAiB,CAACD,YAAY,CAACI,MAAbJ,CAAoBE,CAApBF,CAAD,CAAjBC,GAA4CC,CAA5CD;AACD;;AAED,MAAMI,OAAO,GAAG,CAAC,EAAjB;AACA,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,OAAO,GAAG,CAAC,GAAjB;AACA,MAAMC,OAAO,GAAG,GAAhB;AAGA,OAAO,SAASC,gBAAT,CAA0BC,OAA1B,EAAqD;EAC1D,IAAIC,KAAK,GAAG,IAAZ;EACA,IAAIC,MAAM,GAAGN,OAAb;EACA,IAAIO,MAAM,GAAGR,OAAb;EACA,IAAIS,MAAM,GAAGN,OAAb;EACA,IAAIO,MAAM,GAAGR,OAAb;EACA,IAAIS,GAAJ;EAEA,IAAIC,SAAS,GAAG,CAAhB;;EACA,KAAK,IAAIf,CAAC,GAAG,CAAR,EAAWgB,CAAC,GAAGR,OAAO,CAACP,MAA5B,EAAoCD,CAAC,GAAGgB,CAAxC,EAA2ChB,CAAC,EAA5C,EAAgD;IAC9C,MAAMiB,IAAI,GAAGT,OAAO,CAACR,CAAD,CAAPQ,CAAWU,WAAXV,EAAb;IACAO,SAAS,GAAGhB,iBAAiB,CAACkB,IAAD,CAA7BF;;IAEA,KAAK,IAAII,IAAI,GAAG,CAAhB,EAAmBA,IAAI,IAAI,CAA3B,EAA8BA,IAAI,EAAlC,EAAsC;MACpC,MAAMC,GAAG,GAAIL,SAAS,IAAII,IAAbJ,GAAqB,CAAlC;;MACA,IAAIN,KAAJ,EAAW;QACTK,GAAG,GAAG,CAACF,MAAM,GAAGC,MAAV,IAAoB,CAA1BC;;QACA,IAAIM,GAAG,KAAK,CAAZ,EAAe;UACbP,MAAM,GAAGC,GAATD;QADF,OAEO;UACLD,MAAM,GAAGE,GAATF;QACD;MANH,OAOO;QACLE,GAAG,GAAG,CAACJ,MAAM,GAAGC,MAAV,IAAoB,CAA1BG;;QACA,IAAIM,GAAG,KAAK,CAAZ,EAAe;UACbT,MAAM,GAAGG,GAATH;QADF,OAEO;UACLD,MAAM,GAAGI,GAATJ;QACD;MACF;;MACDD,KAAK,GAAG,CAACA,KAATA;IACD;EACF;;EAED,OAAO,CAACE,MAAD,EAASE,MAAT,EAAiBH,MAAjB,EAAyBE,MAAzB,CAAP;AACD;AAED,OAAO,SAASS,iBAAT,CAA2Bb,OAA3B,EAAsD;EAC3D,MAAM,CAACc,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,IAAelB,gBAAgB,CAACC,OAAD,CAArC;EAEA,OAAO,CAACiB,CAAD,EAAID,CAAJ,EAAOC,CAAP,EAAUH,CAAV,EAAaC,CAAb,EAAgBD,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4BD,CAA5B,CAAP;AACD","names":["BASE32_CODES","BASE32_CODES_DICT","i","length","charAt","MIN_LAT","MAX_LAT","MIN_LON","MAX_LON","getGeohashBounds","geohash","isLon","maxLat","minLat","maxLon","minLon","mid","hashValue","l","code","toLowerCase","bits","bit","getGeohashPolygon","s","w","n","e"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplica»õii\\earthquakes\\node_modules\\@deck.gl\\geo-layers\\src\\geohash-layer\\geohash-utils.ts"],"sourcesContent":["const BASE32_CODES = '0123456789bcdefghjkmnpqrstuvwxyz';\nconst BASE32_CODES_DICT = {};\nfor (let i = 0; i < BASE32_CODES.length; i++) {\n  BASE32_CODES_DICT[BASE32_CODES.charAt(i)] = i;\n}\n\nconst MIN_LAT = -90;\nconst MAX_LAT = 90;\nconst MIN_LON = -180;\nconst MAX_LON = 180;\n\n// Adapted from ngeohash decode_bbox\nexport function getGeohashBounds(geohash: string): number[] {\n  let isLon = true;\n  let maxLat = MAX_LAT;\n  let minLat = MIN_LAT;\n  let maxLon = MAX_LON;\n  let minLon = MIN_LON;\n  let mid: number;\n\n  let hashValue = 0;\n  for (let i = 0, l = geohash.length; i < l; i++) {\n    const code = geohash[i].toLowerCase();\n    hashValue = BASE32_CODES_DICT[code];\n\n    for (let bits = 4; bits >= 0; bits--) {\n      const bit = (hashValue >> bits) & 1;\n      if (isLon) {\n        mid = (maxLon + minLon) / 2;\n        if (bit === 1) {\n          minLon = mid;\n        } else {\n          maxLon = mid;\n        }\n      } else {\n        mid = (maxLat + minLat) / 2;\n        if (bit === 1) {\n          minLat = mid;\n        } else {\n          maxLat = mid;\n        }\n      }\n      isLon = !isLon;\n    }\n  }\n\n  return [minLat, minLon, maxLat, maxLon];\n}\n\nexport function getGeohashPolygon(geohash: string): number[] {\n  const [s, w, n, e] = getGeohashBounds(geohash);\n\n  return [e, n, e, s, w, s, w, n, e, n];\n}\n"]},"metadata":{},"sourceType":"module"}