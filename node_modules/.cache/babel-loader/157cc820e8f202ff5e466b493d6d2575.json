{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Geometry } from '@luma.gl/core';\nimport { CompositeLayer, COORDINATE_SYSTEM, log } from '@deck.gl/core';\nimport { PointCloudLayer } from '@deck.gl/layers';\nimport { ScenegraphLayer } from '@deck.gl/mesh-layers';\nimport { default as MeshLayer } from '../mesh-layer/mesh-layer';\nimport { load } from '@loaders.gl/core';\nimport { Tileset3D, TILE_TYPE } from '@loaders.gl/tiles';\nimport { Tiles3DLoader } from '@loaders.gl/3d-tiles';\nconst SINGLE_DATA = [0];\nconst defaultProps = {\n  getPointColor: {\n    type: 'accessor',\n    value: [0, 0, 0, 255]\n  },\n  pointSize: 1.0,\n  data: null,\n  loader: Tiles3DLoader,\n  onTilesetLoad: {\n    type: 'function',\n    value: tileset3d => {},\n    compare: false\n  },\n  onTileLoad: {\n    type: 'function',\n    value: tileHeader => {},\n    compare: false\n  },\n  onTileUnload: {\n    type: 'function',\n    value: tileHeader => {},\n    compare: false\n  },\n  onTileError: {\n    type: 'function',\n    value: (tile, message, url) => {},\n    compare: false\n  },\n  _getMeshColor: {\n    type: 'function',\n    value: tileHeader => [255, 255, 255],\n    compare: false\n  }\n};\nexport default class Tile3DLayer extends CompositeLayer {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  initializeState() {\n    if ('onTileLoadFail' in this.props) {\n      log.removed('onTileLoadFail', 'onTileError')();\n    }\n\n    this.state = {\n      layerMap: {},\n      tileset3d: null,\n      activeViewports: {},\n      lastUpdatedViewports: null\n    };\n  }\n\n  get isLoaded() {\n    const {\n      tileset3d\n    } = this.state;\n    return tileset3d !== null && tileset3d.isLoaded();\n  }\n\n  shouldUpdateState(_ref) {\n    let {\n      changeFlags\n    } = _ref;\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(_ref2) {\n    let {\n      props,\n      oldProps,\n      changeFlags\n    } = _ref2;\n\n    if (props.data && props.data !== oldProps.data) {\n      this._loadTileset(props.data);\n    }\n\n    if (changeFlags.viewportChanged) {\n      const {\n        activeViewports\n      } = this.state;\n      const viewportsNumber = Object.keys(activeViewports).length;\n\n      if (viewportsNumber) {\n        this._updateTileset(activeViewports);\n\n        this.state.lastUpdatedViewports = activeViewports;\n        this.state.activeViewports = {};\n      }\n    }\n\n    if (changeFlags.propsChanged) {\n      const {\n        layerMap\n      } = this.state;\n\n      for (const key in layerMap) {\n        layerMap[key].needsUpdate = true;\n      }\n    }\n  }\n\n  activateViewport(viewport) {\n    const {\n      activeViewports,\n      lastUpdatedViewports\n    } = this.state;\n    this.internalState.viewport = viewport;\n    activeViewports[viewport.id] = viewport;\n    const lastViewport = lastUpdatedViewports === null || lastUpdatedViewports === void 0 ? void 0 : lastUpdatedViewports[viewport.id];\n\n    if (!lastViewport || !viewport.equals(lastViewport)) {\n      this.setChangeFlags({\n        viewportChanged: true\n      });\n      this.setNeedsUpdate();\n    }\n  }\n\n  getPickingInfo(_ref3) {\n    let {\n      info,\n      sourceLayer\n    } = _ref3;\n    const {\n      layerMap\n    } = this.state;\n    const layerId = sourceLayer && sourceLayer.id;\n\n    if (layerId) {\n      const substr = layerId.substring(this.id.length + 1);\n      const tileId = substr.substring(substr.indexOf('-') + 1);\n      info.object = layerMap[tileId] && layerMap[tileId].tile;\n    }\n\n    return info;\n  }\n\n  filterSubLayer(_ref4) {\n    let {\n      layer,\n      viewport\n    } = _ref4;\n    const {\n      tile\n    } = layer.props;\n    const {\n      id: viewportId\n    } = viewport;\n    return tile.selected && tile.viewportIds.includes(viewportId);\n  }\n\n  _updateAutoHighlight(info) {\n    if (info.sourceLayer) {\n      info.sourceLayer.updateAutoHighlight(info);\n    }\n  }\n\n  async _loadTileset(tilesetUrl) {\n    const {\n      loadOptions = {}\n    } = this.props;\n    let loader = this.props.loader || this.props.loaders;\n\n    if (Array.isArray(loader)) {\n      loader = loader[0];\n    }\n\n    const options = {\n      loadOptions: { ...loadOptions\n      }\n    };\n\n    if (loader.preload) {\n      const preloadOptions = await loader.preload(tilesetUrl, loadOptions);\n\n      if (preloadOptions.headers) {\n        options.loadOptions.fetch = { ...options.loadOptions.fetch,\n          headers: preloadOptions.headers\n        };\n      }\n\n      Object.assign(options, preloadOptions);\n    }\n\n    const tilesetJson = await load(tilesetUrl, loader, options.loadOptions);\n    const tileset3d = new Tileset3D(tilesetJson, {\n      onTileLoad: this._onTileLoad.bind(this),\n      onTileUnload: this._onTileUnload.bind(this),\n      onTileError: this.props.onTileError,\n      ...options\n    });\n    this.setState({\n      tileset3d,\n      layerMap: {}\n    });\n\n    this._updateTileset(this.state.activeViewports);\n\n    this.props.onTilesetLoad(tileset3d);\n  }\n\n  _onTileLoad(tileHeader) {\n    const {\n      lastUpdatedViewports\n    } = this.state;\n    this.props.onTileLoad(tileHeader);\n\n    this._updateTileset(lastUpdatedViewports);\n\n    this.setNeedsUpdate();\n  }\n\n  _onTileUnload(tileHeader) {\n    delete this.state.layerMap[tileHeader.id];\n    this.props.onTileUnload(tileHeader);\n  }\n\n  _updateTileset(viewports) {\n    if (!viewports) {\n      return;\n    }\n\n    const {\n      tileset3d\n    } = this.state;\n    const {\n      timeline\n    } = this.context;\n    const viewportsNumber = Object.keys(viewports).length;\n\n    if (!timeline || !viewportsNumber || !tileset3d) {\n      return;\n    }\n\n    tileset3d.selectTiles(Object.values(viewports)).then(frameNumber => {\n      const tilesetChanged = this.state.frameNumber !== frameNumber;\n\n      if (tilesetChanged) {\n        this.setState({\n          frameNumber\n        });\n      }\n    });\n  }\n\n  _getSubLayer(tileHeader, oldLayer) {\n    if (!tileHeader.content) {\n      return null;\n    }\n\n    switch (tileHeader.type) {\n      case TILE_TYPE.POINTCLOUD:\n        return this._makePointCloudLayer(tileHeader, oldLayer);\n\n      case TILE_TYPE.SCENEGRAPH:\n        return this._make3DModelLayer(tileHeader);\n\n      case TILE_TYPE.MESH:\n        return this._makeSimpleMeshLayer(tileHeader, oldLayer);\n\n      default:\n        throw new Error(\"Tile3DLayer: Failed to render layer of type \".concat(tileHeader.content.type));\n    }\n  }\n\n  _makePointCloudLayer(tileHeader, oldLayer) {\n    const {\n      attributes,\n      pointCount,\n      constantRGBA,\n      cartographicOrigin,\n      modelMatrix\n    } = tileHeader.content;\n    const {\n      positions,\n      normals,\n      colors\n    } = attributes;\n\n    if (!positions) {\n      return null;\n    }\n\n    const data = oldLayer && oldLayer.props.data || {\n      header: {\n        vertexCount: pointCount\n      },\n      attributes: {\n        POSITION: positions,\n        NORMAL: normals,\n        COLOR_0: colors\n      }\n    };\n    const {\n      pointSize,\n      getPointColor\n    } = this.props;\n    const SubLayerClass = this.getSubLayerClass('pointcloud', PointCloudLayer);\n    return new SubLayerClass({\n      pointSize\n    }, this.getSubLayerProps({\n      id: 'pointcloud'\n    }), {\n      id: \"\".concat(this.id, \"-pointcloud-\").concat(tileHeader.id),\n      tile: tileHeader,\n      data,\n      coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n      coordinateOrigin: cartographicOrigin,\n      modelMatrix,\n      getColor: constantRGBA || getPointColor,\n      _offset: 0\n    });\n  }\n\n  _make3DModelLayer(tileHeader) {\n    const {\n      gltf,\n      instances,\n      cartographicOrigin,\n      modelMatrix\n    } = tileHeader.content;\n    const SubLayerClass = this.getSubLayerClass('scenegraph', ScenegraphLayer);\n    return new SubLayerClass({\n      _lighting: 'pbr'\n    }, this.getSubLayerProps({\n      id: 'scenegraph'\n    }), {\n      id: \"\".concat(this.id, \"-scenegraph-\").concat(tileHeader.id),\n      tile: tileHeader,\n      data: instances || SINGLE_DATA,\n      scenegraph: gltf,\n      coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n      coordinateOrigin: cartographicOrigin,\n      modelMatrix,\n      getTransformMatrix: instance => instance.modelMatrix,\n      getPosition: [0, 0, 0],\n      _offset: 0\n    });\n  }\n\n  _makeSimpleMeshLayer(tileHeader, oldLayer) {\n    const content = tileHeader.content;\n    const {\n      attributes,\n      indices,\n      modelMatrix,\n      cartographicOrigin,\n      coordinateSystem = COORDINATE_SYSTEM.METER_OFFSETS,\n      material,\n      featureIds\n    } = content;\n    const {\n      _getMeshColor\n    } = this.props;\n    const geometry = oldLayer && oldLayer.props.mesh || new Geometry({\n      drawMode: 4,\n      attributes: getMeshGeometry(attributes),\n      indices\n    });\n    const SubLayerClass = this.getSubLayerClass('mesh', MeshLayer);\n    return new SubLayerClass(this.getSubLayerProps({\n      id: 'mesh'\n    }), {\n      id: \"\".concat(this.id, \"-mesh-\").concat(tileHeader.id),\n      tile: tileHeader,\n      mesh: geometry,\n      data: SINGLE_DATA,\n      getColor: _getMeshColor(tileHeader),\n      pbrMaterial: material,\n      modelMatrix,\n      coordinateOrigin: cartographicOrigin,\n      coordinateSystem,\n      featureIds,\n      _offset: 0\n    });\n  }\n\n  renderLayers() {\n    const {\n      tileset3d,\n      layerMap\n    } = this.state;\n\n    if (!tileset3d) {\n      return null;\n    }\n\n    return tileset3d.tiles.map(tile => {\n      const layerCache = layerMap[tile.id] = layerMap[tile.id] || {\n        tile\n      };\n      let {\n        layer\n      } = layerCache;\n\n      if (tile.selected) {\n        if (!layer) {\n          layer = this._getSubLayer(tile);\n        } else if (layerCache.needsUpdate) {\n          layer = this._getSubLayer(tile, layer);\n          layerCache.needsUpdate = false;\n        }\n      }\n\n      layerCache.layer = layer;\n      return layer;\n    }).filter(Boolean);\n  }\n\n}\n\n_defineProperty(Tile3DLayer, \"defaultProps\", defaultProps);\n\n_defineProperty(Tile3DLayer, \"layerName\", 'Tile3DLayer');\n\nfunction getMeshGeometry(contentAttributes) {\n  const attributes = {};\n  attributes.positions = { ...contentAttributes.positions,\n    value: new Float32Array(contentAttributes.positions.value)\n  };\n\n  if (contentAttributes.normals) {\n    attributes.normals = contentAttributes.normals;\n  }\n\n  if (contentAttributes.texCoords) {\n    attributes.texCoords = contentAttributes.texCoords;\n  }\n\n  if (contentAttributes.colors) {\n    attributes.colors = contentAttributes.colors;\n  }\n\n  if (contentAttributes.uvRegions) {\n    attributes.uvRegions = contentAttributes.uvRegions;\n  }\n\n  return attributes;\n}","map":{"version":3,"mappings":"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","names":["Geometry","CompositeLayer","COORDINATE_SYSTEM","log","PointCloudLayer","ScenegraphLayer","default","MeshLayer","load","Tileset3D","TILE_TYPE","Tiles3DLoader","SINGLE_DATA","defaultProps","getPointColor","type","value","pointSize","data","loader","onTilesetLoad","tileset3d","compare","onTileLoad","tileHeader","onTileUnload","onTileError","tile","message","url","_getMeshColor","Tile3DLayer","constructor","_defineProperty","initializeState","props","removed","state","layerMap","activeViewports","lastUpdatedViewports","isLoaded","shouldUpdateState","changeFlags","somethingChanged","updateState","oldProps","_loadTileset","viewportChanged","viewportsNumber","Object","keys","length","_updateTileset","propsChanged","key","needsUpdate","activateViewport","viewport","internalState","id","lastViewport","equals","setChangeFlags","setNeedsUpdate","getPickingInfo","info","sourceLayer","layerId","substr","substring","tileId","indexOf","object","filterSubLayer","layer","viewportId","selected","viewportIds","includes","_updateAutoHighlight","updateAutoHighlight","tilesetUrl","loadOptions","loaders","Array","isArray","options","preload","preloadOptions","headers","fetch","assign","tilesetJson","_onTileLoad","bind","_onTileUnload","setState","viewports","timeline","context","selectTiles","values","then","frameNumber","tilesetChanged","_getSubLayer","oldLayer","content","POINTCLOUD","_makePointCloudLayer","SCENEGRAPH","_make3DModelLayer","MESH","_makeSimpleMeshLayer","Error","attributes","pointCount","constantRGBA","cartographicOrigin","modelMatrix","positions","normals","colors","header","vertexCount","POSITION","NORMAL","COLOR_0","SubLayerClass","getSubLayerClass","getSubLayerProps","coordinateSystem","METER_OFFSETS","coordinateOrigin","getColor","_offset","gltf","instances","_lighting","scenegraph","getTransformMatrix","instance","getPosition","indices","material","featureIds","geometry","mesh","drawMode","getMeshGeometry","pbrMaterial","renderLayers","tiles","map","layerCache","filter","Boolean","contentAttributes","Float32Array","texCoords","uvRegions"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@deck.gl\\geo-layers\\src\\tile-3d-layer\\tile-3d-layer.ts"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {Geometry} from '@luma.gl/core';\n\nimport {\n  Accessor,\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  COORDINATE_SYSTEM,\n  FilterContext,\n  GetPickingInfoParams,\n  Layer,\n  LayersList,\n  log,\n  PickingInfo,\n  UpdateParameters,\n  Viewport,\n  DefaultProps\n} from '@deck.gl/core';\nimport {PointCloudLayer} from '@deck.gl/layers';\nimport {ScenegraphLayer} from '@deck.gl/mesh-layers';\nimport {default as MeshLayer} from '../mesh-layer/mesh-layer';\n\nimport {load} from '@loaders.gl/core';\nimport {MeshAttributes} from '@loaders.gl/schema';\nimport {Tileset3D, Tile3D, TILE_TYPE} from '@loaders.gl/tiles';\nimport {Tiles3DLoader} from '@loaders.gl/3d-tiles';\n\nconst SINGLE_DATA = [0];\n\nconst defaultProps: DefaultProps<Tile3DLayerProps> = {\n  getPointColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  pointSize: 1.0,\n\n  // @ts-expect-error Disable async data loading (handling it in _loadTileSet)\n  data: null,\n  loader: Tiles3DLoader,\n\n  onTilesetLoad: {type: 'function', value: tileset3d => {}, compare: false},\n  onTileLoad: {type: 'function', value: tileHeader => {}, compare: false},\n  onTileUnload: {type: 'function', value: tileHeader => {}, compare: false},\n  onTileError: {type: 'function', value: (tile, message, url) => {}, compare: false},\n  _getMeshColor: {type: 'function', value: tileHeader => [255, 255, 255], compare: false}\n};\n\n/** All properties supported by Tile3DLayer */\nexport type Tile3DLayerProps<DataT = any> = _Tile3DLayerProps<DataT> & CompositeLayerProps<DataT>;\n\n/** Props added by the Tile3DLayer */\ntype _Tile3DLayerProps<DataT> = {\n  /** Color Accessor for point clouds. **/\n  getPointColor?: Accessor<DataT, Color>;\n\n  /** Global radius of all points in pixels. **/\n  pointSize?: number;\n\n  /** A loader which is used to decode the fetched tiles.\n   * @deprecated Use `loaders` instead\n   */\n  loader?: typeof Tiles3DLoader;\n\n  /** Called when Tileset JSON file is loaded. **/\n  onTilesetLoad?: (tile: Tileset3D) => void;\n\n  /** Called when a tile in the tileset hierarchy is loaded. **/\n  onTileLoad?: (tile: Tile3D) => void;\n\n  /** Called when a tile is unloaded. **/\n  onTileUnload?: (tile: Tile3D) => void;\n\n  /** Called when a tile fails to load. **/\n  onTileError?: (tile: Tile3D, url: string, message: string) => void;\n\n  /** (Experimental) Accessor to change color of mesh based on properties. **/\n  _getMeshColor?: (tile: Tile3D) => Color;\n};\n\n/** Render 3d tiles data formatted according to the [3D Tiles Specification](https://www.opengeospatial.org/standards/3DTiles) and [`ESRI I3S`](https://github.com/Esri/i3s-spec) */\nexport default class Tile3DLayer<DataT = any, ExtraPropsT = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_Tile3DLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps as any;\n  static layerName = 'Tile3DLayer';\n\n  state!: {\n    activeViewports: {};\n    frameNumber?: number;\n    lastUpdatedViewports: {[viewportId: string]: Viewport} | null;\n    layerMap: {[layerId: string]: any};\n    tileset3d: Tileset3D | null;\n  };\n\n  initializeState() {\n    if ('onTileLoadFail' in this.props) {\n      log.removed('onTileLoadFail', 'onTileError')();\n    }\n    // prop verification\n    this.state = {\n      layerMap: {},\n      tileset3d: null,\n      activeViewports: {},\n      lastUpdatedViewports: null\n    };\n  }\n\n  get isLoaded(): boolean {\n    const {tileset3d} = this.state;\n    return tileset3d !== null && tileset3d.isLoaded();\n  }\n\n  shouldUpdateState({changeFlags}: UpdateParameters<this>): boolean {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}: UpdateParameters<this>): void {\n    if (props.data && props.data !== oldProps.data) {\n      this._loadTileset(props.data);\n    }\n\n    if (changeFlags.viewportChanged) {\n      const {activeViewports} = this.state;\n      const viewportsNumber = Object.keys(activeViewports).length;\n      if (viewportsNumber) {\n        this._updateTileset(activeViewports);\n        this.state.lastUpdatedViewports = activeViewports;\n        this.state.activeViewports = {};\n      }\n    }\n    if (changeFlags.propsChanged) {\n      const {layerMap} = this.state;\n      for (const key in layerMap) {\n        layerMap[key].needsUpdate = true;\n      }\n    }\n  }\n\n  activateViewport(viewport: Viewport): void {\n    const {activeViewports, lastUpdatedViewports} = this.state;\n    this.internalState!.viewport = viewport;\n\n    activeViewports[viewport.id] = viewport;\n    const lastViewport = lastUpdatedViewports?.[viewport.id];\n    if (!lastViewport || !viewport.equals(lastViewport)) {\n      this.setChangeFlags({viewportChanged: true});\n      this.setNeedsUpdate();\n    }\n  }\n\n  getPickingInfo({info, sourceLayer}: GetPickingInfoParams) {\n    const {layerMap} = this.state;\n    const layerId = sourceLayer && sourceLayer.id;\n    if (layerId) {\n      // layerId: this.id-[scenegraph|pointcloud]-tileId\n      const substr = layerId.substring(this.id.length + 1);\n      const tileId = substr.substring(substr.indexOf('-') + 1);\n      info.object = layerMap[tileId] && layerMap[tileId].tile;\n    }\n\n    return info;\n  }\n\n  filterSubLayer({layer, viewport}: FilterContext): boolean {\n    // All sublayers will have a tile prop\n    const {tile} = layer.props as unknown as {tile: Tile3D};\n    const {id: viewportId} = viewport;\n    return tile.selected && tile.viewportIds.includes(viewportId);\n  }\n\n  protected _updateAutoHighlight(info: PickingInfo): void {\n    if (info.sourceLayer) {\n      info.sourceLayer.updateAutoHighlight(info);\n    }\n  }\n\n  private async _loadTileset(tilesetUrl) {\n    const {loadOptions = {}} = this.props;\n\n    // TODO: deprecate `loader` in v9.0\n    // @ts-ignore\n    let loader = this.props.loader || this.props.loaders;\n    if (Array.isArray(loader)) {\n      loader = loader[0];\n    }\n\n    const options = {loadOptions: {...loadOptions}};\n    if (loader.preload) {\n      const preloadOptions = await loader.preload(tilesetUrl, loadOptions);\n\n      if (preloadOptions.headers) {\n        options.loadOptions.fetch = {\n          ...options.loadOptions.fetch,\n          headers: preloadOptions.headers\n        };\n      }\n      Object.assign(options, preloadOptions);\n    }\n    const tilesetJson = await load(tilesetUrl, loader, options.loadOptions);\n\n    const tileset3d = new Tileset3D(tilesetJson, {\n      onTileLoad: this._onTileLoad.bind(this),\n      onTileUnload: this._onTileUnload.bind(this),\n      onTileError: this.props.onTileError,\n      ...options\n    });\n\n    this.setState({\n      tileset3d,\n      layerMap: {}\n    });\n\n    this._updateTileset(this.state.activeViewports);\n    this.props.onTilesetLoad(tileset3d);\n  }\n\n  private _onTileLoad(tileHeader: Tile3D): void {\n    const {lastUpdatedViewports} = this.state;\n    this.props.onTileLoad(tileHeader);\n    this._updateTileset(lastUpdatedViewports);\n    this.setNeedsUpdate();\n  }\n\n  private _onTileUnload(tileHeader: Tile3D): void {\n    // Was cleaned up from tileset cache. We no longer need to track it.\n    delete this.state.layerMap[tileHeader.id];\n    this.props.onTileUnload(tileHeader);\n  }\n\n  private _updateTileset(viewports: {[viewportId: string]: Viewport} | null): void {\n    if (!viewports) {\n      return;\n    }\n    const {tileset3d} = this.state;\n    const {timeline} = this.context;\n    const viewportsNumber = Object.keys(viewports).length;\n    if (!timeline || !viewportsNumber || !tileset3d) {\n      return;\n    }\n    tileset3d.selectTiles(Object.values(viewports)).then(frameNumber => {\n      const tilesetChanged = this.state.frameNumber !== frameNumber;\n      if (tilesetChanged) {\n        this.setState({frameNumber});\n      }\n    });\n  }\n\n  private _getSubLayer(\n    tileHeader: Tile3D,\n    oldLayer?: Layer\n  ): MeshLayer<DataT> | PointCloudLayer<DataT> | ScenegraphLayer<DataT> | null {\n    if (!tileHeader.content) {\n      return null;\n    }\n\n    switch (tileHeader.type) {\n      case TILE_TYPE.POINTCLOUD:\n        return this._makePointCloudLayer(tileHeader, oldLayer as PointCloudLayer<DataT>);\n      case TILE_TYPE.SCENEGRAPH:\n        return this._make3DModelLayer(tileHeader);\n      case TILE_TYPE.MESH:\n        return this._makeSimpleMeshLayer(tileHeader, oldLayer as MeshLayer<DataT>);\n      default:\n        throw new Error(`Tile3DLayer: Failed to render layer of type ${tileHeader.content.type}`);\n    }\n  }\n\n  private _makePointCloudLayer(\n    tileHeader: Tile3D,\n    oldLayer?: PointCloudLayer<DataT>\n  ): PointCloudLayer<DataT> | null {\n    const {attributes, pointCount, constantRGBA, cartographicOrigin, modelMatrix} =\n      tileHeader.content;\n    const {positions, normals, colors} = attributes;\n\n    if (!positions) {\n      return null;\n    }\n    const data = (oldLayer && oldLayer.props.data) || {\n      header: {\n        vertexCount: pointCount\n      },\n      attributes: {\n        POSITION: positions,\n        NORMAL: normals,\n        COLOR_0: colors\n      }\n    };\n\n    const {pointSize, getPointColor} = this.props;\n    const SubLayerClass = this.getSubLayerClass('pointcloud', PointCloudLayer);\n    return new SubLayerClass(\n      {\n        pointSize\n      },\n      this.getSubLayerProps({\n        id: 'pointcloud'\n      }),\n      {\n        id: `${this.id}-pointcloud-${tileHeader.id}`,\n        tile: tileHeader,\n        data,\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n        getColor: constantRGBA || getPointColor,\n        _offset: 0\n      }\n    );\n  }\n\n  private _make3DModelLayer(tileHeader: Tile3D): ScenegraphLayer<DataT> {\n    const {gltf, instances, cartographicOrigin, modelMatrix} = tileHeader.content;\n\n    const SubLayerClass = this.getSubLayerClass('scenegraph', ScenegraphLayer);\n\n    return new SubLayerClass(\n      {\n        _lighting: 'pbr'\n      },\n      this.getSubLayerProps({\n        id: 'scenegraph'\n      }),\n      {\n        id: `${this.id}-scenegraph-${tileHeader.id}`,\n        tile: tileHeader,\n        data: instances || SINGLE_DATA,\n        scenegraph: gltf,\n\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n        getTransformMatrix: instance => instance.modelMatrix,\n        getPosition: [0, 0, 0],\n        _offset: 0\n      }\n    );\n  }\n\n  private _makeSimpleMeshLayer(tileHeader: Tile3D, oldLayer?: MeshLayer<DataT>): MeshLayer<DataT> {\n    const content = tileHeader.content;\n    const {\n      attributes,\n      indices,\n      modelMatrix,\n      cartographicOrigin,\n      coordinateSystem = COORDINATE_SYSTEM.METER_OFFSETS,\n      material,\n      featureIds\n    } = content;\n    const {_getMeshColor} = this.props;\n\n    const geometry =\n      (oldLayer && oldLayer.props.mesh) ||\n      new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: getMeshGeometry(attributes),\n        indices\n      });\n\n    const SubLayerClass = this.getSubLayerClass('mesh', MeshLayer);\n\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        id: `${this.id}-mesh-${tileHeader.id}`,\n        tile: tileHeader,\n        mesh: geometry,\n        data: SINGLE_DATA,\n        getColor: _getMeshColor(tileHeader),\n        pbrMaterial: material,\n        modelMatrix,\n        coordinateOrigin: cartographicOrigin,\n        coordinateSystem,\n        featureIds,\n        _offset: 0\n      }\n    );\n  }\n\n  renderLayers(): Layer | null | LayersList {\n    const {tileset3d, layerMap} = this.state;\n    if (!tileset3d) {\n      return null;\n    }\n\n    // loaders.gl doesn't provide a type for tileset3d.tiles\n    return (tileset3d.tiles as Tile3D[])\n      .map(tile => {\n        const layerCache = (layerMap[tile.id] = layerMap[tile.id] || {tile});\n        let {layer} = layerCache;\n        if (tile.selected) {\n          // render selected tiles\n          if (!layer) {\n            // create layer\n            layer = this._getSubLayer(tile);\n          } else if (layerCache.needsUpdate) {\n            // props have changed, rerender layer\n            layer = this._getSubLayer(tile, layer);\n            layerCache.needsUpdate = false;\n          }\n        }\n        layerCache.layer = layer;\n        return layer;\n      })\n      .filter(Boolean);\n  }\n}\n\nfunction getMeshGeometry(contentAttributes: MeshAttributes): MeshAttributes {\n  const attributes: MeshAttributes = {};\n  attributes.positions = {\n    ...contentAttributes.positions,\n    value: new Float32Array(contentAttributes.positions.value)\n  };\n  if (contentAttributes.normals) {\n    attributes.normals = contentAttributes.normals;\n  }\n  if (contentAttributes.texCoords) {\n    attributes.texCoords = contentAttributes.texCoords;\n  }\n  if (contentAttributes.colors) {\n    attributes.colors = contentAttributes.colors;\n  }\n  if (contentAttributes.uvRegions) {\n    attributes.uvRegions = contentAttributes.uvRegions;\n  }\n  return attributes;\n}\n"]},"metadata":{},"sourceType":"module"}