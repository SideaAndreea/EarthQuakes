{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport DataColumn from './data-column';\nimport assert from '../../utils/assert';\nimport { createIterable, getAccessorFromBuffer } from '../../utils/iterable-utils';\nimport { fillArray } from '../../utils/flatten';\nimport * as range from '../../utils/range';\nimport { normalizeTransitionSettings } from './attribute-transition-utils';\nexport default class Attribute extends DataColumn {\n  constructor(gl, opts) {\n    super(gl, opts, {\n      startIndices: null,\n      lastExternalBuffer: null,\n      binaryValue: null,\n      binaryAccessor: null,\n      needsUpdate: true,\n      needsRedraw: false,\n      updateRanges: range.FULL\n    });\n\n    _defineProperty(this, \"constant\", false);\n\n    this.settings.update = opts.update || (opts.accessor ? this._autoUpdater : undefined);\n    Object.seal(this.settings);\n    Object.seal(this.state);\n\n    this._validateAttributeUpdaters();\n  }\n\n  get startIndices() {\n    return this.state.startIndices;\n  }\n\n  set startIndices(layout) {\n    this.state.startIndices = layout;\n  }\n\n  needsUpdate() {\n    return this.state.needsUpdate;\n  }\n\n  needsRedraw() {\n    let {\n      clearChangedFlags = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const needsRedraw = this.state.needsRedraw;\n    this.state.needsRedraw = needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getUpdateTriggers() {\n    const {\n      accessor\n    } = this.settings;\n    return [this.id].concat(typeof accessor !== 'function' && accessor || []);\n  }\n\n  supportsTransition() {\n    return Boolean(this.settings.transition);\n  }\n\n  getTransitionSetting(opts) {\n    if (!opts || !this.supportsTransition()) {\n      return null;\n    }\n\n    const {\n      accessor\n    } = this.settings;\n    const layerSettings = this.settings.transition;\n    const userSettings = Array.isArray(accessor) ? opts[accessor.find(a => opts[a])] : opts[accessor];\n    return normalizeTransitionSettings(userSettings, layerSettings);\n  }\n\n  setNeedsUpdate() {\n    let reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.id;\n    let dataRange = arguments.length > 1 ? arguments[1] : undefined;\n    this.state.needsUpdate = this.state.needsUpdate || reason;\n    this.setNeedsRedraw(reason);\n\n    if (dataRange) {\n      const {\n        startRow = 0,\n        endRow = Infinity\n      } = dataRange;\n      this.state.updateRanges = range.add(this.state.updateRanges, [startRow, endRow]);\n    } else {\n      this.state.updateRanges = range.FULL;\n    }\n  }\n\n  clearNeedsUpdate() {\n    this.state.needsUpdate = false;\n    this.state.updateRanges = range.EMPTY;\n  }\n\n  setNeedsRedraw() {\n    let reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.id;\n    this.state.needsRedraw = this.state.needsRedraw || reason;\n  }\n\n  allocate(numInstances) {\n    const {\n      state,\n      settings\n    } = this;\n\n    if (settings.noAlloc) {\n      return false;\n    }\n\n    if (settings.update) {\n      super.allocate(numInstances, state.updateRanges !== range.FULL);\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer(_ref) {\n    let {\n      numInstances,\n      data,\n      props,\n      context\n    } = _ref;\n\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const {\n      state: {\n        updateRanges\n      },\n      settings: {\n        update,\n        noAlloc\n      }\n    } = this;\n    let updated = true;\n\n    if (update) {\n      for (const [startRow, endRow] of updateRanges) {\n        update.call(context, this, {\n          data,\n          startRow,\n          endRow,\n          props,\n          numInstances\n        });\n      }\n\n      if (!this.value) {} else if (this.constant || this.buffer.byteLength < this.value.byteLength + this.byteOffset) {\n        this.setData({\n          value: this.value,\n          constant: this.constant\n        });\n        this.constant = false;\n      } else {\n        for (const [startRow, endRow] of updateRanges) {\n          const startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;\n          const endOffset = Number.isFinite(endRow) ? this.getVertexOffset(endRow) : noAlloc || !Number.isFinite(numInstances) ? this.value.length : numInstances * this.size;\n          super.updateSubBuffer({\n            startOffset,\n            endOffset\n          });\n        }\n      }\n\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    this.clearNeedsUpdate();\n    this.setNeedsRedraw();\n    return updated;\n  }\n\n  setConstantValue(value) {\n    if (value === undefined || typeof value === 'function') {\n      return false;\n    }\n\n    const hasChanged = this.setData({\n      constant: true,\n      value\n    });\n\n    if (hasChanged) {\n      this.setNeedsRedraw();\n    }\n\n    this.clearNeedsUpdate();\n    return true;\n  }\n\n  setExternalBuffer(buffer) {\n    const {\n      state\n    } = this;\n\n    if (!buffer) {\n      state.lastExternalBuffer = null;\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n\n    if (state.lastExternalBuffer === buffer) {\n      return true;\n    }\n\n    state.lastExternalBuffer = buffer;\n    this.setNeedsRedraw();\n    this.setData(buffer);\n    return true;\n  }\n\n  setBinaryValue(buffer) {\n    let startIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const {\n      state,\n      settings\n    } = this;\n\n    if (!buffer) {\n      state.binaryValue = null;\n      state.binaryAccessor = null;\n      return false;\n    }\n\n    if (settings.noAlloc) {\n      return false;\n    }\n\n    if (state.binaryValue === buffer) {\n      this.clearNeedsUpdate();\n      return true;\n    }\n\n    state.binaryValue = buffer;\n    this.setNeedsRedraw();\n    const needsUpdate = settings.transform || startIndices !== this.startIndices;\n\n    if (needsUpdate) {\n      if (ArrayBuffer.isView(buffer)) {\n        buffer = {\n          value: buffer\n        };\n      }\n\n      const binaryValue = buffer;\n      assert(ArrayBuffer.isView(binaryValue.value), \"invalid \".concat(settings.accessor));\n      const needsNormalize = Boolean(binaryValue.size) && binaryValue.size !== this.size;\n      state.binaryAccessor = getAccessorFromBuffer(binaryValue.value, {\n        size: binaryValue.size || this.size,\n        stride: binaryValue.stride,\n        offset: binaryValue.offset,\n        startIndices: startIndices,\n        nested: needsNormalize\n      });\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n    this.setData(buffer);\n    return true;\n  }\n\n  getVertexOffset(row) {\n    const {\n      startIndices\n    } = this;\n    const vertexIndex = startIndices ? startIndices[row] : row;\n    return vertexIndex * this.size;\n  }\n\n  getShaderAttributes() {\n    const shaderAttributeDefs = this.settings.shaderAttributes || {\n      [this.id]: null\n    };\n    const shaderAttributes = {};\n\n    for (const shaderAttributeName in shaderAttributeDefs) {\n      Object.assign(shaderAttributes, super.getShaderAttributes(shaderAttributeName, shaderAttributeDefs[shaderAttributeName]));\n    }\n\n    return shaderAttributes;\n  }\n\n  _autoUpdater(attribute, _ref2) {\n    let {\n      data,\n      startRow,\n      endRow,\n      props,\n      numInstances\n    } = _ref2;\n\n    if (attribute.constant) {\n      return;\n    }\n\n    const {\n      settings,\n      state,\n      value,\n      size,\n      startIndices\n    } = attribute;\n    const {\n      accessor,\n      transform\n    } = settings;\n    const accessorFunc = state.binaryAccessor || (typeof accessor === 'function' ? accessor : props[accessor]);\n    assert(typeof accessorFunc === 'function', \"accessor \\\"\".concat(accessor, \"\\\" is not a function\"));\n    let i = attribute.getVertexOffset(startRow);\n    const {\n      iterable,\n      objectInfo\n    } = createIterable(data, startRow, endRow);\n\n    for (const object of iterable) {\n      objectInfo.index++;\n      let objectValue = accessorFunc(object, objectInfo);\n\n      if (transform) {\n        objectValue = transform.call(this, objectValue);\n      }\n\n      if (startIndices) {\n        const numVertices = (objectInfo.index < startIndices.length - 1 ? startIndices[objectInfo.index + 1] : numInstances) - startIndices[objectInfo.index];\n\n        if (objectValue && Array.isArray(objectValue[0])) {\n          let startIndex = i;\n\n          for (const item of objectValue) {\n            attribute._normalizeValue(item, value, startIndex);\n\n            startIndex += size;\n          }\n        } else if (objectValue && objectValue.length > size) {\n          value.set(objectValue, i);\n        } else {\n          attribute._normalizeValue(objectValue, objectInfo.target, 0);\n\n          fillArray({\n            target: value,\n            source: objectInfo.target,\n            start: i,\n            count: numVertices\n          });\n        }\n\n        i += numVertices * size;\n      } else {\n        attribute._normalizeValue(objectValue, value, i);\n\n        i += size;\n      }\n    }\n  }\n\n  _validateAttributeUpdaters() {\n    const {\n      settings\n    } = this;\n    const hasUpdater = settings.noAlloc || typeof settings.update === 'function';\n\n    if (!hasUpdater) {\n      throw new Error(\"Attribute \".concat(this.id, \" missing update or accessor\"));\n    }\n  }\n\n  _checkAttributeArray() {\n    const {\n      value\n    } = this;\n    const limit = Math.min(4, this.size);\n\n    if (value && value.length >= limit) {\n      let valid = true;\n\n      switch (limit) {\n        case 4:\n          valid = valid && Number.isFinite(value[3]);\n\n        case 3:\n          valid = valid && Number.isFinite(value[2]);\n\n        case 2:\n          valid = valid && Number.isFinite(value[1]);\n\n        case 1:\n          valid = valid && Number.isFinite(value[0]);\n          break;\n\n        default:\n          valid = false;\n      }\n\n      if (!valid) {\n        throw new Error(\"Illegal attribute generated for \".concat(this.id));\n      }\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["DataColumn","assert","createIterable","getAccessorFromBuffer","fillArray","range","normalizeTransitionSettings","Attribute","constructor","gl","opts","startIndices","lastExternalBuffer","binaryValue","binaryAccessor","needsUpdate","needsRedraw","updateRanges","FULL","_defineProperty","settings","update","accessor","_autoUpdater","undefined","Object","seal","state","_validateAttributeUpdaters","layout","clearChangedFlags","getUpdateTriggers","id","concat","supportsTransition","Boolean","transition","getTransitionSetting","layerSettings","userSettings","Array","isArray","find","a","setNeedsUpdate","reason","dataRange","setNeedsRedraw","startRow","endRow","Infinity","add","clearNeedsUpdate","EMPTY","allocate","numInstances","noAlloc","updateBuffer","data","props","context","updated","call","value","constant","buffer","byteLength","byteOffset","setData","startOffset","Number","isFinite","getVertexOffset","endOffset","length","size","updateSubBuffer","_checkAttributeArray","setConstantValue","hasChanged","setExternalBuffer","setBinaryValue","transform","ArrayBuffer","isView","needsNormalize","stride","offset","nested","row","vertexIndex","getShaderAttributes","shaderAttributeDefs","shaderAttributes","shaderAttributeName","assign","attribute","accessorFunc","i","iterable","objectInfo","object","index","objectValue","numVertices","startIndex","item","_normalizeValue","set","target","source","start","count","hasUpdater","Error","limit","Math","min","valid"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplicații\\earthquakes\\node_modules\\@deck.gl\\core\\src\\lib\\attribute\\attribute.ts"],"sourcesContent":["/* eslint-disable complexity */\nimport DataColumn, {DataColumnOptions, ShaderAttributeOptions, BufferAccessor} from './data-column';\nimport {IShaderAttribute} from './shader-attribute';\nimport assert from '../../utils/assert';\nimport {createIterable, getAccessorFromBuffer} from '../../utils/iterable-utils';\nimport {fillArray} from '../../utils/flatten';\nimport * as range from '../../utils/range';\nimport {normalizeTransitionSettings, TransitionSettings} from './attribute-transition-utils';\nimport type {Buffer} from '@luma.gl/webgl';\n\nimport type {NumericArray, TypedArray} from '../../types/types';\n\nexport type Accessor<DataType, ReturnType> = (\n  object: DataType,\n  context: {\n    data: any;\n    index: number;\n    target: number[];\n  }\n) => ReturnType;\n\nexport type Updater = (\n  attribute: Attribute,\n  {\n    data,\n    startRow,\n    endRow,\n    props,\n    numInstances\n  }: {\n    data: any;\n    startRow: number;\n    endRow: number;\n    props: any;\n    numInstances: number;\n  }\n) => void;\n\nexport type AttributeOptions = DataColumnOptions<{\n  transition?: boolean | Partial<TransitionSettings>;\n  noAlloc?: boolean;\n  update?: Updater;\n  accessor?: Accessor<any, any> | string | string[];\n  transform?: (value: any) => any;\n  shaderAttributes?: Record<string, Partial<ShaderAttributeOptions>>;\n}>;\n\nexport type BinaryAttribute = Partial<BufferAccessor> & {value?: TypedArray; buffer?: Buffer};\n\ntype AttributeInternalState = {\n  startIndices: NumericArray | null;\n  /** Legacy: external binary supplied via attribute name */\n  lastExternalBuffer: TypedArray | Buffer | BinaryAttribute | null;\n  /** External binary supplied via accessor name */\n  binaryValue: TypedArray | Buffer | BinaryAttribute | null;\n  binaryAccessor: Accessor<any, any> | null;\n  needsUpdate: string | boolean;\n  needsRedraw: string | boolean;\n  updateRanges: number[][];\n};\n\nexport default class Attribute extends DataColumn<AttributeOptions, AttributeInternalState> {\n  /** Legacy approach to set attribute value - read `isConstant` instead for attribute state */\n  constant: boolean = false;\n\n  constructor(gl: WebGLRenderingContext, opts: AttributeOptions) {\n    super(gl, opts, {\n      startIndices: null,\n      lastExternalBuffer: null,\n      binaryValue: null,\n      binaryAccessor: null,\n      needsUpdate: true,\n      needsRedraw: false,\n      updateRanges: range.FULL\n    });\n\n    // eslint-disable-next-line\n    this.settings.update = opts.update || (opts.accessor ? this._autoUpdater : undefined);\n\n    Object.seal(this.settings);\n    Object.seal(this.state);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeUpdaters();\n  }\n\n  get startIndices(): NumericArray | null {\n    return this.state.startIndices;\n  }\n\n  set startIndices(layout: NumericArray | null) {\n    this.state.startIndices = layout;\n  }\n\n  needsUpdate(): string | boolean {\n    return this.state.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false}: {clearChangedFlags?: boolean} = {}): string | boolean {\n    const needsRedraw = this.state.needsRedraw;\n    this.state.needsRedraw = needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getUpdateTriggers(): string[] {\n    const {accessor} = this.settings;\n\n    // Backards compatibility: allow attribute name to be used as update trigger key\n    return [this.id].concat((typeof accessor !== 'function' && accessor) || []);\n  }\n\n  supportsTransition(): boolean {\n    return Boolean(this.settings.transition);\n  }\n\n  // Resolve transition settings object if transition is enabled, otherwise `null`\n  getTransitionSetting(opts: Record<string, any>): TransitionSettings | null {\n    if (!opts || !this.supportsTransition()) {\n      return null;\n    }\n    const {accessor} = this.settings;\n    // TODO: have the layer resolve these transition settings itself?\n    const layerSettings = this.settings.transition;\n    // these are the transition settings passed in by the user\n    const userSettings = Array.isArray(accessor)\n      ? // @ts-ignore\n        opts[accessor.find(a => opts[a])]\n      : // @ts-ignore\n        opts[accessor];\n\n    // Shorthand: use duration instead of parameter object\n    return normalizeTransitionSettings(userSettings, layerSettings);\n  }\n\n  setNeedsUpdate(reason: string = this.id, dataRange?: {startRow?: number; endRow?: number}): void {\n    this.state.needsUpdate = this.state.needsUpdate || reason;\n    this.setNeedsRedraw(reason);\n    if (dataRange) {\n      const {startRow = 0, endRow = Infinity} = dataRange;\n      this.state.updateRanges = range.add(this.state.updateRanges, [startRow, endRow]);\n    } else {\n      this.state.updateRanges = range.FULL;\n    }\n  }\n\n  clearNeedsUpdate(): void {\n    this.state.needsUpdate = false;\n    this.state.updateRanges = range.EMPTY;\n  }\n\n  setNeedsRedraw(reason: string = this.id): void {\n    this.state.needsRedraw = this.state.needsRedraw || reason;\n  }\n\n  allocate(numInstances: number): boolean {\n    const {state, settings} = this;\n\n    if (settings.noAlloc) {\n      // Data is provided through a Buffer object.\n      return false;\n    }\n\n    if (settings.update) {\n      super.allocate(numInstances, state.updateRanges !== range.FULL);\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({\n    numInstances,\n    data,\n    props,\n    context\n  }: {\n    numInstances: number;\n    data: any;\n    props: any;\n    context: any;\n  }): boolean {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const {\n      state: {updateRanges},\n      settings: {update, noAlloc}\n    } = this;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      for (const [startRow, endRow] of updateRanges) {\n        update.call(context, this, {data, startRow, endRow, props, numInstances});\n      }\n      if (!this.value) {\n        // no value was assigned during update\n      } else if (\n        this.constant ||\n        this.buffer.byteLength < (this.value as TypedArray).byteLength + this.byteOffset\n      ) {\n        this.setData({\n          value: this.value,\n          constant: this.constant\n        });\n        // Setting attribute.constant in updater is a legacy approach that interferes with allocation in the next cycle\n        // Respect it here but reset after use\n        this.constant = false;\n      } else {\n        for (const [startRow, endRow] of updateRanges) {\n          const startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;\n          const endOffset = Number.isFinite(endRow)\n            ? this.getVertexOffset(endRow)\n            : noAlloc || !Number.isFinite(numInstances)\n            ? this.value.length\n            : numInstances * this.size;\n\n          super.updateSubBuffer({startOffset, endOffset});\n        }\n      }\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    this.clearNeedsUpdate();\n    this.setNeedsRedraw();\n\n    return updated;\n  }\n\n  // Use generic value\n  // Returns true if successful\n  setConstantValue(value?: NumericArray): boolean {\n    if (value === undefined || typeof value === 'function') {\n      return false;\n    }\n\n    const hasChanged = this.setData({constant: true, value});\n\n    if (hasChanged) {\n      this.setNeedsRedraw();\n    }\n    this.clearNeedsUpdate();\n    return true;\n  }\n\n  // Use external buffer\n  // Returns true if successful\n  // eslint-disable-next-line max-statements\n  setExternalBuffer(buffer?: TypedArray | Buffer | BinaryAttribute): boolean {\n    const {state} = this;\n\n    if (!buffer) {\n      state.lastExternalBuffer = null;\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n\n    if (state.lastExternalBuffer === buffer) {\n      return true;\n    }\n    state.lastExternalBuffer = buffer;\n    this.setNeedsRedraw();\n    this.setData(buffer);\n    return true;\n  }\n\n  // Binary value is a typed array packed from mapping the source data with the accessor\n  // If the returned value from the accessor is the same as the attribute value, set it directly\n  // Otherwise use the auto updater for transform/normalization\n  setBinaryValue(\n    buffer?: TypedArray | Buffer | BinaryAttribute,\n    startIndices: NumericArray | null = null\n  ): boolean {\n    const {state, settings} = this;\n\n    if (!buffer) {\n      state.binaryValue = null;\n      state.binaryAccessor = null;\n      return false;\n    }\n\n    if (settings.noAlloc) {\n      // Let the layer handle this\n      return false;\n    }\n\n    if (state.binaryValue === buffer) {\n      this.clearNeedsUpdate();\n      return true;\n    }\n    state.binaryValue = buffer;\n    this.setNeedsRedraw();\n\n    const needsUpdate = settings.transform || startIndices !== this.startIndices;\n\n    if (needsUpdate) {\n      if (ArrayBuffer.isView(buffer)) {\n        buffer = {value: buffer};\n      }\n      const binaryValue = buffer as BinaryAttribute;\n      assert(ArrayBuffer.isView(binaryValue.value), `invalid ${settings.accessor}`);\n      const needsNormalize = Boolean(binaryValue.size) && binaryValue.size !== this.size;\n\n      state.binaryAccessor = getAccessorFromBuffer(binaryValue.value, {\n        size: binaryValue.size || this.size,\n        stride: binaryValue.stride,\n        offset: binaryValue.offset,\n        startIndices: startIndices as NumericArray,\n        nested: needsNormalize\n      });\n      // Fall through to auto updater\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n    this.setData(buffer);\n    return true;\n  }\n\n  getVertexOffset(row: number): number {\n    const {startIndices} = this;\n    const vertexIndex = startIndices ? startIndices[row] : row;\n    return vertexIndex * this.size;\n  }\n\n  getShaderAttributes(): Record<string, IShaderAttribute> {\n    const shaderAttributeDefs = this.settings.shaderAttributes || {[this.id]: null};\n    const shaderAttributes: Record<string, IShaderAttribute> = {};\n\n    for (const shaderAttributeName in shaderAttributeDefs) {\n      Object.assign(\n        shaderAttributes,\n        super.getShaderAttributes(shaderAttributeName, shaderAttributeDefs[shaderAttributeName])\n      );\n    }\n\n    return shaderAttributes;\n  }\n\n  /* eslint-disable max-depth, max-statements */\n  private _autoUpdater(\n    attribute: Attribute,\n    {\n      data,\n      startRow,\n      endRow,\n      props,\n      numInstances\n    }: {\n      data: any;\n      startRow: number;\n      endRow: number;\n      props: any;\n      numInstances: number;\n    }\n  ): void {\n    if (attribute.constant) {\n      return;\n    }\n    const {settings, state, value, size, startIndices} = attribute;\n\n    const {accessor, transform} = settings;\n    const accessorFunc: Accessor<any, any> =\n      state.binaryAccessor ||\n      // @ts-ignore\n      (typeof accessor === 'function' ? accessor : props[accessor]);\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let i = attribute.getVertexOffset(startRow);\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n\n      let objectValue = accessorFunc(object, objectInfo);\n      if (transform) {\n        // transform callbacks could be bound to a particular layer instance.\n        // always point `this` to the current layer.\n        objectValue = transform.call(this, objectValue);\n      }\n\n      if (startIndices) {\n        const numVertices =\n          (objectInfo.index < startIndices.length - 1\n            ? startIndices[objectInfo.index + 1]\n            : numInstances) - startIndices[objectInfo.index];\n        if (objectValue && Array.isArray(objectValue[0])) {\n          let startIndex = i;\n          for (const item of objectValue) {\n            attribute._normalizeValue(item, value as TypedArray, startIndex);\n            startIndex += size;\n          }\n        } else if (objectValue && objectValue.length > size) {\n          (value as TypedArray).set(objectValue, i);\n        } else {\n          attribute._normalizeValue(objectValue, objectInfo.target, 0);\n          fillArray({\n            target: value,\n            source: objectInfo.target,\n            start: i,\n            count: numVertices\n          });\n        }\n        i += numVertices * size;\n      } else {\n        attribute._normalizeValue(objectValue, value as TypedArray, i);\n        i += size;\n      }\n    }\n  }\n  /* eslint-enable max-depth, max-statements */\n\n  // Validate deck.gl level fields\n  private _validateAttributeUpdaters() {\n    const {settings} = this;\n\n    // Check that 'update' is a valid function\n    const hasUpdater = settings.noAlloc || typeof settings.update === 'function';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  // check that the first few elements of the attribute are reasonable\n  /* eslint-disable no-fallthrough */\n  private _checkAttributeArray() {\n    const {value} = this;\n    const limit = Math.min(4, this.size);\n    if (value && value.length >= limit) {\n      let valid = true;\n      switch (limit) {\n        case 4:\n          valid = valid && Number.isFinite(value[3]);\n        case 3:\n          valid = valid && Number.isFinite(value[2]);\n        case 2:\n          valid = valid && Number.isFinite(value[1]);\n        case 1:\n          valid = valid && Number.isFinite(value[0]);\n          break;\n        default:\n          valid = false;\n      }\n\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n  /* eslint-enable no-fallthrough */\n}\n"]},"metadata":{},"sourceType":"module"}