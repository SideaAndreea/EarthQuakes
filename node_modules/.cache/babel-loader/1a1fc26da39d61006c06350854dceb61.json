{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { clamp } from '@math.gl/core';\nimport Controller from './controller';\nimport { OrbitState } from './orbit-controller';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nclass OrthographicState extends OrbitState {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"zoomAxis\", void 0);\n\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n\n  _calculateNewZoom(_ref) {\n    let {\n      scale,\n      startZoom\n    } = _ref;\n    const {\n      maxZoom,\n      minZoom\n    } = this.getViewportProps();\n\n    if (startZoom === undefined) {\n      startZoom = this.getViewportProps().zoom;\n    }\n\n    let deltaZoom = Math.log2(scale);\n\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n\n      switch (this.zoomAxis) {\n        case 'X':\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n\n        case 'Y':\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n\n        default:\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n\n      return [newZoomX, newZoomY];\n    }\n\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n\n}\n\nexport default class OrthographicController extends Controller {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"ControllerState\", OrthographicState);\n\n    _defineProperty(this, \"transition\", {\n      transitionDuration: 300,\n      transitionInterpolator: new LinearInterpolator(['target', 'zoom'])\n    });\n\n    _defineProperty(this, \"dragMode\", 'pan');\n  }\n\n  _onPanRotate() {\n    return false;\n  }\n\n}","map":{"version":3,"mappings":";AAAA,SAAQA,KAAR,QAAoB,eAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAAQC,UAAR,QAAyB,oBAAzB;AACA,OAAOC,kBAAP,MAA+B,oCAA/B;;AAEA,MAAMC,iBAAN,SAAgCF,UAAhC,CAA2C;EAGzCG,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;;IADiBC;;IAGjB,KAAKC,QAAL,GAAgBF,KAAK,CAACE,QAANF,IAAkB,KAAlC;EACD;;EAEDG,iBAAiB,OAAqB;IAAA,IAApB;MAACC,KAAD;MAAQC;IAAR,CAAoB;IACpC,MAAM;MAACC,OAAD;MAAUC;IAAV,IAAqB,KAAKC,gBAAL,EAA3B;;IACA,IAAIH,SAAS,KAAKI,SAAlB,EAA6B;MAC3BJ,SAAS,GAAG,KAAKG,gBAAL,GAAwBE,IAApCL;IACD;;IACD,IAAIM,SAAS,GAAGC,IAAI,CAACC,IAALD,CAAUR,KAAVQ,CAAhB;;IACA,IAAIE,KAAK,CAACC,OAAND,CAAcT,SAAdS,CAAJ,EAA8B;MAC5B,IAAI,CAACE,QAAD,EAAWC,QAAX,IAAuBZ,SAA3B;;MACA,QAAQ,KAAKH,QAAb;QACE,KAAK,GAAL;UAEEc,QAAQ,GAAGtB,KAAK,CAACsB,QAAQ,GAAGL,SAAZ,EAAuBJ,OAAvB,EAAgCD,OAAhC,CAAhBU;UACA;;QACF,KAAK,GAAL;UAEEC,QAAQ,GAAGvB,KAAK,CAACuB,QAAQ,GAAGN,SAAZ,EAAuBJ,OAAvB,EAAgCD,OAAhC,CAAhBW;UACA;;QACF;UAEE,IAAIC,CAAC,GAAGN,IAAI,CAACO,GAALP,CAASI,QAAQ,GAAGL,SAApBC,EAA+BK,QAAQ,GAAGN,SAA1CC,CAAR;;UACA,IAAIM,CAAC,GAAGX,OAAR,EAAiB;YACfI,SAAS,IAAIJ,OAAO,GAAGW,CAAvBP;UACD;;UACDO,CAAC,GAAGN,IAAI,CAACQ,GAALR,CAASI,QAAQ,GAAGL,SAApBC,EAA+BK,QAAQ,GAAGN,SAA1CC,CAAJM;;UACA,IAAIA,CAAC,GAAGZ,OAAR,EAAiB;YACfK,SAAS,IAAIL,OAAO,GAAGY,CAAvBP;UACD;;UACDK,QAAQ,IAAIL,SAAZK;UACAC,QAAQ,IAAIN,SAAZM;MApBJ;;MAsBA,OAAO,CAACD,QAAD,EAAWC,QAAX,CAAP;IACD;;IAID,OAAOvB,KAAK,CAACW,SAAS,GAAGM,SAAb,EAAwBJ,OAAxB,EAAiCD,OAAjC,CAAZ;EACD;;AA7CwC;;AAgD3C,eAAe,MAAMe,sBAAN,SAAqC1B,UAArC,CAA4D;EAAAI;IAAA;;IAAAE,yCACvDH,iBADuD;;IAAAG,oCAE5D;MACXqB,kBAAkB,EAAE,GADT;MAEXC,sBAAsB,EAAE,IAAI1B,kBAAJ,CAAuB,CAAC,QAAD,EAAW,MAAX,CAAvB;IAFb,CAF4D;;IAAAI,kCAM5C,KAN4C;EAAA;;EAQzEuB,YAAY,GAAG;IAEb,OAAO,KAAP;EACD;;AAXwE","names":["clamp","Controller","OrbitState","LinearInterpolator","OrthographicState","constructor","props","_defineProperty","zoomAxis","_calculateNewZoom","scale","startZoom","maxZoom","minZoom","getViewportProps","undefined","zoom","deltaZoom","Math","log2","Array","isArray","newZoomX","newZoomY","z","min","max","OrthographicController","transitionDuration","transitionInterpolator","_onPanRotate"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@deck.gl\\core\\src\\controllers\\orthographic-controller.ts"],"sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller from './controller';\nimport {OrbitState} from './orbit-controller';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nclass OrthographicState extends OrbitState {\n  zoomAxis: 'X' | 'Y' | 'all';\n\n  constructor(props) {\n    super(props);\n\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this.getViewportProps();\n    if (startZoom === undefined) {\n      startZoom = this.getViewportProps().zoom;\n    }\n    let deltaZoom = Math.log2(scale);\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n      switch (this.zoomAxis) {\n        case 'X':\n          // Scale x only\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n        case 'Y':\n          // Scale y only\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n        default:\n          // Lock aspect ratio\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n      return [newZoomX, newZoomY];\n    }\n    // Ignore `zoomAxis`\n    // `LinearTransitionInterpolator` does not support interpolation between a number and an array\n    // So if zoom is a number (legacy use case), new zoom still has to be a number\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n}\n\nexport default class OrthographicController extends Controller<OrbitState> {\n  ControllerState = OrthographicState;\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator(['target', 'zoom'])\n  };\n  dragMode: 'pan' | 'rotate' = 'pan';\n\n  _onPanRotate() {\n    // No rotation in orthographic view\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}