{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Texture2D, copyToTexture, cloneTextureFrom } from '@luma.gl/core';\nimport { ImageLoader } from '@loaders.gl/images';\nimport { load } from '@loaders.gl/core';\nimport { createIterable } from '@deck.gl/core';\nconst DEFAULT_CANVAS_WIDTH = 1024;\nconst DEFAULT_BUFFER = 4;\n\nconst noop = () => {};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [10241]: 9987,\n  [10240]: 9729,\n  [10242]: 33071,\n  [10243]: 33071\n};\n\nfunction nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\nfunction resizeImage(ctx, imageData, width, height) {\n  if (width === imageData.width && height === imageData.height) {\n    return imageData;\n  }\n\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  ctx.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);\n  return ctx.canvas;\n}\n\nfunction getIconId(icon) {\n  return icon && (icon.id || icon.url);\n}\n\nfunction resizeTexture(texture, width, height) {\n  const oldWidth = texture.width;\n  const oldHeight = texture.height;\n  const newTexture = cloneTextureFrom(texture, {\n    width,\n    height\n  });\n  copyToTexture(texture, newTexture, {\n    targetY: 0,\n    width: oldWidth,\n    height: oldHeight\n  });\n  texture.delete();\n  return newTexture;\n}\n\nfunction buildRowMapping(mapping, columns, yOffset) {\n  for (let i = 0; i < columns.length; i++) {\n    const {\n      icon,\n      xOffset\n    } = columns[i];\n    const id = getIconId(icon);\n    mapping[id] = { ...icon,\n      x: xOffset,\n      y: yOffset\n    };\n  }\n}\n\nexport function buildMapping(_ref) {\n  let {\n    icons,\n    buffer,\n    mapping = {},\n    xOffset = 0,\n    yOffset = 0,\n    rowHeight = 0,\n    canvasWidth\n  } = _ref;\n  let columns = [];\n\n  for (let i = 0; i < icons.length; i++) {\n    const icon = icons[i];\n    const id = getIconId(icon);\n\n    if (!mapping[id]) {\n      const {\n        height,\n        width\n      } = icon;\n\n      if (xOffset + width + buffer > canvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon,\n        xOffset\n      });\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  return {\n    mapping,\n    rowHeight,\n    xOffset,\n    yOffset,\n    canvasWidth,\n    canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)\n  };\n}\nexport function getDiffIcons(data, getIcon, cachedIcons) {\n  if (!data || !getIcon) {\n    return null;\n  }\n\n  cachedIcons = cachedIcons || {};\n  const icons = {};\n  const {\n    iterable,\n    objectInfo\n  } = createIterable(data);\n\n  for (const object of iterable) {\n    objectInfo.index++;\n    const icon = getIcon(object, objectInfo);\n    const id = getIconId(icon);\n\n    if (!icon) {\n      throw new Error('Icon is missing.');\n    }\n\n    if (!icon.url) {\n      throw new Error('Icon url is missing.');\n    }\n\n    if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {\n      icons[id] = { ...icon,\n        source: object,\n        sourceIndex: objectInfo.index\n      };\n    }\n  }\n\n  return icons;\n}\nexport default class IconManager {\n  constructor(gl, _ref2) {\n    let {\n      onUpdate = noop,\n      onError = noop\n    } = _ref2;\n\n    _defineProperty(this, \"gl\", void 0);\n\n    _defineProperty(this, \"onUpdate\", void 0);\n\n    _defineProperty(this, \"onError\", void 0);\n\n    _defineProperty(this, \"_loadOptions\", null);\n\n    _defineProperty(this, \"_texture\", null);\n\n    _defineProperty(this, \"_externalTexture\", null);\n\n    _defineProperty(this, \"_mapping\", {});\n\n    _defineProperty(this, \"_textureParameters\", null);\n\n    _defineProperty(this, \"_pendingCount\", 0);\n\n    _defineProperty(this, \"_autoPacking\", false);\n\n    _defineProperty(this, \"_xOffset\", 0);\n\n    _defineProperty(this, \"_yOffset\", 0);\n\n    _defineProperty(this, \"_rowHeight\", 0);\n\n    _defineProperty(this, \"_buffer\", DEFAULT_BUFFER);\n\n    _defineProperty(this, \"_canvasWidth\", DEFAULT_CANVAS_WIDTH);\n\n    _defineProperty(this, \"_canvasHeight\", 0);\n\n    _defineProperty(this, \"_canvas\", null);\n\n    this.gl = gl;\n    this.onUpdate = onUpdate;\n    this.onError = onError;\n  }\n\n  finalize() {\n    var _this$_texture;\n\n    (_this$_texture = this._texture) === null || _this$_texture === void 0 ? void 0 : _this$_texture.delete();\n  }\n\n  getTexture() {\n    return this._texture || this._externalTexture;\n  }\n\n  getIconMapping(icon) {\n    const id = this._autoPacking ? getIconId(icon) : icon;\n    return this._mapping[id] || {};\n  }\n\n  setProps(_ref3) {\n    let {\n      loadOptions,\n      autoPacking,\n      iconAtlas,\n      iconMapping,\n      textureParameters\n    } = _ref3;\n\n    if (loadOptions) {\n      this._loadOptions = loadOptions;\n    }\n\n    if (autoPacking !== undefined) {\n      this._autoPacking = autoPacking;\n    }\n\n    if (iconMapping) {\n      this._mapping = iconMapping;\n    }\n\n    if (iconAtlas) {\n      var _this$_texture2;\n\n      (_this$_texture2 = this._texture) === null || _this$_texture2 === void 0 ? void 0 : _this$_texture2.delete();\n      this._texture = null;\n      this._externalTexture = iconAtlas;\n    }\n\n    if (textureParameters) {\n      this._textureParameters = textureParameters;\n    }\n  }\n\n  get isLoaded() {\n    return this._pendingCount === 0;\n  }\n\n  packIcons(data, getIcon) {\n    if (!this._autoPacking || typeof document === 'undefined') {\n      return;\n    }\n\n    const icons = Object.values(getDiffIcons(data, getIcon, this._mapping) || {});\n\n    if (icons.length > 0) {\n      const {\n        mapping,\n        xOffset,\n        yOffset,\n        rowHeight,\n        canvasHeight\n      } = buildMapping({\n        icons,\n        buffer: this._buffer,\n        canvasWidth: this._canvasWidth,\n        mapping: this._mapping,\n        rowHeight: this._rowHeight,\n        xOffset: this._xOffset,\n        yOffset: this._yOffset\n      });\n      this._rowHeight = rowHeight;\n      this._mapping = mapping;\n      this._xOffset = xOffset;\n      this._yOffset = yOffset;\n      this._canvasHeight = canvasHeight;\n\n      if (!this._texture) {\n        this._texture = new Texture2D(this.gl, {\n          width: this._canvasWidth,\n          height: this._canvasHeight,\n          parameters: this._textureParameters || DEFAULT_TEXTURE_PARAMETERS\n        });\n      }\n\n      if (this._texture.height !== this._canvasHeight) {\n        this._texture = resizeTexture(this._texture, this._canvasWidth, this._canvasHeight);\n      }\n\n      this.onUpdate();\n      this._canvas = this._canvas || document.createElement('canvas');\n\n      this._loadIcons(icons);\n    }\n  }\n\n  _loadIcons(icons) {\n    const ctx = this._canvas.getContext('2d');\n\n    for (const icon of icons) {\n      this._pendingCount++;\n      load(icon.url, ImageLoader, this._loadOptions).then(imageData => {\n        const id = getIconId(icon);\n        const {\n          x,\n          y,\n          width,\n          height\n        } = this._mapping[id];\n        const data = resizeImage(ctx, imageData, width, height);\n\n        this._texture.setSubImageData({\n          data,\n          x,\n          y,\n          width,\n          height\n        });\n\n        this._texture.generateMipmap();\n\n        this.onUpdate();\n      }).catch(error => {\n        this.onError({\n          url: icon.url,\n          source: icon.source,\n          sourceIndex: icon.sourceIndex,\n          loadOptions: this._loadOptions,\n          error\n        });\n      }).finally(() => {\n        this._pendingCount--;\n      });\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Texture2D","copyToTexture","cloneTextureFrom","ImageLoader","load","createIterable","DEFAULT_CANVAS_WIDTH","DEFAULT_BUFFER","noop","DEFAULT_TEXTURE_PARAMETERS","nextPowOfTwo","number","Math","pow","ceil","log2","resizeImage","ctx","imageData","width","height","canvas","clearRect","drawImage","getIconId","icon","id","url","resizeTexture","texture","oldWidth","oldHeight","newTexture","targetY","delete","buildRowMapping","mapping","columns","yOffset","i","length","xOffset","x","y","buildMapping","icons","buffer","rowHeight","canvasWidth","push","max","canvasHeight","getDiffIcons","data","getIcon","cachedIcons","iterable","objectInfo","object","index","Error","source","sourceIndex","IconManager","constructor","gl","onUpdate","onError","_defineProperty","finalize","_texture","getTexture","_externalTexture","getIconMapping","_autoPacking","_mapping","setProps","loadOptions","autoPacking","iconAtlas","iconMapping","textureParameters","_loadOptions","undefined","_textureParameters","isLoaded","_pendingCount","packIcons","document","Object","values","_buffer","_canvasWidth","_rowHeight","_xOffset","_yOffset","_canvasHeight","parameters","_canvas","createElement","_loadIcons","getContext","then","setSubImageData","generateMipmap","catch","error","finally"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplicații\\earthquakes\\node_modules\\@deck.gl\\layers\\src\\icon-layer\\icon-manager.ts"],"sourcesContent":["/* global document */\nimport GL from '@luma.gl/constants';\nimport {Texture2D, copyToTexture, cloneTextureFrom} from '@luma.gl/core';\nimport {ImageLoader} from '@loaders.gl/images';\nimport {load} from '@loaders.gl/core';\nimport {createIterable} from '@deck.gl/core';\n\nimport type {AccessorFunction} from '@deck.gl/core';\n\nconst DEFAULT_CANVAS_WIDTH = 1024;\nconst DEFAULT_BUFFER = 4;\n\nconst noop = () => {};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  // GL.LINEAR is the default value but explicitly set it here\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  // for texture boundary artifact\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\ntype IconDef = {\n  /** Width of the icon */\n  width: number;\n  /** Height of the icon */\n  height: number;\n  /** Horizontal position of icon anchor. Default: half width. */\n  anchorX?: number;\n  /** Vertical position of icon anchor. Default: half height. */\n  anchorY?: number;\n  /**\n   * Whether the icon is treated as a transparency mask.\n   * If `true`, color defined by `getColor` is applied.\n   * If `false`, pixel color from the icon image is applied.\n   * @default false\n   */\n  mask?: boolean;\n};\n\nexport type UnpackedIcon = {\n  /** Url to fetch the icon */\n  url: string;\n  /** Unique identifier of the icon. Icons of the same id are only fetched once. Fallback to `url` if not specified. */\n  id?: string;\n} & IconDef;\n\ntype PrepackedIcon = {\n  /** Left position of the icon on the atlas */\n  x: number;\n  /** Top position of the icon on the atlas */\n  y: number;\n} & IconDef;\n\nexport type IconMapping = Record<string, PrepackedIcon>;\n\nexport type LoadIconErrorContext = {\n  error: Error;\n  /** The URL that was trying to fetch */\n  url: string;\n  /** The original data object that requested this icon */\n  source: any;\n  /** The index of the original data object that requested this icon */\n  sourceIndex: number;\n  /** The load options used for the fetch */\n  loadOptions: any;\n};\n\nfunction nextPowOfTwo(number: number): number {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n// update comment to create a new texture and copy original data.\nfunction resizeImage(\n  ctx: CanvasRenderingContext2D,\n  imageData: HTMLImageElement | ImageBitmap,\n  width: number,\n  height: number\n): HTMLImageElement | HTMLCanvasElement | ImageBitmap {\n  if (width === imageData.width && height === imageData.height) {\n    return imageData;\n  }\n\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  // image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight\n  ctx.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);\n\n  return ctx.canvas;\n}\n\nfunction getIconId(icon: UnpackedIcon): string {\n  return icon && (icon.id || icon.url);\n}\n\n// resize texture without losing original data\nfunction resizeTexture(texture: Texture2D, width: number, height: number): Texture2D {\n  const oldWidth = texture.width;\n  const oldHeight = texture.height;\n\n  const newTexture = cloneTextureFrom(texture, {width, height});\n  copyToTexture(texture, newTexture, {\n    targetY: 0,\n    width: oldWidth,\n    height: oldHeight\n  });\n\n  texture.delete();\n  return newTexture;\n}\n\n// traverse icons in a row of icon atlas\n// extend each icon with left-top coordinates\nfunction buildRowMapping(\n  mapping: IconMapping,\n  columns: {\n    icon: UnpackedIcon;\n    xOffset: number;\n  }[],\n  yOffset: number\n): void {\n  for (let i = 0; i < columns.length; i++) {\n    const {icon, xOffset} = columns[i];\n    const id = getIconId(icon);\n    mapping[id] = {\n      ...icon,\n      x: xOffset,\n      y: yOffset\n    };\n  }\n}\n\n/**\n * Generate coordinate mapping to retrieve icon left-top position from an icon atlas\n */\nexport function buildMapping({\n  icons,\n  buffer,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0,\n  rowHeight = 0,\n  canvasWidth\n}: {\n  /** list of icon definitions */\n  icons: UnpackedIcon[];\n  /** add bleeding buffer to the right and bottom side of the image */\n  buffer: number;\n  /** right position of last icon in old mapping */\n  xOffset: number;\n  /** top position in last icon in old mapping */\n  yOffset: number;\n  /** height of the last icon's row */\n  rowHeight: number;\n  /** max width of canvas */\n  canvasWidth: number;\n  mapping: IconMapping;\n}): {\n  mapping: IconMapping;\n  rowHeight: number;\n  xOffset: number;\n  yOffset: number;\n  canvasWidth: number;\n  canvasHeight: number;\n} {\n  let columns: {\n    icon: UnpackedIcon;\n    xOffset: number;\n  }[] = [];\n  // Strategy to layout all the icons into a texture:\n  // traverse the icons sequentially, layout the icons from left to right, top to bottom\n  // when the sum of the icons width is equal or larger than canvasWidth,\n  // move to next row starting from total height so far plus max height of the icons in previous row\n  // row width is equal to canvasWidth\n  // row height is decided by the max height of the icons in that row\n  // mapping coordinates of each icon is its left-top position in the texture\n  for (let i = 0; i < icons.length; i++) {\n    const icon = icons[i];\n    const id = getIconId(icon);\n\n    if (!mapping[id]) {\n      const {height, width} = icon;\n\n      // fill one row\n      if (xOffset + width + buffer > canvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon,\n        xOffset\n      });\n\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  return {\n    mapping,\n    rowHeight,\n    xOffset,\n    yOffset,\n    canvasWidth,\n    canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)\n  };\n}\n\n// extract icons from data\n// return icons should be unique, and not cached or cached but url changed\nexport function getDiffIcons(\n  data: any,\n  getIcon: AccessorFunction<any, UnpackedIcon> | null,\n  cachedIcons: Record<string, PrepackedIcon & {url?: string}>\n): Record<\n  string,\n  UnpackedIcon & {\n    source: any;\n    sourceIndex: number;\n  }\n> | null {\n  if (!data || !getIcon) {\n    return null;\n  }\n\n  cachedIcons = cachedIcons || {};\n  const icons = {};\n  const {iterable, objectInfo} = createIterable(data);\n  for (const object of iterable) {\n    objectInfo.index++;\n    const icon = getIcon(object, objectInfo);\n    const id = getIconId(icon);\n\n    if (!icon) {\n      throw new Error('Icon is missing.');\n    }\n\n    if (!icon.url) {\n      throw new Error('Icon url is missing.');\n    }\n\n    if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {\n      icons[id] = {...icon, source: object, sourceIndex: objectInfo.index};\n    }\n  }\n  return icons;\n}\n\nexport default class IconManager {\n  gl: WebGLRenderingContext;\n\n  private onUpdate: () => void;\n  private onError: (context: LoadIconErrorContext) => void;\n  private _loadOptions: any = null;\n  private _texture: Texture2D | null = null;\n  private _externalTexture: Texture2D | null = null;\n  private _mapping: IconMapping = {};\n  private _textureParameters: Record<number, number> | null = null;\n\n  /** count of pending requests to fetch icons */\n  private _pendingCount: number = 0;\n\n  private _autoPacking: boolean = false;\n\n  // / internal state used for autoPacking\n\n  private _xOffset: number = 0;\n  private _yOffset: number = 0;\n  private _rowHeight: number = 0;\n  private _buffer: number = DEFAULT_BUFFER;\n  private _canvasWidth: number = DEFAULT_CANVAS_WIDTH;\n  private _canvasHeight: number = 0;\n  private _canvas: HTMLCanvasElement | null = null;\n\n  constructor(\n    gl: WebGLRenderingContext,\n    {\n      onUpdate = noop,\n      onError = noop\n    }: {\n      /** Callback when the texture updates */\n      onUpdate: () => void;\n      /** Callback when an error is encountered */\n      onError: (context: LoadIconErrorContext) => void;\n    }\n  ) {\n    this.gl = gl;\n    this.onUpdate = onUpdate;\n    this.onError = onError;\n  }\n\n  finalize(): void {\n    this._texture?.delete();\n  }\n\n  getTexture(): Texture2D | null {\n    return this._texture || this._externalTexture;\n  }\n\n  getIconMapping(icon: string | UnpackedIcon): PrepackedIcon {\n    const id = this._autoPacking ? getIconId(icon as UnpackedIcon) : (icon as string);\n    return this._mapping[id] || {};\n  }\n\n  setProps({\n    loadOptions,\n    autoPacking,\n    iconAtlas,\n    iconMapping,\n    textureParameters\n  }: {\n    loadOptions?: any;\n    autoPacking?: boolean;\n    iconAtlas?: Texture2D | null;\n    iconMapping?: IconMapping | null;\n    textureParameters?: Record<number, number> | null;\n  }) {\n    if (loadOptions) {\n      this._loadOptions = loadOptions;\n    }\n\n    if (autoPacking !== undefined) {\n      this._autoPacking = autoPacking;\n    }\n\n    if (iconMapping) {\n      this._mapping = iconMapping;\n    }\n\n    if (iconAtlas) {\n      this._texture?.delete();\n      this._texture = null;\n      this._externalTexture = iconAtlas;\n    }\n\n    if (textureParameters) {\n      this._textureParameters = textureParameters;\n    }\n  }\n\n  get isLoaded(): boolean {\n    return this._pendingCount === 0;\n  }\n\n  packIcons(data: any, getIcon: AccessorFunction<any, UnpackedIcon>): void {\n    if (!this._autoPacking || typeof document === 'undefined') {\n      return;\n    }\n\n    const icons = Object.values(getDiffIcons(data, getIcon, this._mapping) || {});\n\n    if (icons.length > 0) {\n      // generate icon mapping\n      const {mapping, xOffset, yOffset, rowHeight, canvasHeight} = buildMapping({\n        icons,\n        buffer: this._buffer,\n        canvasWidth: this._canvasWidth,\n        mapping: this._mapping,\n        rowHeight: this._rowHeight,\n        xOffset: this._xOffset,\n        yOffset: this._yOffset\n      });\n\n      this._rowHeight = rowHeight;\n      this._mapping = mapping;\n      this._xOffset = xOffset;\n      this._yOffset = yOffset;\n      this._canvasHeight = canvasHeight;\n\n      // create new texture\n      if (!this._texture) {\n        this._texture = new Texture2D(this.gl, {\n          width: this._canvasWidth,\n          height: this._canvasHeight,\n          parameters: this._textureParameters || DEFAULT_TEXTURE_PARAMETERS\n        });\n      }\n\n      if (this._texture.height !== this._canvasHeight) {\n        this._texture = resizeTexture(this._texture, this._canvasWidth, this._canvasHeight);\n      }\n\n      this.onUpdate();\n\n      // load images\n      this._canvas = this._canvas || document.createElement('canvas');\n      this._loadIcons(icons);\n    }\n  }\n\n  private _loadIcons(\n    icons: (UnpackedIcon & {\n      source: any;\n      sourceIndex: number;\n    })[]\n  ): void {\n    // This method is only called in the auto packing case, where _canvas is defined\n    const ctx = this._canvas!.getContext('2d') as CanvasRenderingContext2D;\n\n    for (const icon of icons) {\n      this._pendingCount++;\n      load(icon.url, ImageLoader, this._loadOptions)\n        .then(imageData => {\n          const id = getIconId(icon);\n          const {x, y, width, height} = this._mapping[id];\n\n          const data = resizeImage(ctx, imageData, width, height);\n\n          this._texture.setSubImageData({\n            data,\n            x,\n            y,\n            width,\n            height\n          });\n\n          // Call to regenerate mipmaps after modifying texture(s)\n          this._texture.generateMipmap();\n\n          this.onUpdate();\n        })\n        .catch(error => {\n          this.onError({\n            url: icon.url,\n            source: icon.source,\n            sourceIndex: icon.sourceIndex,\n            loadOptions: this._loadOptions,\n            error\n          });\n        })\n        .finally(() => {\n          this._pendingCount--;\n        });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}