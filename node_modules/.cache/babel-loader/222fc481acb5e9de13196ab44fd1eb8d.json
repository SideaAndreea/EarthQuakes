{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Worker as NodeWorker } from '../node/worker_threads';\nimport { isBrowser } from '../env-utils/globals';\nimport { assert } from '../env-utils/assert';\nimport { getLoadableWorkerURL } from '../worker-utils/get-loadable-worker-url';\nimport { getTransferList } from '../worker-utils/get-transfer-list';\n\nconst NOOP = () => {};\n\nexport default class WorkerThread {\n  static isSupported() {\n    return typeof Worker !== 'undefined' && isBrowser || typeof NodeWorker !== undefined;\n  }\n\n  constructor(props) {\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"source\", void 0);\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"terminated\", false);\n\n    _defineProperty(this, \"worker\", void 0);\n\n    _defineProperty(this, \"onMessage\", void 0);\n\n    _defineProperty(this, \"onError\", void 0);\n\n    _defineProperty(this, \"_loadableURL\", '');\n\n    const {\n      name,\n      source,\n      url\n    } = props;\n    assert(source || url);\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n\n    this.onError = error => console.log(error);\n\n    this.worker = isBrowser ? this._createBrowserWorker() : this._createNodeWorker();\n  }\n\n  destroy() {\n    this.onMessage = NOOP;\n    this.onError = NOOP;\n    this.worker.terminate();\n    this.terminated = true;\n  }\n\n  get isRunning() {\n    return Boolean(this.onMessage);\n  }\n\n  postMessage(data, transferList) {\n    transferList = transferList || getTransferList(data);\n    this.worker.postMessage(data, transferList);\n  }\n\n  _getErrorFromErrorEvent(event) {\n    let message = 'Failed to load ';\n    message += \"worker \".concat(this.name, \" from \").concat(this.url, \". \");\n\n    if (event.message) {\n      message += \"\".concat(event.message, \" in \");\n    }\n\n    if (event.lineno) {\n      message += \":\".concat(event.lineno, \":\").concat(event.colno);\n    }\n\n    return new Error(message);\n  }\n\n  _createBrowserWorker() {\n    this._loadableURL = getLoadableWorkerURL({\n      source: this.source,\n      url: this.url\n    });\n    const worker = new Worker(this._loadableURL, {\n      name: this.name\n    });\n\n    worker.onmessage = event => {\n      if (!event.data) {\n        this.onError(new Error('No data received'));\n      } else {\n        this.onMessage(event.data);\n      }\n    };\n\n    worker.onerror = error => {\n      this.onError(this._getErrorFromErrorEvent(error));\n      this.terminated = true;\n    };\n\n    worker.onmessageerror = event => console.error(event);\n\n    return worker;\n  }\n\n  _createNodeWorker() {\n    let worker;\n\n    if (this.url) {\n      const absolute = this.url.includes(':/') || this.url.startsWith('/');\n      const url = absolute ? this.url : \"./\".concat(this.url);\n      worker = new NodeWorker(url, {\n        eval: false\n      });\n    } else if (this.source) {\n      worker = new NodeWorker(this.source, {\n        eval: true\n      });\n    } else {\n      throw new Error('no worker');\n    }\n\n    worker.on('message', data => {\n      this.onMessage(data);\n    });\n    worker.on('error', error => {\n      this.onError(error);\n    });\n    worker.on('exit', code => {});\n    return worker;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Worker","NodeWorker","isBrowser","assert","getLoadableWorkerURL","getTransferList","NOOP","WorkerThread","isSupported","undefined","constructor","props","_defineProperty","name","source","url","onMessage","onError","error","console","log","worker","_createBrowserWorker","_createNodeWorker","destroy","terminate","terminated","isRunning","Boolean","postMessage","data","transferList","_getErrorFromErrorEvent","event","message","lineno","colno","Error","_loadableURL","onmessage","onerror","onmessageerror","absolute","includes","startsWith","eval","on","code"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\AplicaÈ›ii\\earthquakes\\node_modules\\@loaders.gl\\worker-utils\\src\\lib\\worker-farm\\worker-thread.ts"],"sourcesContent":["import {Worker as NodeWorker} from '../node/worker_threads';\nimport {isBrowser} from '../env-utils/globals';\nimport {assert} from '../env-utils/assert';\nimport {getLoadableWorkerURL} from '../worker-utils/get-loadable-worker-url';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\nconst NOOP = () => {};\n\nexport type WorkerThreadProps = {\n  name: string;\n  source?: string;\n  url?: string;\n};\n\n/**\n * Represents one worker thread\n */\nexport default class WorkerThread {\n  readonly name: string;\n  readonly source: string | undefined;\n  readonly url: string | undefined;\n  terminated: boolean = false;\n  worker: Worker | NodeWorker;\n  onMessage: (message: any) => void;\n  onError: (error: Error) => void;\n\n  private _loadableURL: string = '';\n\n  /** Checks if workers are supported on this platform */\n  static isSupported(): boolean {\n    return (typeof Worker !== 'undefined' && isBrowser) || typeof NodeWorker !== undefined;\n  }\n\n  constructor(props: WorkerThreadProps) {\n    const {name, source, url} = props;\n    assert(source || url); // Either source or url must be defined\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n    this.onError = (error) => console.log(error); // eslint-disable-line\n\n    this.worker = isBrowser ? this._createBrowserWorker() : this._createNodeWorker();\n  }\n\n  /**\n   * Terminate this worker thread\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    this.onMessage = NOOP;\n    this.onError = NOOP;\n    this.worker.terminate(); // eslint-disable-line @typescript-eslint/no-floating-promises\n    this.terminated = true;\n  }\n\n  get isRunning() {\n    return Boolean(this.onMessage);\n  }\n\n  /**\n   * Send a message to this worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   * @param transferList If not supplied, calculated automatically by traversing data\n   */\n  postMessage(data: any, transferList?: any[]): void {\n    transferList = transferList || getTransferList(data);\n    // @ts-ignore\n    this.worker.postMessage(data, transferList);\n  }\n\n  // PRIVATE\n\n  /**\n   * Generate a standard Error from an ErrorEvent\n   * @param event\n   */\n  _getErrorFromErrorEvent(event: ErrorEvent): Error {\n    // Note Error object does not have the expected fields if loading failed completely\n    // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers\n    // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\n    let message = 'Failed to load ';\n    message += `worker ${this.name} from ${this.url}. `;\n    if (event.message) {\n      message += `${event.message} in `;\n    }\n    // const hasFilename = event.filename && !event.filename.startsWith('blob:');\n    // message += hasFilename ? event.filename : this.source.slice(0, 100);\n    if (event.lineno) {\n      message += `:${event.lineno}:${event.colno}`;\n    }\n    return new Error(message);\n  }\n\n  /**\n   * Creates a worker thread on the browser\n   */\n  _createBrowserWorker(): Worker {\n    this._loadableURL = getLoadableWorkerURL({source: this.source, url: this.url});\n    const worker = new Worker(this._loadableURL, {name: this.name});\n\n    worker.onmessage = (event) => {\n      if (!event.data) {\n        this.onError(new Error('No data received'));\n      } else {\n        this.onMessage(event.data);\n      }\n    };\n    // This callback represents an uncaught exception in the worker thread\n    worker.onerror = (error: ErrorEvent): void => {\n      this.onError(this._getErrorFromErrorEvent(error));\n      this.terminated = true;\n    };\n    // TODO - not clear when this would be called, for now just log in case it happens\n    worker.onmessageerror = (event) => console.error(event); // eslint-disable-line\n\n    return worker;\n  }\n\n  /**\n   * Creates a worker thread in node.js\n   * @todo https://nodejs.org/api/async_hooks.html#async-resource-worker-pool\n   */\n  _createNodeWorker(): NodeWorker {\n    let worker: NodeWorker;\n    if (this.url) {\n      // Make sure relative URLs start with './'\n      const absolute = this.url.includes(':/') || this.url.startsWith('/');\n      const url = absolute ? this.url : `./${this.url}`;\n      // console.log('Starting work from', url);\n      worker = new NodeWorker(url, {eval: false});\n    } else if (this.source) {\n      worker = new NodeWorker(this.source, {eval: true});\n    } else {\n      throw new Error('no worker');\n    }\n    worker.on('message', (data) => {\n      // console.error('message', data);\n      this.onMessage(data);\n    });\n    worker.on('error', (error) => {\n      // console.error('error', error);\n      this.onError(error);\n    });\n    worker.on('exit', (code) => {\n      // console.error('exit', code);\n    });\n    return worker;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}