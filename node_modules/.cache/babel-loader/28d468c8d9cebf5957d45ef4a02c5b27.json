{"ast":null,"code":"import { createElement, useRef, useState, useMemo, useEffect, useImperativeHandle, forwardRef } from 'react';\nimport { Deck } from '@deck.gl/core';\nimport useIsomorphicLayoutEffect from './utils/use-isomorphic-layout-effect';\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\nimport extractStyles from './utils/extract-styles';\n\nfunction getRefHandles(thisRef) {\n  return {\n    get deck() {\n      return thisRef.deck;\n    },\n\n    pickObject: opts => thisRef.deck.pickObject(opts),\n    pickMultipleObjects: opts => thisRef.deck.pickMultipleObjects(opts),\n    pickObjects: opts => thisRef.deck.pickObjects(opts)\n  };\n}\n\nfunction redrawDeck(thisRef) {\n  if (thisRef.redrawReason) {\n    thisRef.deck._drawLayers(thisRef.redrawReason);\n\n    thisRef.redrawReason = null;\n  }\n}\n\nfunction createDeckInstance(thisRef, DeckClass, props) {\n  const deck = new DeckClass({ ...props,\n    _customRender: redrawReason => {\n      thisRef.redrawReason = redrawReason;\n      const viewports = deck.getViewports();\n\n      if (thisRef.lastRenderedViewports !== viewports) {\n        thisRef.forceUpdate();\n      } else {\n        redrawDeck(thisRef);\n      }\n    }\n  });\n  return deck;\n}\n\nconst DeckGL = forwardRef((props, ref) => {\n  const [version, setVersion] = useState(0);\n\n  const _thisRef = useRef({\n    control: null,\n    version,\n    forceUpdate: () => setVersion(v => v + 1)\n  });\n\n  const thisRef = _thisRef.current;\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const jsxProps = useMemo(() => extractJSXLayers(props), [props.layers, props.views, props.children]);\n  let inRender = true;\n\n  const handleViewStateChange = params => {\n    var _props$onViewStateCha;\n\n    if (inRender && props.viewState) {\n      thisRef.viewStateUpdateRequested = params;\n      return null;\n    }\n\n    thisRef.viewStateUpdateRequested = null;\n    return (_props$onViewStateCha = props.onViewStateChange) === null || _props$onViewStateCha === void 0 ? void 0 : _props$onViewStateCha.call(props, params);\n  };\n\n  const handleInteractionStateChange = params => {\n    if (inRender) {\n      thisRef.interactionStateUpdateRequested = params;\n    } else {\n      var _props$onInteractionS;\n\n      thisRef.interactionStateUpdateRequested = null;\n      (_props$onInteractionS = props.onInteractionStateChange) === null || _props$onInteractionS === void 0 ? void 0 : _props$onInteractionS.call(props, params);\n    }\n  };\n\n  const deckProps = useMemo(() => {\n    const forwardProps = { ...props,\n      style: null,\n      width: '100%',\n      height: '100%',\n      parent: containerRef.current,\n      canvas: canvasRef.current,\n      layers: jsxProps.layers,\n      views: jsxProps.views,\n      onViewStateChange: handleViewStateChange,\n      onInteractionStateChange: handleInteractionStateChange\n    };\n    delete forwardProps._customRender;\n\n    if (thisRef.deck) {\n      thisRef.deck.setProps(forwardProps);\n    }\n\n    return forwardProps;\n  }, [props]);\n  useEffect(() => {\n    const DeckClass = props.Deck || Deck;\n    thisRef.deck = createDeckInstance(thisRef, DeckClass, { ...deckProps,\n      parent: containerRef.current,\n      canvas: canvasRef.current\n    });\n    return () => {\n      var _thisRef$deck;\n\n      return (_thisRef$deck = thisRef.deck) === null || _thisRef$deck === void 0 ? void 0 : _thisRef$deck.finalize();\n    };\n  }, []);\n  useIsomorphicLayoutEffect(() => {\n    redrawDeck(thisRef);\n    const {\n      viewStateUpdateRequested,\n      interactionStateUpdateRequested\n    } = thisRef;\n\n    if (viewStateUpdateRequested) {\n      handleViewStateChange(viewStateUpdateRequested);\n    }\n\n    if (interactionStateUpdateRequested) {\n      handleInteractionStateChange(interactionStateUpdateRequested);\n    }\n  });\n  useImperativeHandle(ref, () => getRefHandles(thisRef), []);\n  const currentViewports = thisRef.deck && thisRef.deck.isInitialized ? thisRef.deck.getViewports() : undefined;\n  const {\n    ContextProvider,\n    width,\n    height,\n    id,\n    style\n  } = props;\n  const {\n    containerStyle,\n    canvasStyle\n  } = useMemo(() => extractStyles({\n    width,\n    height,\n    style\n  }), [width, height, style]);\n\n  if (!thisRef.viewStateUpdateRequested && thisRef.lastRenderedViewports === currentViewports || thisRef.version !== version) {\n    thisRef.lastRenderedViewports = currentViewports;\n    thisRef.version = version;\n    const childrenUnderViews = positionChildrenUnderViews({\n      children: jsxProps.children,\n      deck: thisRef.deck,\n      ContextProvider\n    });\n    const canvas = createElement('canvas', {\n      key: 'canvas',\n      id: id || 'deckgl-overlay',\n      ref: canvasRef,\n      style: canvasStyle\n    });\n    thisRef.control = createElement('div', {\n      id: \"\".concat(id || 'deckgl', \"-wrapper\"),\n      ref: containerRef,\n      style: containerStyle\n    }, [canvas, childrenUnderViews]);\n  }\n\n  inRender = false;\n  return thisRef.control;\n});\nDeckGL.defaultProps = Deck.defaultProps;\nexport default DeckGL;","map":{"version":3,"mappings":"AAoBA,SACEA,aADF,EAEEC,MAFF,EAGEC,QAHF,EAIEC,OAJF,EAKEC,SALF,EAMEC,mBANF,EAOEC,UAPF,QAQO,OARP;AASA,SAAQC,IAAR,QAAmB,eAAnB;AACA,OAAOC,yBAAP,MAAsC,sCAAtC;AAEA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,0BAAP,MAAuC,uCAAvC;AACA,OAAOC,aAAP,MAA0B,wBAA1B;;AAqCA,SAASC,aAAT,CAAuBC,OAAvB,EAA4D;EAC1D,OAAO;IACL,IAAIC,IAAJ,GAAW;MACT,OAAOD,OAAO,CAACC,IAAf;IAFG;;IAKLC,UAAU,EAAEC,IAAI,IAAIH,OAAO,CAACC,IAARD,CAAcE,UAAdF,CAAyBG,IAAzBH,CALf;IAMLI,mBAAmB,EAAED,IAAI,IAAIH,OAAO,CAACC,IAARD,CAAcI,mBAAdJ,CAAkCG,IAAlCH,CANxB;IAOLK,WAAW,EAAEF,IAAI,IAAIH,OAAO,CAACC,IAARD,CAAcK,WAAdL,CAA0BG,IAA1BH;EAPhB,CAAP;AASD;;AAED,SAASM,UAAT,CAAoBN,OAApB,EAA8C;EAC5C,IAAIA,OAAO,CAACO,YAAZ,EAA0B;IAGxBP,OAAO,CAACC,IAARD,CAAaQ,WAAbR,CAAyBA,OAAO,CAACO,YAAjCP;;IACAA,OAAO,CAACO,YAARP,GAAuB,IAAvBA;EACD;AACF;;AAED,SAASS,kBAAT,CACET,OADF,EAEEU,SAFF,EAGEC,KAHF,EAIQ;EACN,MAAMV,IAAI,GAAG,IAAIS,SAAJ,CAAc,EACzB,GAAGC,KADsB;IAKzBC,aAAa,EAAEL,YAAY,IAAI;MAE7BP,OAAO,CAACO,YAARP,GAAuBO,YAAvBP;MAIA,MAAMa,SAAS,GAAGZ,IAAI,CAACa,YAALb,EAAlB;;MACA,IAAID,OAAO,CAACe,qBAARf,KAAkCa,SAAtC,EAAiD;QAI/Cb,OAAO,CAACgB,WAARhB;MAJF,OAKO;QACLM,UAAU,CAACN,OAAD,CAAVM;MACD;IACF;EApBwB,CAAd,CAAb;EAsBA,OAAOL,IAAP;AACD;;AAED,MAAMgB,MAAM,GAAGxB,UAAU,CAAyB,CAACkB,KAAD,EAAQO,GAAR,KAAgB;EAEhE,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB/B,QAAQ,CAAC,CAAD,CAAtC;;EAEA,MAAMgC,QAAQ,GAAGjC,MAAM,CAAkB;IACvCkC,OAAO,EAAE,IAD8B;IAEvCH,OAFuC;IAGvCH,WAAW,EAAE,MAAMI,UAAU,CAACG,CAAC,IAAIA,CAAC,GAAG,CAAV;EAHU,CAAlB,CAAvB;;EAKA,MAAMvB,OAAO,GAAGqB,QAAQ,CAACG,OAAzB;EAEA,MAAMC,YAAY,GAAGrC,MAAM,CAAC,IAAD,CAA3B;EACA,MAAMsC,SAAS,GAAGtC,MAAM,CAAC,IAAD,CAAxB;EAGA,MAAMuC,QAAQ,GAAGrC,OAAO,CACtB,MAAMM,gBAAgB,CAACe,KAAD,CADA,EAEtB,CAACA,KAAK,CAACiB,MAAP,EAAejB,KAAK,CAACkB,KAArB,EAA4BlB,KAAK,CAACmB,QAAlC,CAFsB,CAAxB;EAMA,IAAIC,QAAQ,GAAG,IAAf;;EAEA,MAAMC,qBAAqD,GAAGC,MAAM,IAAI;IAAA;;IACtE,IAAIF,QAAQ,IAAIpB,KAAK,CAACuB,SAAtB,EAAiC;MAI/BlC,OAAO,CAACmC,wBAARnC,GAAmCiC,MAAnCjC;MACA,OAAO,IAAP;IACD;;IACDA,OAAO,CAACmC,wBAARnC,GAAmC,IAAnCA;IACA,gCAAOW,KAAK,CAACyB,iBAAb,0DAAOC,kCAA0BJ,MAA1B,CAAP;EATF;;EAYA,MAAMK,4BAAmE,GAAGL,MAAM,IAAI;IACpF,IAAIF,QAAJ,EAAc;MAIZ/B,OAAO,CAACuC,+BAARvC,GAA0CiC,MAA1CjC;IAJF,OAKO;MAAA;;MACLA,OAAO,CAACuC,+BAARvC,GAA0C,IAA1CA;MACA,8BAAK,CAACwC,wBAAN,4FAAiCP,MAAjC;IACD;EATH;;EAeA,MAAMQ,SAAS,GAAGnD,OAAO,CAAC,MAAM;IAC9B,MAAMoD,YAAuB,GAAG,EAC9B,GAAG/B,KAD2B;MAG9BgC,KAAK,EAAE,IAHuB;MAI9BC,KAAK,EAAE,MAJuB;MAK9BC,MAAM,EAAE,MALsB;MAM9BC,MAAM,EAAErB,YAAY,CAACD,OANS;MAO9BuB,MAAM,EAAErB,SAAS,CAACF,OAPY;MAQ9BI,MAAM,EAAED,QAAQ,CAACC,MARa;MAS9BC,KAAK,EAAEF,QAAQ,CAACE,KATc;MAU9BO,iBAAiB,EAAEJ,qBAVW;MAW9BQ,wBAAwB,EAAEF;IAXI,CAAhC;IAgBA,OAAOI,YAAY,CAAC9B,aAApB;;IAEA,IAAIZ,OAAO,CAACC,IAAZ,EAAkB;MAChBD,OAAO,CAACC,IAARD,CAAagD,QAAbhD,CAAsB0C,YAAtB1C;IACD;;IAED,OAAO0C,YAAP;EAvBuB,GAwBtB,CAAC/B,KAAD,CAxBsB,CAAzB;EA0BApB,SAAS,CAAC,MAAM;IACd,MAAMmB,SAAS,GAAGC,KAAK,CAACjB,IAANiB,IAAcjB,IAAhC;IAEAM,OAAO,CAACC,IAARD,GAAeS,kBAAkB,CAACT,OAAD,EAAUU,SAAV,EAAqB,EACpD,GAAG+B,SADiD;MAEpDK,MAAM,EAAErB,YAAY,CAACD,OAF+B;MAGpDuB,MAAM,EAAErB,SAAS,CAACF;IAHkC,CAArB,CAAjCxB;IAMA,OAAO;MAAA;;MAAA,wBAAMA,OAAO,CAACC,IAAd,kDAAMgD,cAAcC,QAAd,EAAN;IAAP;EATO,GAUN,EAVM,CAAT3D;EAYAI,yBAAyB,CAAC,MAAM;IAI9BW,UAAU,CAACN,OAAD,CAAVM;IAGA,MAAM;MAAC6B,wBAAD;MAA2BI;IAA3B,IAA8DvC,OAApE;;IACA,IAAImC,wBAAJ,EAA8B;MAC5BH,qBAAqB,CAACG,wBAAD,CAArBH;IACD;;IACD,IAAIO,+BAAJ,EAAqC;MACnCD,4BAA4B,CAACC,+BAAD,CAA5BD;IACD;EAbsB,EAAzB3C;EAgBAH,mBAAmB,CAAC0B,GAAD,EAAM,MAAMnB,aAAa,CAACC,OAAD,CAAzB,EAAoC,EAApC,CAAnBR;EAEA,MAAM2D,gBAAgB,GACpBnD,OAAO,CAACC,IAARD,IAAgBA,OAAO,CAACC,IAARD,CAAaoD,aAA7BpD,GAA6CA,OAAO,CAACC,IAARD,CAAac,YAAbd,EAA7CA,GAA2EqD,SAD7E;EAGA,MAAM;IAACC,eAAD;IAAkBV,KAAlB;IAAyBC,MAAzB;IAAiCU,EAAjC;IAAqCZ;EAArC,IAA8ChC,KAApD;EAEA,MAAM;IAAC6C,cAAD;IAAiBC;EAAjB,IAAgCnE,OAAO,CAC3C,MAAMQ,aAAa,CAAC;IAAC8C,KAAD;IAAQC,MAAR;IAAgBF;EAAhB,CAAD,CADwB,EAE3C,CAACC,KAAD,EAAQC,MAAR,EAAgBF,KAAhB,CAF2C,CAA7C;;EAWA,IACG,CAAC3C,OAAO,CAACmC,wBAAT,IAAqCnC,OAAO,CAACe,qBAARf,KAAkCmD,gBAAvE,IACDnD,OAAO,CAACmB,OAARnB,KAAoBmB,OAFtB,EAGE;IACAnB,OAAO,CAACe,qBAARf,GAAgCmD,gBAAhCnD;IACAA,OAAO,CAACmB,OAARnB,GAAkBmB,OAAlBnB;IAIA,MAAM0D,kBAAkB,GAAG7D,0BAA0B,CAAC;MACpDiC,QAAQ,EAAEH,QAAQ,CAACG,QADiC;MAEpD7B,IAAI,EAAED,OAAO,CAACC,IAFsC;MAGpDqD;IAHoD,CAAD,CAArD;IAMA,MAAMP,MAAM,GAAG5D,aAAa,CAAC,QAAD,EAAW;MACrCwE,GAAG,EAAE,QADgC;MAErCJ,EAAE,EAAEA,EAAE,IAAI,gBAF2B;MAGrCrC,GAAG,EAAEQ,SAHgC;MAIrCiB,KAAK,EAAEc;IAJ8B,CAAX,CAA5B;IAQAzD,OAAO,CAACsB,OAARtB,GAAkBb,aAAa,CAC7B,KAD6B,EAE7B;MAACoE,EAAE,YAAKA,EAAE,IAAI,QAAX,aAAH;MAAkCrC,GAAG,EAAEO,YAAvC;MAAqDkB,KAAK,EAAEa;IAA5D,CAF6B,EAG7B,CAACT,MAAD,EAASW,kBAAT,CAH6B,CAA/B1D;EAKD;;EAED+B,QAAQ,GAAG,KAAXA;EACA,OAAO/B,OAAO,CAACsB,OAAf;AAzJuB,EAAzB;AA4JAL,MAAM,CAAC2C,YAAP3C,GAAsBvB,IAAI,CAACkE,YAA3B3C;AAEA,eAAeA,MAAf","names":["createElement","useRef","useState","useMemo","useEffect","useImperativeHandle","forwardRef","Deck","useIsomorphicLayoutEffect","extractJSXLayers","positionChildrenUnderViews","extractStyles","getRefHandles","thisRef","deck","pickObject","opts","pickMultipleObjects","pickObjects","redrawDeck","redrawReason","_drawLayers","createDeckInstance","DeckClass","props","_customRender","viewports","getViewports","lastRenderedViewports","forceUpdate","DeckGL","ref","version","setVersion","_thisRef","control","v","current","containerRef","canvasRef","jsxProps","layers","views","children","inRender","handleViewStateChange","params","viewState","viewStateUpdateRequested","onViewStateChange","_props$onViewStateCha","handleInteractionStateChange","interactionStateUpdateRequested","onInteractionStateChange","deckProps","forwardProps","style","width","height","parent","canvas","setProps","_thisRef$deck","finalize","currentViewports","isInitialized","undefined","ContextProvider","id","containerStyle","canvasStyle","childrenUnderViews","key","defaultProps"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@deck.gl\\react\\src\\deckgl.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport * as React from 'react';\nimport {\n  createElement,\n  useRef,\n  useState,\n  useMemo,\n  useEffect,\n  useImperativeHandle,\n  forwardRef\n} from 'react';\nimport {Deck} from '@deck.gl/core';\nimport useIsomorphicLayoutEffect from './utils/use-isomorphic-layout-effect';\n\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\nimport extractStyles from './utils/extract-styles';\n\nimport type {DeckGLContextValue} from './utils/position-children-under-views';\nimport type {DeckProps, Viewport} from '@deck.gl/core';\n\n/* eslint-disable max-statements, accessor-pairs */\ntype DeckInstanceRef = {\n  deck?: Deck;\n  redrawReason?: string | null;\n  lastRenderedViewports?: Viewport[];\n  viewStateUpdateRequested?: any;\n  interactionStateUpdateRequested?: any;\n  forceUpdate: () => void;\n  version: number;\n  control: React.ReactHTMLElement<HTMLElement> | null;\n};\n\n// Remove prop types in the base Deck class that support externally supplied canvas/WebGLContext\n/** DeckGL React component props */\nexport type DeckGLProps = Omit<\n  DeckProps,\n  'width' | 'height' | 'gl' | 'parent' | 'canvas' | '_customRender'\n> & {\n  Deck?: typeof Deck;\n  width?: string | number;\n  height?: string | number;\n  children?: React.ReactNode;\n  ContextProvider?: React.Context<DeckGLContextValue>['Provider'];\n};\n\nexport type DeckGLRef = {\n  deck?: Deck;\n  pickObject: Deck['pickObject'];\n  pickObjects: Deck['pickObjects'];\n  pickMultipleObjects: Deck['pickMultipleObjects'];\n};\n\nfunction getRefHandles(thisRef: DeckInstanceRef): DeckGLRef {\n  return {\n    get deck() {\n      return thisRef.deck;\n    },\n    // The following method can only be called after ref is available, by which point deck is defined in useEffect\n    pickObject: opts => thisRef.deck!.pickObject(opts),\n    pickMultipleObjects: opts => thisRef.deck!.pickMultipleObjects(opts),\n    pickObjects: opts => thisRef.deck!.pickObjects(opts)\n  };\n}\n\nfunction redrawDeck(thisRef: DeckInstanceRef) {\n  if (thisRef.redrawReason) {\n    // Only redraw if we have received a dirty flag\n    // @ts-expect-error accessing protected method\n    thisRef.deck._drawLayers(thisRef.redrawReason);\n    thisRef.redrawReason = null;\n  }\n}\n\nfunction createDeckInstance(\n  thisRef: DeckInstanceRef,\n  DeckClass: typeof Deck,\n  props: DeckProps\n): Deck {\n  const deck = new DeckClass({\n    ...props,\n    // The Deck's animation loop is independent from React's render cycle, causing potential\n    // synchronization issues. We provide this custom render function to make sure that React\n    // and Deck update on the same schedule.\n    _customRender: redrawReason => {\n      // Save the dirty flag for later\n      thisRef.redrawReason = redrawReason;\n\n      // Viewport/view state is passed to child components as props.\n      // If they have changed, we need to trigger a React rerender to update children props.\n      const viewports = deck.getViewports();\n      if (thisRef.lastRenderedViewports !== viewports) {\n        // Viewports have changed, update children props first.\n        // This will delay the Deck canvas redraw till after React update (in useLayoutEffect)\n        // so that the canvas does not get rendered before the child components update.\n        thisRef.forceUpdate();\n      } else {\n        redrawDeck(thisRef);\n      }\n    }\n  });\n  return deck;\n}\n\nconst DeckGL = forwardRef<DeckGLRef, DeckGLProps>((props, ref) => {\n  // A mechanism to force redraw\n  const [version, setVersion] = useState(0);\n  // A reference to persistent states\n  const _thisRef = useRef<DeckInstanceRef>({\n    control: null,\n    version,\n    forceUpdate: () => setVersion(v => v + 1)\n  });\n  const thisRef = _thisRef.current;\n  // DOM refs\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // extract any deck.gl layers masquerading as react elements from props.children\n  const jsxProps = useMemo(\n    () => extractJSXLayers(props),\n    [props.layers, props.views, props.children]\n  );\n\n  // Callbacks\n  let inRender = true;\n\n  const handleViewStateChange: DeckProps['onViewStateChange'] = params => {\n    if (inRender && props.viewState) {\n      // Callback may invoke a state update. Defer callback to after render() to avoid React error\n      // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n      // Store deferred parameters in ref so that we can access it in another render\n      thisRef.viewStateUpdateRequested = params;\n      return null;\n    }\n    thisRef.viewStateUpdateRequested = null;\n    return props.onViewStateChange?.(params);\n  };\n\n  const handleInteractionStateChange: DeckProps['onInteractionStateChange'] = params => {\n    if (inRender) {\n      // Callback may invoke a state update. Defer callback to after render() to avoid React error\n      // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n      // Store deferred parameters in ref so that we can access it in another render\n      thisRef.interactionStateUpdateRequested = params;\n    } else {\n      thisRef.interactionStateUpdateRequested = null;\n      props.onInteractionStateChange?.(params);\n    }\n  };\n\n  // Update Deck's props. If Deck needs redraw, this will trigger a call to `_customRender` in\n  // the next animation frame.\n  // Needs to be called both from initial mount, and when new props are received\n  const deckProps = useMemo(() => {\n    const forwardProps: DeckProps = {\n      ...props,\n      // Override user styling props. We will set the canvas style in render()\n      style: null,\n      width: '100%',\n      height: '100%',\n      parent: containerRef.current,\n      canvas: canvasRef.current,\n      layers: jsxProps.layers,\n      views: jsxProps.views,\n      onViewStateChange: handleViewStateChange,\n      onInteractionStateChange: handleInteractionStateChange\n    };\n\n    // The defaultValue for _customRender is null, which would overwrite the definition\n    // of _customRender. Remove to avoid frequently redeclaring the method here.\n    delete forwardProps._customRender;\n\n    if (thisRef.deck) {\n      thisRef.deck.setProps(forwardProps);\n    }\n\n    return forwardProps;\n  }, [props]);\n\n  useEffect(() => {\n    const DeckClass = props.Deck || Deck;\n\n    thisRef.deck = createDeckInstance(thisRef, DeckClass, {\n      ...deckProps,\n      parent: containerRef.current,\n      canvas: canvasRef.current\n    });\n\n    return () => thisRef.deck?.finalize();\n  }, []);\n\n  useIsomorphicLayoutEffect(() => {\n    // render has just been called. The children are positioned based on the current view state.\n    // Redraw Deck canvas immediately, if necessary, using the current view state, so that it\n    // matches the child components.\n    redrawDeck(thisRef);\n\n    // Execute deferred callbacks\n    const {viewStateUpdateRequested, interactionStateUpdateRequested} = thisRef;\n    if (viewStateUpdateRequested) {\n      handleViewStateChange(viewStateUpdateRequested);\n    }\n    if (interactionStateUpdateRequested) {\n      handleInteractionStateChange(interactionStateUpdateRequested);\n    }\n  });\n\n  useImperativeHandle(ref, () => getRefHandles(thisRef), []);\n\n  const currentViewports =\n    thisRef.deck && thisRef.deck.isInitialized ? thisRef.deck.getViewports() : undefined;\n\n  const {ContextProvider, width, height, id, style} = props;\n\n  const {containerStyle, canvasStyle} = useMemo(\n    () => extractStyles({width, height, style}),\n    [width, height, style]\n  );\n\n  // Props changes may lead to 3 types of updates:\n  // 1. Only the WebGL canvas - updated in Deck's render cycle (next animation frame)\n  // 2. Only the DOM - updated in React's lifecycle (now)\n  // 3. Both the WebGL canvas and the DOM - defer React rerender to next animation frame just\n  //    before Deck redraw to ensure perfect synchronization & avoid excessive redraw\n  //    This is because multiple changes may happen to Deck between two frames e.g. transition\n  if (\n    (!thisRef.viewStateUpdateRequested && thisRef.lastRenderedViewports === currentViewports) || // case 2\n    thisRef.version !== version // case 3 just before deck redraws\n  ) {\n    thisRef.lastRenderedViewports = currentViewports;\n    thisRef.version = version;\n\n    // Render the background elements (typically react-map-gl instances)\n    // using the view descriptors\n    const childrenUnderViews = positionChildrenUnderViews({\n      children: jsxProps.children,\n      deck: thisRef.deck,\n      ContextProvider\n    });\n\n    const canvas = createElement('canvas', {\n      key: 'canvas',\n      id: id || 'deckgl-overlay',\n      ref: canvasRef,\n      style: canvasStyle\n    });\n\n    // Render deck.gl as the last child\n    thisRef.control = createElement(\n      'div',\n      {id: `${id || 'deckgl'}-wrapper`, ref: containerRef, style: containerStyle},\n      [canvas, childrenUnderViews]\n    );\n  }\n\n  inRender = false;\n  return thisRef.control;\n});\n\nDeckGL.defaultProps = Deck.defaultProps;\n\nexport default DeckGL;\n"]},"metadata":{},"sourceType":"module"}