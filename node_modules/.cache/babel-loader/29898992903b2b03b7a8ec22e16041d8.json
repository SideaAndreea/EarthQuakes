{"ast":null,"code":"const DEGREES_TO_RADIANS = Math.PI / 180;\nconst DAY_IN_MS = 1000 * 60 * 60 * 24;\nconst JD1970 = 2440588;\nconst JD2000 = 2451545;\nconst e = DEGREES_TO_RADIANS * 23.4397;\nconst M0 = 357.5291;\nconst M1 = 0.98560028;\nconst THETA0 = 280.147;\nconst THETA1 = 360.9856235;\nexport function getSunPosition(timestamp, latitude, longitude) {\n  const longitudeWestInRadians = DEGREES_TO_RADIANS * -longitude;\n  const phi = DEGREES_TO_RADIANS * latitude;\n  const d = toDays(timestamp);\n  const c = getSunCoords(d);\n  const H = getSiderealTime(d, longitudeWestInRadians) - c.rightAscension;\n  return {\n    azimuth: getAzimuth(H, phi, c.declination),\n    altitude: getAltitude(H, phi, c.declination)\n  };\n}\nexport function getSunDirection(timestamp, latitude, longitude) {\n  const {\n    azimuth,\n    altitude\n  } = getSunPosition(timestamp, latitude, longitude);\n  return [Math.sin(azimuth) * Math.cos(altitude), Math.cos(azimuth) * Math.cos(altitude), -Math.sin(altitude)];\n}\n\nfunction toJulianDay(timestamp) {\n  const ts = typeof timestamp === 'number' ? timestamp : timestamp.getTime();\n  return ts / DAY_IN_MS - 0.5 + JD1970;\n}\n\nfunction toDays(timestamp) {\n  return toJulianDay(timestamp) - JD2000;\n}\n\nfunction getRightAscension(eclipticLongitude, b) {\n  const lambda = eclipticLongitude;\n  return Math.atan2(Math.sin(lambda) * Math.cos(e) - Math.tan(b) * Math.sin(e), Math.cos(lambda));\n}\n\nfunction getDeclination(eclipticLongitude, b) {\n  const lambda = eclipticLongitude;\n  return Math.asin(Math.sin(b) * Math.cos(e) + Math.cos(b) * Math.sin(e) * Math.sin(lambda));\n}\n\nfunction getAzimuth(hourAngle, latitudeInRadians, declination) {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.atan2(Math.sin(H), Math.cos(H) * Math.sin(phi) - Math.tan(delta) * Math.cos(phi));\n}\n\nfunction getAltitude(hourAngle, latitudeInRadians, declination) {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.asin(Math.sin(phi) * Math.sin(delta) + Math.cos(phi) * Math.cos(delta) * Math.cos(H));\n}\n\nfunction getSiderealTime(dates, longitudeWestInRadians) {\n  return DEGREES_TO_RADIANS * (THETA0 + THETA1 * dates) - longitudeWestInRadians;\n}\n\nfunction getSolarMeanAnomaly(days) {\n  return DEGREES_TO_RADIANS * (M0 + M1 * days);\n}\n\nfunction getEclipticLongitude(meanAnomaly) {\n  const M = meanAnomaly;\n  const C = DEGREES_TO_RADIANS * (1.9148 * Math.sin(M) + 0.02 * Math.sin(2 * M) + 0.0003 * Math.sin(3 * M));\n  const P = DEGREES_TO_RADIANS * 102.9372;\n  return M + C + P + Math.PI;\n}\n\nfunction getSunCoords(dates) {\n  const M = getSolarMeanAnomaly(dates);\n  const L = getEclipticLongitude(M);\n  return {\n    declination: getDeclination(L, 0),\n    rightAscension: getRightAscension(L, 0)\n  };\n}","map":{"version":3,"mappings":"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","names":["DEGREES_TO_RADIANS","Math","PI","DAY_IN_MS","JD1970","JD2000","e","M0","M1","THETA0","THETA1","getSunPosition","timestamp","latitude","longitude","longitudeWestInRadians","phi","d","toDays","c","getSunCoords","H","getSiderealTime","rightAscension","azimuth","getAzimuth","declination","altitude","getAltitude","getSunDirection","sin","cos","toJulianDay","ts","getTime","getRightAscension","eclipticLongitude","b","lambda","atan2","tan","getDeclination","asin","hourAngle","latitudeInRadians","delta","dates","getSolarMeanAnomaly","days","getEclipticLongitude","meanAnomaly","M","C","P","L"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplicații\\earthquakes\\node_modules\\@math.gl\\sun\\src\\suncalc.ts"],"sourcesContent":["const DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst DAY_IN_MS = 1000 * 60 * 60 * 24;\nconst JD1970 = 2440588; // Julian Day year 1970\nconst JD2000 = 2451545; // Julian Day year 2000\n\n// This angle ε [epsilon] is called the obliquity of the ecliptic and its value at the beginning of 2000 was 23.4397°\nconst e = DEGREES_TO_RADIANS * 23.4397; // obliquity of the Earth\n\n// Refer https://www.aa.quae.nl/en/reken/zonpositie.html\n// \"The Mean Anomaly\" section for explanation\nconst M0 = 357.5291; // Earth mean anomaly on start day\nconst M1 = 0.98560028; // Earth angle traverses on average per day seen from the sun\n\nconst THETA0 = 280.147; // The sidereal time (in degrees) at longitude 0° at the instant defined by JD2000\nconst THETA1 = 360.9856235; // The rate of change of the sidereal time, in degrees per day.\n\n/**\n * A position in the sky defined by two angles\n * The altitude is 0° at the horizon, +90° in the zenith (straight over your head), and −90° in the nadir (straight down).\n * The azimuth is the direction along the horizon, which we measure from south to west.\n * South has azimuth 0°, west +90°, north +180°, and east +270° (or −90°, that's the same thing).\n */\nexport type CelestialPosition = {\n  azimuth: number;\n  altitude: number;\n};\n\n/**\n * Calculate sun position\n * based on https://www.aa.quae.nl/en/reken/zonpositie.html\n * inspired by https://github.com/mourner/suncalc/blob/master/suncalc.js\n */\nexport function getSunPosition(\n  timestamp: number | Date,\n  latitude: number,\n  longitude: number\n): CelestialPosition {\n  const longitudeWestInRadians = DEGREES_TO_RADIANS * -longitude;\n  const phi = DEGREES_TO_RADIANS * latitude;\n  const d = toDays(timestamp);\n\n  const c = getSunCoords(d);\n  // hour angle\n  const H = getSiderealTime(d, longitudeWestInRadians) - c.rightAscension;\n\n  return {\n    azimuth: getAzimuth(H, phi, c.declination),\n    altitude: getAltitude(H, phi, c.declination)\n  };\n}\n\nexport function getSunDirection(\n  timestamp: number | Date,\n  latitude: number,\n  longitude: number\n): number[] {\n  const {azimuth, altitude} = getSunPosition(timestamp, latitude, longitude);\n\n  // solar position to light direction\n  return [\n    Math.sin(azimuth) * Math.cos(altitude),\n    Math.cos(azimuth) * Math.cos(altitude),\n    -Math.sin(altitude)\n  ];\n}\n\nfunction toJulianDay(timestamp: number | Date): number {\n  const ts = typeof timestamp === 'number' ? timestamp : timestamp.getTime();\n  return ts / DAY_IN_MS - 0.5 + JD1970;\n}\n\nfunction toDays(timestamp: number | Date): number {\n  return toJulianDay(timestamp) - JD2000;\n}\n\nfunction getRightAscension(eclipticLongitude: number, b: number): number {\n  const lambda = eclipticLongitude;\n  return Math.atan2(Math.sin(lambda) * Math.cos(e) - Math.tan(b) * Math.sin(e), Math.cos(lambda));\n}\n\nfunction getDeclination(eclipticLongitude: number, b: number): number {\n  const lambda = eclipticLongitude;\n  return Math.asin(Math.sin(b) * Math.cos(e) + Math.cos(b) * Math.sin(e) * Math.sin(lambda));\n}\n\nfunction getAzimuth(hourAngle: number, latitudeInRadians: number, declination: number): number {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.atan2(Math.sin(H), Math.cos(H) * Math.sin(phi) - Math.tan(delta) * Math.cos(phi));\n}\n\nfunction getAltitude(hourAngle: number, latitudeInRadians: number, declination: number): number {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.asin(Math.sin(phi) * Math.sin(delta) + Math.cos(phi) * Math.cos(delta) * Math.cos(H));\n}\n\n// https://www.aa.quae.nl/en/reken/zonpositie.html\n// \"The Observer section\"\nfunction getSiderealTime(dates: number, longitudeWestInRadians: number): number {\n  return DEGREES_TO_RADIANS * (THETA0 + THETA1 * dates) - longitudeWestInRadians;\n}\n\nfunction getSolarMeanAnomaly(days: number): number {\n  return DEGREES_TO_RADIANS * (M0 + M1 * days);\n}\n\nfunction getEclipticLongitude(meanAnomaly: number): number {\n  const M = meanAnomaly;\n  // equation of center\n  const C =\n    DEGREES_TO_RADIANS * (1.9148 * Math.sin(M) + 0.02 * Math.sin(2 * M) + 0.0003 * Math.sin(3 * M));\n  // perihelion of the Earth\n  const P = DEGREES_TO_RADIANS * 102.9372;\n\n  return M + C + P + Math.PI;\n}\n\nfunction getSunCoords(dates: number): {\n  declination: number;\n  rightAscension: number;\n} {\n  const M = getSolarMeanAnomaly(dates);\n  const L = getEclipticLongitude(M);\n\n  return {\n    declination: getDeclination(L, 0),\n    rightAscension: getRightAscension(L, 0)\n  };\n}\n"]},"metadata":{},"sourceType":"module"}