{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Pass from './pass';\nimport { clear, setParameters, withParameters, cssToDeviceRatio } from '@luma.gl/core';\nexport default class LayersPass extends Pass {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"_lastRenderIndex\", -1);\n  }\n\n  render(options) {\n    const gl = this.gl;\n    setParameters(gl, {\n      framebuffer: options.target\n    });\n    return this._drawLayers(options);\n  }\n\n  _drawLayers(options) {\n    const {\n      target,\n      moduleParameters,\n      viewports,\n      views,\n      onViewportActive,\n      clearStack = true,\n      clearCanvas = true\n    } = options;\n    options.pass = options.pass || 'unknown';\n    const gl = this.gl;\n\n    if (clearCanvas) {\n      clearGLCanvas(gl);\n    }\n\n    if (clearStack) {\n      this._lastRenderIndex = -1;\n    }\n\n    const renderStats = [];\n\n    for (const viewport of viewports) {\n      const view = views && views[viewport.id];\n      onViewportActive(viewport);\n\n      const drawLayerParams = this._getDrawLayerParams(viewport, options);\n\n      const subViewports = viewport.subViewports || [viewport];\n\n      for (const subViewport of subViewports) {\n        const stats = this._drawLayersInViewport(gl, {\n          target,\n          moduleParameters,\n          viewport: subViewport,\n          view,\n          pass: options.pass,\n          layers: options.layers\n        }, drawLayerParams);\n\n        renderStats.push(stats);\n      }\n    }\n\n    return renderStats;\n  }\n\n  _getDrawLayerParams(viewport, _ref) {\n    let {\n      layers,\n      pass,\n      layerFilter,\n      cullRect,\n      effects,\n      moduleParameters\n    } = _ref;\n    const drawLayerParams = [];\n    const indexResolver = layerIndexResolver(this._lastRenderIndex + 1);\n    const drawContext = {\n      layer: layers[0],\n      viewport,\n      isPicking: pass.startsWith('picking'),\n      renderPass: pass,\n      cullRect\n    };\n    const layerFilterCache = {};\n\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n\n      const shouldDrawLayer = this._shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache);\n\n      const layerParam = {\n        shouldDrawLayer\n      };\n\n      if (shouldDrawLayer) {\n        layerParam.layerRenderIndex = indexResolver(layer, shouldDrawLayer);\n        layerParam.moduleParameters = this._getModuleParameters(layer, effects, pass, moduleParameters);\n        layerParam.layerParameters = this.getLayerParameters(layer, layerIndex, viewport);\n      }\n\n      drawLayerParams[layerIndex] = layerParam;\n    }\n\n    return drawLayerParams;\n  }\n\n  _drawLayersInViewport(gl, _ref2, drawLayerParams) {\n    let {\n      layers,\n      moduleParameters: globalModuleParameters,\n      pass,\n      target,\n      viewport,\n      view\n    } = _ref2;\n    const glViewport = getGLViewport(gl, {\n      moduleParameters: globalModuleParameters,\n      target,\n      viewport\n    });\n\n    if (view && view.props.clear) {\n      const clearOpts = view.props.clear === true ? {\n        color: true,\n        depth: true\n      } : view.props.clear;\n      withParameters(gl, {\n        scissorTest: true,\n        scissor: glViewport\n      }, () => clear(gl, clearOpts));\n    }\n\n    const renderStatus = {\n      totalCount: layers.length,\n      visibleCount: 0,\n      compositeCount: 0,\n      pickableCount: 0\n    };\n    setParameters(gl, {\n      viewport: glViewport\n    });\n\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n      const {\n        shouldDrawLayer,\n        layerRenderIndex,\n        moduleParameters,\n        layerParameters\n      } = drawLayerParams[layerIndex];\n\n      if (shouldDrawLayer && layer.props.pickable) {\n        renderStatus.pickableCount++;\n      }\n\n      if (layer.isComposite) {\n        renderStatus.compositeCount++;\n      } else if (shouldDrawLayer) {\n        renderStatus.visibleCount++;\n        this._lastRenderIndex = Math.max(this._lastRenderIndex, layerRenderIndex);\n        moduleParameters.viewport = viewport;\n\n        try {\n          layer._drawLayer({\n            moduleParameters,\n            uniforms: {\n              layerIndex: layerRenderIndex\n            },\n            parameters: layerParameters\n          });\n        } catch (err) {\n          layer.raiseError(err, \"drawing \".concat(layer, \" to \").concat(pass));\n        }\n      }\n    }\n\n    return renderStatus;\n  }\n\n  shouldDrawLayer(layer) {\n    return true;\n  }\n\n  getModuleParameters(layer, effects) {\n    return null;\n  }\n\n  getLayerParameters(layer, layerIndex, viewport) {\n    return layer.props.parameters;\n  }\n\n  _shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache) {\n    const shouldDrawLayer = layer.props.visible && this.shouldDrawLayer(layer);\n\n    if (!shouldDrawLayer) {\n      return false;\n    }\n\n    drawContext.layer = layer;\n    let parent = layer.parent;\n\n    while (parent) {\n      if (!parent.props.visible || !parent.filterSubLayer(drawContext)) {\n        return false;\n      }\n\n      drawContext.layer = parent;\n      parent = parent.parent;\n    }\n\n    if (layerFilter) {\n      const rootLayerId = drawContext.layer.id;\n\n      if (!(rootLayerId in layerFilterCache)) {\n        layerFilterCache[rootLayerId] = layerFilter(drawContext);\n      }\n\n      if (!layerFilterCache[rootLayerId]) {\n        return false;\n      }\n    }\n\n    layer.activateViewport(drawContext.viewport);\n    return true;\n  }\n\n  _getModuleParameters(layer, effects, pass, overrides) {\n    var _layer$internalState;\n\n    const moduleParameters = Object.assign(Object.create(((_layer$internalState = layer.internalState) === null || _layer$internalState === void 0 ? void 0 : _layer$internalState.propsInTransition) || layer.props), {\n      autoWrapLongitude: layer.wrapLongitude,\n      viewport: layer.context.viewport,\n      mousePosition: layer.context.mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(this.gl)\n    });\n\n    if (effects) {\n      for (const effect of effects) {\n        var _effect$getModulePara;\n\n        Object.assign(moduleParameters, (_effect$getModulePara = effect.getModuleParameters) === null || _effect$getModulePara === void 0 ? void 0 : _effect$getModulePara.call(effect, layer));\n      }\n    }\n\n    return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);\n  }\n\n}\nexport function layerIndexResolver() {\n  let startIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let layerIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const resolvers = {};\n\n  const resolveLayerIndex = (layer, isDrawn) => {\n    const indexOverride = layer.props._offset;\n    const layerId = layer.id;\n    const parentId = layer.parent && layer.parent.id;\n    let index;\n\n    if (parentId && !(parentId in layerIndices)) {\n      resolveLayerIndex(layer.parent, false);\n    }\n\n    if (parentId in resolvers) {\n      const resolver = resolvers[parentId] = resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices);\n      index = resolver(layer, isDrawn);\n      resolvers[layerId] = resolver;\n    } else if (Number.isFinite(indexOverride)) {\n      index = indexOverride + (layerIndices[parentId] || 0);\n      resolvers[layerId] = null;\n    } else {\n      index = startIndex;\n    }\n\n    if (isDrawn && index >= startIndex) {\n      startIndex = index + 1;\n    }\n\n    layerIndices[layerId] = index;\n    return index;\n  };\n\n  return resolveLayerIndex;\n}\n\nfunction getGLViewport(gl, _ref3) {\n  let {\n    moduleParameters,\n    target,\n    viewport\n  } = _ref3;\n  const useTarget = target && target.id !== 'default-framebuffer';\n  const pixelRatio = moduleParameters && moduleParameters.devicePixelRatio || cssToDeviceRatio(gl);\n  const height = useTarget ? target.height : gl.drawingBufferHeight;\n  const dimensions = viewport;\n  return [dimensions.x * pixelRatio, height - (dimensions.y + dimensions.height) * pixelRatio, dimensions.width * pixelRatio, dimensions.height * pixelRatio];\n}\n\nfunction clearGLCanvas(gl) {\n  const width = gl.drawingBufferWidth;\n  const height = gl.drawingBufferHeight;\n  setParameters(gl, {\n    viewport: [0, 0, width, height]\n  });\n  gl.clear(16384 | 256);\n}","map":{"version":3,"mappings":"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","names":["Pass","clear","setParameters","withParameters","cssToDeviceRatio","LayersPass","constructor","_defineProperty","render","options","gl","framebuffer","target","_drawLayers","moduleParameters","viewports","views","onViewportActive","clearStack","clearCanvas","pass","clearGLCanvas","_lastRenderIndex","renderStats","viewport","view","id","drawLayerParams","_getDrawLayerParams","subViewports","subViewport","stats","_drawLayersInViewport","layers","push","layerFilter","cullRect","effects","indexResolver","layerIndexResolver","drawContext","layer","isPicking","startsWith","renderPass","layerFilterCache","layerIndex","length","shouldDrawLayer","_shouldDrawLayer","layerParam","layerRenderIndex","_getModuleParameters","layerParameters","getLayerParameters","globalModuleParameters","glViewport","getGLViewport","props","clearOpts","color","depth","scissorTest","scissor","renderStatus","totalCount","visibleCount","compositeCount","pickableCount","pickable","isComposite","Math","max","_drawLayer","uniforms","parameters","err","raiseError","getModuleParameters","visible","parent","filterSubLayer","rootLayerId","activateViewport","overrides","Object","assign","create","internalState","propsInTransition","autoWrapLongitude","wrapLongitude","context","mousePosition","pickingActive","devicePixelRatio","effect","_effect$getModulePara","startIndex","layerIndices","resolvers","resolveLayerIndex","isDrawn","indexOverride","_offset","layerId","parentId","index","resolver","Number","isFinite","useTarget","pixelRatio","height","drawingBufferHeight","dimensions","x","y","width","drawingBufferWidth"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@deck.gl\\core\\src\\passes\\layers-pass.ts"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport Pass from './pass';\nimport {clear, setParameters, withParameters, cssToDeviceRatio} from '@luma.gl/core';\n\nimport type {Framebuffer} from '@luma.gl/core';\nimport type Viewport from '../viewports/viewport';\nimport type View from '../views/view';\nimport type Layer from '../lib/layer';\nimport type {Effect} from '../lib/effect';\n\nexport type Rect = {x: number; y: number; width: number; height: number};\n\nexport type LayersPassRenderOptions = {\n  target?: Framebuffer;\n  pass: string;\n  layers: Layer[];\n  viewports: Viewport[];\n  onViewportActive: (viewport: Viewport) => void;\n  cullRect?: Rect;\n  views?: Record<string, View>;\n  effects?: Effect[];\n  /** If true, recalculates render index (z) from 0. Set to false if a stack of layers are rendered in multiple passes. */\n  clearStack?: boolean;\n  clearCanvas?: boolean;\n  layerFilter?: (context: FilterContext) => boolean;\n  moduleParameters?: any;\n};\n\ntype DrawLayerParameters = {\n  shouldDrawLayer: boolean;\n  layerRenderIndex?: number;\n  moduleParameters?: any;\n  layerParameters?: any;\n};\n\nexport type FilterContext = {\n  layer: Layer;\n  viewport: Viewport;\n  isPicking: boolean;\n  renderPass: string;\n  cullRect?: Rect;\n};\n\nexport type RenderStats = {\n  totalCount: number;\n  visibleCount: number;\n  compositeCount: number;\n  pickableCount: number;\n};\n\nexport default class LayersPass extends Pass {\n  _lastRenderIndex: number = -1;\n\n  render(options: LayersPassRenderOptions): any {\n    const gl = this.gl;\n\n    setParameters(gl, {framebuffer: options.target});\n    return this._drawLayers(options);\n  }\n\n  // Draw a list of layers in a list of viewports\n  private _drawLayers(options: LayersPassRenderOptions) {\n    const {\n      target,\n      moduleParameters,\n      viewports,\n      views,\n      onViewportActive,\n      clearStack = true,\n      clearCanvas = true\n    } = options;\n    options.pass = options.pass || 'unknown';\n\n    const gl = this.gl;\n    if (clearCanvas) {\n      clearGLCanvas(gl);\n    }\n\n    if (clearStack) {\n      this._lastRenderIndex = -1;\n    }\n\n    const renderStats: RenderStats[] = [];\n\n    for (const viewport of viewports) {\n      const view = views && views[viewport.id];\n\n      // Update context to point to this viewport\n      onViewportActive(viewport);\n\n      const drawLayerParams = this._getDrawLayerParams(viewport, options);\n\n      // render this viewport\n      // @ts-expect-error\n      const subViewports = viewport.subViewports || [viewport];\n      for (const subViewport of subViewports) {\n        const stats = this._drawLayersInViewport(\n          gl,\n          {\n            target,\n            moduleParameters,\n            viewport: subViewport,\n            view,\n            pass: options.pass,\n            layers: options.layers\n          },\n          drawLayerParams\n        );\n        renderStats.push(stats);\n      }\n    }\n    return renderStats;\n  }\n\n  // Resolve the parameters needed to draw each layer\n  // When a viewport contains multiple subviewports (e.g. repeated web mercator map),\n  // this is only done once for the parent viewport\n  private _getDrawLayerParams(\n    viewport: Viewport,\n    {layers, pass, layerFilter, cullRect, effects, moduleParameters}: LayersPassRenderOptions\n  ): DrawLayerParameters[] {\n    const drawLayerParams: DrawLayerParameters[] = [];\n    const indexResolver = layerIndexResolver(this._lastRenderIndex + 1);\n    const drawContext: FilterContext = {\n      layer: layers[0],\n      viewport,\n      isPicking: pass.startsWith('picking'),\n      renderPass: pass,\n      cullRect\n    };\n    const layerFilterCache = {};\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n      // Check if we should draw layer\n      const shouldDrawLayer = this._shouldDrawLayer(\n        layer,\n        drawContext,\n        layerFilter,\n        layerFilterCache\n      );\n\n      const layerParam: DrawLayerParameters = {\n        shouldDrawLayer\n      };\n\n      if (shouldDrawLayer) {\n        // This is the \"logical\" index for ordering this layer in the stack\n        // used to calculate polygon offsets\n        // It can be the same as another layer\n        layerParam.layerRenderIndex = indexResolver(layer, shouldDrawLayer);\n\n        layerParam.moduleParameters = this._getModuleParameters(\n          layer,\n          effects,\n          pass,\n          moduleParameters\n        );\n        layerParam.layerParameters = this.getLayerParameters(layer, layerIndex, viewport);\n      }\n      drawLayerParams[layerIndex] = layerParam;\n    }\n    return drawLayerParams;\n  }\n\n  // Draws a list of layers in one viewport\n  // TODO - when picking we could completely skip rendering viewports that dont\n  // intersect with the picking rect\n  /* eslint-disable max-depth, max-statements */\n  private _drawLayersInViewport(\n    gl,\n    {layers, moduleParameters: globalModuleParameters, pass, target, viewport, view},\n    drawLayerParams\n  ): RenderStats {\n    const glViewport = getGLViewport(gl, {\n      moduleParameters: globalModuleParameters,\n      target,\n      viewport\n    });\n\n    if (view && view.props.clear) {\n      const clearOpts = view.props.clear === true ? {color: true, depth: true} : view.props.clear;\n      withParameters(\n        gl,\n        {\n          scissorTest: true,\n          scissor: glViewport\n        },\n        () => clear(gl, clearOpts)\n      );\n    }\n\n    // render layers in normal colors\n    const renderStatus = {\n      totalCount: layers.length,\n      visibleCount: 0,\n      compositeCount: 0,\n      pickableCount: 0\n    };\n\n    setParameters(gl, {viewport: glViewport});\n\n    // render layers in normal colors\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n      const {shouldDrawLayer, layerRenderIndex, moduleParameters, layerParameters} =\n        drawLayerParams[layerIndex];\n\n      // Calculate stats\n      if (shouldDrawLayer && layer.props.pickable) {\n        renderStatus.pickableCount++;\n      }\n      if (layer.isComposite) {\n        renderStatus.compositeCount++;\n      } else if (shouldDrawLayer) {\n        // Draw the layer\n        renderStatus.visibleCount++;\n\n        this._lastRenderIndex = Math.max(this._lastRenderIndex, layerRenderIndex);\n\n        // overwrite layer.context.viewport with the sub viewport\n        moduleParameters.viewport = viewport;\n\n        try {\n          layer._drawLayer({\n            moduleParameters,\n            uniforms: {layerIndex: layerRenderIndex},\n            parameters: layerParameters\n          });\n        } catch (err) {\n          layer.raiseError(err, `drawing ${layer} to ${pass}`);\n        }\n      }\n    }\n\n    return renderStatus;\n  }\n  /* eslint-enable max-depth, max-statements */\n\n  /* Methods for subclass overrides */\n  protected shouldDrawLayer(layer: Layer): boolean {\n    return true;\n  }\n\n  protected getModuleParameters(layer: Layer, effects?: Effect[]): any {\n    return null;\n  }\n\n  protected getLayerParameters(layer: Layer, layerIndex: number, viewport: Viewport): any {\n    return layer.props.parameters;\n  }\n\n  /* Private */\n  private _shouldDrawLayer(\n    layer: Layer,\n    drawContext: FilterContext,\n    layerFilter: ((params: FilterContext) => boolean) | undefined,\n    layerFilterCache: Record<string, boolean>\n  ) {\n    const shouldDrawLayer = layer.props.visible && this.shouldDrawLayer(layer);\n\n    if (!shouldDrawLayer) {\n      return false;\n    }\n\n    drawContext.layer = layer;\n\n    let parent = layer.parent as Layer;\n    while (parent) {\n      // @ts-ignore\n      if (!parent.props.visible || !parent.filterSubLayer(drawContext)) {\n        return false;\n      }\n      drawContext.layer = parent;\n      parent = parent.parent as Layer;\n    }\n\n    if (layerFilter) {\n      const rootLayerId = drawContext.layer.id;\n      if (!(rootLayerId in layerFilterCache)) {\n        layerFilterCache[rootLayerId] = layerFilter(drawContext);\n      }\n      if (!layerFilterCache[rootLayerId]) {\n        return false;\n      }\n    }\n\n    // If a layer is drawn, update its viewportChanged flag\n    layer.activateViewport(drawContext.viewport);\n\n    return true;\n  }\n\n  private _getModuleParameters(\n    layer: Layer,\n    effects: Effect[] | undefined,\n    pass: string,\n    overrides: any\n  ): any {\n    const moduleParameters = Object.assign(\n      Object.create(layer.internalState?.propsInTransition || layer.props),\n      {\n        autoWrapLongitude: layer.wrapLongitude,\n        // @ts-ignore\n        viewport: layer.context.viewport,\n        // @ts-ignore\n        mousePosition: layer.context.mousePosition,\n        pickingActive: 0,\n        devicePixelRatio: cssToDeviceRatio(this.gl)\n      }\n    );\n\n    if (effects) {\n      for (const effect of effects) {\n        Object.assign(moduleParameters, effect.getModuleParameters?.(layer));\n      }\n    }\n\n    return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);\n  }\n}\n\n// If the _index prop is defined, return a layer index that's relative to its parent\n// Otherwise return the index of the layer among all rendered layers\n// This is done recursively, i.e. if the user overrides a layer's default index,\n// all its descendants will be resolved relative to that index.\n// This implementation assumes that parent layers always appear before its children\n// which is true if the layer array comes from the LayerManager\nexport function layerIndexResolver(\n  startIndex: number = 0,\n  layerIndices: Record<string, number> = {}\n): (layer: Layer, isDrawn: boolean) => number {\n  const resolvers = {};\n\n  const resolveLayerIndex = (layer, isDrawn) => {\n    const indexOverride = layer.props._offset;\n    const layerId = layer.id;\n    const parentId = layer.parent && layer.parent.id;\n\n    let index;\n\n    if (parentId && !(parentId in layerIndices)) {\n      // Populate layerIndices with the parent layer's index\n      resolveLayerIndex(layer.parent, false);\n    }\n\n    if (parentId in resolvers) {\n      const resolver = (resolvers[parentId] =\n        resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices));\n      index = resolver(layer, isDrawn);\n      resolvers[layerId] = resolver;\n    } else if (Number.isFinite(indexOverride)) {\n      index = indexOverride + (layerIndices[parentId] || 0);\n      // Mark layer as needing its own resolver\n      // We don't actually create it until it's used for the first time\n      resolvers[layerId] = null;\n    } else {\n      index = startIndex;\n    }\n\n    if (isDrawn && index >= startIndex) {\n      startIndex = index + 1;\n    }\n\n    layerIndices[layerId] = index;\n    return index;\n  };\n  return resolveLayerIndex;\n}\n\n// Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\nfunction getGLViewport(\n  gl,\n  {\n    moduleParameters,\n    target,\n    viewport\n  }: {\n    moduleParameters: any;\n    target?: Framebuffer;\n    viewport: Viewport;\n  }\n): [number, number, number, number] {\n  const useTarget = target && target.id !== 'default-framebuffer';\n  const pixelRatio =\n    (moduleParameters && moduleParameters.devicePixelRatio) || cssToDeviceRatio(gl);\n\n  // Default framebuffer is used when writing to canvas\n  const height = useTarget ? target.height : gl.drawingBufferHeight;\n\n  // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\n  const dimensions = viewport;\n  return [\n    dimensions.x * pixelRatio,\n    height - (dimensions.y + dimensions.height) * pixelRatio,\n    dimensions.width * pixelRatio,\n    dimensions.height * pixelRatio\n  ];\n}\n\nfunction clearGLCanvas(gl: WebGLRenderingContext) {\n  const width = gl.drawingBufferWidth;\n  const height = gl.drawingBufferHeight;\n  // clear depth and color buffers, restoring transparency\n  setParameters(gl, {viewport: [0, 0, width, height]});\n  gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n}\n"]},"metadata":{},"sourceType":"module"}