{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Vector3, assert } from '@math.gl/core';\nimport { INTERSECTION } from '../constants';\nimport Plane from './plane';\nconst faces = [new Vector3([1, 0, 0]), new Vector3([0, 1, 0]), new Vector3([0, 0, 1])];\nconst scratchPlaneCenter = new Vector3();\nconst scratchPlaneNormal = new Vector3();\nconst scratchPlane = new Plane(new Vector3(1.0, 0.0, 0.0), 0.0);\nexport default class CullingVolume {\n  constructor() {\n    let planes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _defineProperty(this, \"planes\", void 0);\n\n    this.planes = planes;\n  }\n\n  fromBoundingSphere(boundingSphere) {\n    this.planes.length = 2 * faces.length;\n    const center = boundingSphere.center;\n    const radius = boundingSphere.radius;\n    let planeIndex = 0;\n\n    for (const faceNormal of faces) {\n      let plane0 = this.planes[planeIndex];\n      let plane1 = this.planes[planeIndex + 1];\n\n      if (!plane0) {\n        plane0 = this.planes[planeIndex] = new Plane();\n      }\n\n      if (!plane1) {\n        plane1 = this.planes[planeIndex + 1] = new Plane();\n      }\n\n      const plane0Center = scratchPlaneCenter.copy(faceNormal).scale(-radius).add(center);\n      const plane0Distance = -faceNormal.dot(plane0Center);\n      plane0.fromPointNormal(plane0Center, faceNormal);\n      const plane1Center = scratchPlaneCenter.copy(faceNormal).scale(radius).add(center);\n      const negatedFaceNormal = scratchPlaneNormal.copy(faceNormal).negate();\n      const plane1Distance = -negatedFaceNormal.dot(plane1Center);\n      plane1.fromPointNormal(plane1Center, negatedFaceNormal);\n      planeIndex += 2;\n    }\n\n    return this;\n  }\n\n  computeVisibility(boundingVolume) {\n    let intersect = INTERSECTION.INSIDE;\n\n    for (const plane of this.planes) {\n      const result = boundingVolume.intersectPlane(plane);\n\n      switch (result) {\n        case INTERSECTION.OUTSIDE:\n          return INTERSECTION.OUTSIDE;\n\n        case INTERSECTION.INTERSECTING:\n          intersect = INTERSECTION.INTERSECTING;\n          break;\n\n        default:\n      }\n    }\n\n    return intersect;\n  }\n\n  computeVisibilityWithPlaneMask(boundingVolume, parentPlaneMask) {\n    assert(Number.isFinite(parentPlaneMask), 'parentPlaneMask is required.');\n\n    if (parentPlaneMask === CullingVolume.MASK_OUTSIDE || parentPlaneMask === CullingVolume.MASK_INSIDE) {\n      return parentPlaneMask;\n    }\n\n    let mask = CullingVolume.MASK_INSIDE;\n    const planes = this.planes;\n\n    for (let k = 0; k < this.planes.length; ++k) {\n      const flag = k < 31 ? 1 << k : 0;\n\n      if (k < 31 && (parentPlaneMask & flag) === 0) {\n        continue;\n      }\n\n      const plane = planes[k];\n      const result = boundingVolume.intersectPlane(plane);\n\n      if (result === INTERSECTION.OUTSIDE) {\n        return CullingVolume.MASK_OUTSIDE;\n      } else if (result === INTERSECTION.INTERSECTING) {\n        mask |= flag;\n      }\n    }\n\n    return mask;\n  }\n\n}\n\n_defineProperty(CullingVolume, \"MASK_OUTSIDE\", 0xffffffff);\n\n_defineProperty(CullingVolume, \"MASK_INSIDE\", 0x00000000);\n\n_defineProperty(CullingVolume, \"MASK_INDETERMINATE\", 0x7fffffff);","map":{"version":3,"mappings":"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","names":["Vector3","assert","INTERSECTION","Plane","faces","scratchPlaneCenter","scratchPlaneNormal","scratchPlane","CullingVolume","constructor","planes","_defineProperty","fromBoundingSphere","boundingSphere","length","center","radius","planeIndex","faceNormal","plane0","plane1","plane0Center","copy","scale","add","plane0Distance","dot","fromPointNormal","plane1Center","negatedFaceNormal","negate","plane1Distance","computeVisibility","boundingVolume","intersect","INSIDE","plane","result","intersectPlane","OUTSIDE","INTERSECTING","computeVisibilityWithPlaneMask","parentPlaneMask","Number","isFinite","MASK_OUTSIDE","MASK_INSIDE","mask","k","flag"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\AplicaÈ›ii\\earthquakes\\node_modules\\@math.gl\\culling\\src\\lib\\culling-volume.ts"],"sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Vector3, assert} from '@math.gl/core';\nimport {INTERSECTION} from '../constants';\nimport Plane from './plane';\nimport type {BoundingVolume} from './bounding-volumes/bounding-volume';\nimport type BoundingSphere from './bounding-volumes/bounding-sphere';\n\n// X, Y, Z Unit vectors\nconst faces = [new Vector3([1, 0, 0]), new Vector3([0, 1, 0]), new Vector3([0, 0, 1])];\n\nconst scratchPlaneCenter = new Vector3();\nconst scratchPlaneNormal = new Vector3();\nconst scratchPlane = new Plane(new Vector3(1.0, 0.0, 0.0), 0.0);\n\n/** A culling volume defined by planes. */\nexport default class CullingVolume {\n  /**\n   * For plane masks (as used in {@link CullingVolume#computeVisibilityWithPlaneMask}), this special value\n   * represents the case where the object bounding volume is entirely outside the culling volume.\n   */\n  static MASK_OUTSIDE = 0xffffffff;\n\n  /**\n   * For plane masks (as used in {@link CullingVolume.prototype.computeVisibilityWithPlaneMask}), this value\n   * represents the case where the object bounding volume is entirely inside the culling volume.\n   */\n  static MASK_INSIDE = 0x00000000;\n\n  /**\n   * For plane masks (as used in {@link CullingVolume.prototype.computeVisibilityWithPlaneMask}), this value\n   * represents the case where the object bounding volume (may) intersect all planes of the culling volume.\n   */\n  static MASK_INDETERMINATE = 0x7fffffff;\n\n  /** Array of clipping planes. */\n  readonly planes: Plane[];\n\n  /**\n   * Create a new `CullingVolume` bounded by an array of clipping planed\n   * @param planes Array of clipping planes.\n   * */\n  constructor(planes: Plane[] = []) {\n    this.planes = planes;\n  }\n\n  /**\n   * Constructs a culling volume from a bounding sphere. Creates six planes that create a box containing the sphere.\n   * The planes are aligned to the x, y, and z axes in world coordinates.\n   */\n  fromBoundingSphere(boundingSphere: BoundingSphere): CullingVolume {\n    this.planes.length = 2 * faces.length;\n\n    const center = boundingSphere.center;\n    const radius = boundingSphere.radius;\n\n    let planeIndex = 0;\n\n    for (const faceNormal of faces) {\n      let plane0 = this.planes[planeIndex];\n      let plane1 = this.planes[planeIndex + 1];\n\n      if (!plane0) {\n        plane0 = this.planes[planeIndex] = new Plane();\n      }\n      if (!plane1) {\n        plane1 = this.planes[planeIndex + 1] = new Plane();\n      }\n\n      const plane0Center = scratchPlaneCenter.copy(faceNormal).scale(-radius).add(center);\n      const plane0Distance = -faceNormal.dot(plane0Center);\n\n      plane0.fromPointNormal(plane0Center, faceNormal);\n\n      const plane1Center = scratchPlaneCenter.copy(faceNormal).scale(radius).add(center);\n\n      const negatedFaceNormal = scratchPlaneNormal.copy(faceNormal).negate();\n\n      const plane1Distance = -negatedFaceNormal.dot(plane1Center);\n\n      plane1.fromPointNormal(plane1Center, negatedFaceNormal);\n\n      planeIndex += 2;\n    }\n\n    return this;\n  }\n\n  /** Determines whether a bounding volume intersects the culling volume. */\n  computeVisibility(boundingVolume: BoundingVolume): number {\n    // const planes = this.planes;\n    let intersect: number = INTERSECTION.INSIDE;\n    for (const plane of this.planes) {\n      const result = boundingVolume.intersectPlane(plane);\n      switch (result) {\n        case INTERSECTION.OUTSIDE:\n          // We are done\n          return INTERSECTION.OUTSIDE;\n\n        case INTERSECTION.INTERSECTING:\n          // If no other intersection is outside, return INTERSECTING\n          intersect = INTERSECTION.INTERSECTING;\n          break;\n\n        default:\n      }\n    }\n\n    return intersect;\n  }\n\n  /**\n   * Determines whether a bounding volume intersects the culling volume.\n   *\n   * @param parentPlaneMask A bit mask from the boundingVolume's parent's check against the same culling\n   *   volume, such that if (planeMask & (1 << planeIndex) === 0), for k < 31, then\n   *   the parent (and therefore this) volume is completely inside plane[planeIndex]\n   *   and that plane check can be skipped.\n   */\n  computeVisibilityWithPlaneMask(boundingVolume: BoundingVolume, parentPlaneMask: number): number {\n    assert(Number.isFinite(parentPlaneMask), 'parentPlaneMask is required.');\n\n    if (\n      parentPlaneMask === CullingVolume.MASK_OUTSIDE ||\n      parentPlaneMask === CullingVolume.MASK_INSIDE\n    ) {\n      // parent is completely outside or completely inside, so this child is as well.\n      return parentPlaneMask;\n    }\n\n    // Start with MASK_INSIDE (all zeros) so that after the loop, the return value can be compared with MASK_INSIDE.\n    // (Because if there are fewer than 31 planes, the upper bits wont be changed.)\n    let mask = CullingVolume.MASK_INSIDE;\n\n    const planes = this.planes;\n    for (let k = 0; k < this.planes.length; ++k) {\n      // For k greater than 31 (since 31 is the maximum number of INSIDE/INTERSECTING bits we can store), skip the optimization.\n      const flag = k < 31 ? 1 << k : 0;\n      if (k < 31 && (parentPlaneMask & flag) === 0) {\n        // boundingVolume is known to be INSIDE this plane.\n        continue;\n      }\n\n      const plane = planes[k];\n      const result = boundingVolume.intersectPlane(plane);\n      if (result === INTERSECTION.OUTSIDE) {\n        return CullingVolume.MASK_OUTSIDE;\n      } else if (result === INTERSECTION.INTERSECTING) {\n        mask |= flag;\n      }\n    }\n\n    return mask;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}