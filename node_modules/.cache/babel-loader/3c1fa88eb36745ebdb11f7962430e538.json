{"ast":null,"code":"import * as React from 'react';\nimport { createElement } from 'react';\nimport { inheritsFrom } from './inherits-from';\nimport { Layer, View } from '@deck.gl/core';\nimport { isComponent } from './evaluate-children';\n\nfunction wrapInView(node) {\n  if (typeof node === 'function') {\n    return createElement(View, {}, node);\n  }\n\n  if (Array.isArray(node)) {\n    return node.map(wrapInView);\n  }\n\n  if (isComponent(node)) {\n    if (node.type === React.Fragment) {\n      return wrapInView(node.props.children);\n    }\n\n    if (inheritsFrom(node.type, View)) {\n      return node;\n    }\n  }\n\n  return node;\n}\n\nexport default function extractJSXLayers(_ref) {\n  let {\n    children,\n    layers = [],\n    views = null\n  } = _ref;\n  const reactChildren = [];\n  const jsxLayers = [];\n  const jsxViews = {};\n  React.Children.forEach(wrapInView(children), reactElement => {\n    if (isComponent(reactElement)) {\n      const ElementType = reactElement.type;\n\n      if (inheritsFrom(ElementType, Layer)) {\n        const layer = createLayer(ElementType, reactElement.props);\n        jsxLayers.push(layer);\n      } else {\n        reactChildren.push(reactElement);\n      }\n\n      if (inheritsFrom(ElementType, View) && ElementType !== View && reactElement.props.id) {\n        const view = new ElementType(reactElement.props);\n        jsxViews[view.id] = view;\n      }\n    } else if (reactElement) {\n      reactChildren.push(reactElement);\n    }\n  });\n\n  if (Object.keys(jsxViews).length > 0) {\n    if (Array.isArray(views)) {\n      views.forEach(view => {\n        jsxViews[view.id] = view;\n      });\n    } else if (views) {\n      jsxViews[views.id] = views;\n    }\n\n    views = Object.values(jsxViews);\n  }\n\n  layers = jsxLayers.length > 0 ? [...jsxLayers, ...layers] : layers;\n  return {\n    layers,\n    children: reactChildren,\n    views\n  };\n}\n\nfunction createLayer(LayerType, reactProps) {\n  const props = {};\n  const defaultProps = LayerType.defaultProps || {};\n\n  for (const key in reactProps) {\n    if (defaultProps[key] !== reactProps[key]) {\n      props[key] = reactProps[key];\n    }\n  }\n\n  return new LayerType(props);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,aAAR,QAA4B,OAA5B;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AACA,SAAQC,KAAR,EAAeC,IAAf,QAA0B,eAA1B;AACA,SAAQC,WAAR,QAA0B,qBAA1B;;AAIA,SAASC,UAAT,CAAoBC,IAApB,EAA4D;EAC1D,IAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;IAI9B,OAAON,aAAa,CAACG,IAAD,EAAO,EAAP,EAAWG,IAAX,CAApB;EACD;;EACD,IAAIC,KAAK,CAACC,OAAND,CAAcD,IAAdC,CAAJ,EAAyB;IACvB,OAAOD,IAAI,CAACG,GAALH,CAASD,UAATC,CAAP;EACD;;EACD,IAAIF,WAAW,CAACE,IAAD,CAAf,EAAuB;IACrB,IAAIA,IAAI,CAACI,IAALJ,KAAcP,KAAK,CAACY,QAAxB,EAAkC;MAChC,OAAON,UAAU,CAACC,IAAI,CAACM,KAALN,CAAWO,QAAZ,CAAjB;IACD;;IACD,IAAIZ,YAAY,CAACK,IAAI,CAACI,IAAN,EAAYP,IAAZ,CAAhB,EAAmC;MACjC,OAAOG,IAAP;IACD;EACF;;EACD,OAAOA,IAAP;AACD;;AAGD,eAAe,SAASQ,gBAAT,OAYb;EAAA,IAZuC;IACvCD,QADuC;IAEvCE,MAAM,GAAG,EAF8B;IAGvCC,KAAK,GAAG;EAH+B,CAYvC;EACA,MAAMC,aAAgC,GAAG,EAAzC;EACA,MAAMC,SAAqB,GAAG,EAA9B;EACA,MAAMC,QAA8B,GAAG,EAAvC;EAGApB,KAAK,CAACqB,QAANrB,CAAesB,OAAftB,CAAuBM,UAAU,CAACQ,QAAD,CAAjCd,EAA6CuB,YAAY,IAAI;IAC3D,IAAIlB,WAAW,CAACkB,YAAD,CAAf,EAA+B;MAE7B,MAAMC,WAAW,GAAGD,YAAY,CAACZ,IAAjC;;MACA,IAAIT,YAAY,CAACsB,WAAD,EAAcrB,KAAd,CAAhB,EAAsC;QACpC,MAAMsB,KAAK,GAAGC,WAAW,CAACF,WAAD,EAAcD,YAAY,CAACV,KAA3B,CAAzB;QACAM,SAAS,CAACQ,IAAVR,CAAeM,KAAfN;MAFF,OAGO;QACLD,aAAa,CAACS,IAAdT,CAAmBK,YAAnBL;MACD;;MAGD,IAAIhB,YAAY,CAACsB,WAAD,EAAcpB,IAAd,CAAZF,IAAmCsB,WAAW,KAAKpB,IAAnDF,IAA2DqB,YAAY,CAACV,KAAbU,CAAmBK,EAAlF,EAAsF;QAEpF,MAAMC,IAAI,GAAG,IAAIL,WAAJ,CAAgBD,YAAY,CAACV,KAA7B,CAAb;QACAO,QAAQ,CAACS,IAAI,CAACD,EAAN,CAARR,GAAoBS,IAApBT;MACD;IAfH,OAgBO,IAAIG,YAAJ,EAAkB;MACvBL,aAAa,CAACS,IAAdT,CAAmBK,YAAnBL;IACD;EAnBH;;EAuBA,IAAIY,MAAM,CAACC,IAAPD,CAAYV,QAAZU,EAAsBE,MAAtBF,GAA+B,CAAnC,EAAsC;IAEpC,IAAItB,KAAK,CAACC,OAAND,CAAcS,KAAdT,CAAJ,EAA0B;MACxBS,KAAK,CAACK,OAANL,CAAcY,IAAI,IAAI;QACpBT,QAAQ,CAACS,IAAI,CAACD,EAAN,CAARR,GAAoBS,IAApBT;MADF;IADF,OAIO,IAAIH,KAAJ,EAAW;MAChBG,QAAQ,CAACH,KAAK,CAACW,EAAP,CAARR,GAAqBH,KAArBG;IACD;;IACDH,KAAK,GAAGa,MAAM,CAACG,MAAPH,CAAcV,QAAdU,CAARb;EACD;;EAGDD,MAAM,GAAGG,SAAS,CAACa,MAAVb,GAAmB,CAAnBA,GAAuB,CAAC,GAAGA,SAAJ,EAAe,GAAGH,MAAlB,CAAvBG,GAAmDH,MAA5DA;EAEA,OAAO;IAACA,MAAD;IAASF,QAAQ,EAAEI,aAAnB;IAAkCD;EAAlC,CAAP;AACD;;AAED,SAASS,WAAT,CAAqBQ,SAArB,EAA8CC,UAA9C,EAAsE;EACpE,MAAMtB,KAAK,GAAG,EAAd;EAGA,MAAMuB,YAAY,GAAGF,SAAS,CAACE,YAAVF,IAA0B,EAA/C;;EACA,KAAK,MAAMG,GAAX,IAAkBF,UAAlB,EAA8B;IAC5B,IAAIC,YAAY,CAACC,GAAD,CAAZD,KAAsBD,UAAU,CAACE,GAAD,CAApC,EAA2C;MACzCxB,KAAK,CAACwB,GAAD,CAALxB,GAAasB,UAAU,CAACE,GAAD,CAAvBxB;IACD;EACF;;EAED,OAAO,IAAIqB,SAAJ,CAAcrB,KAAd,CAAP;AACD","names":["React","createElement","inheritsFrom","Layer","View","isComponent","wrapInView","node","Array","isArray","map","type","Fragment","props","children","extractJSXLayers","layers","views","reactChildren","jsxLayers","jsxViews","Children","forEach","reactElement","ElementType","layer","createLayer","push","id","view","Object","keys","length","values","LayerType","reactProps","defaultProps","key"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@deck.gl\\react\\src\\utils\\extract-jsx-layers.ts"],"sourcesContent":["import * as React from 'react';\nimport {createElement} from 'react';\nimport {inheritsFrom} from './inherits-from';\nimport {Layer, View} from '@deck.gl/core';\nimport {isComponent} from './evaluate-children';\nimport type {LayersList} from '@deck.gl/core';\n\n// recursively wrap render callbacks in `View`\nfunction wrapInView(node: React.ReactNode): React.ReactNode {\n  if (typeof node === 'function') {\n    // React.Children does not traverse functions.\n    // All render callbacks must be protected under a <View>\n    // @ts-expect-error View is not a ReactJSXElement constructor. Only used as a temporary wrapper and will be removed in extractJSXLayers\n    return createElement(View, {}, node);\n  }\n  if (Array.isArray(node)) {\n    return node.map(wrapInView);\n  }\n  if (isComponent(node)) {\n    if (node.type === React.Fragment) {\n      return wrapInView(node.props.children);\n    }\n    if (inheritsFrom(node.type, View)) {\n      return node;\n    }\n  }\n  return node;\n}\n\n// extracts any deck.gl layers masquerading as react elements from props.children\nexport default function extractJSXLayers({\n  children,\n  layers = [],\n  views = null\n}: {\n  children?: React.ReactNode;\n  layers?: LayersList;\n  views?: View | View[] | null;\n}): {\n  children: React.ReactNode[];\n  layers: LayersList;\n  views: View | View[] | null;\n} {\n  const reactChildren: React.ReactNode[] = []; // extract real react elements (i.e. not deck.gl layers)\n  const jsxLayers: LayersList = []; // extracted layer from react children, will add to deck.gl layer array\n  const jsxViews: Record<string, View> = {};\n\n  // React.children\n  React.Children.forEach(wrapInView(children), reactElement => {\n    if (isComponent(reactElement)) {\n      // For some reason Children.forEach doesn't filter out `null`s\n      const ElementType = reactElement.type;\n      if (inheritsFrom(ElementType, Layer)) {\n        const layer = createLayer(ElementType, reactElement.props);\n        jsxLayers.push(layer);\n      } else {\n        reactChildren.push(reactElement);\n      }\n\n      // empty id => default view\n      if (inheritsFrom(ElementType, View) && ElementType !== View && reactElement.props.id) {\n        // @ts-ignore Cannot instantiate an abstract class (View)\n        const view = new ElementType(reactElement.props);\n        jsxViews[view.id] = view;\n      }\n    } else if (reactElement) {\n      reactChildren.push(reactElement);\n    }\n  });\n\n  // Avoid modifying views if no JSX views were found\n  if (Object.keys(jsxViews).length > 0) {\n    // If a view is specified in both views prop and JSX, use the one in views\n    if (Array.isArray(views)) {\n      views.forEach(view => {\n        jsxViews[view.id] = view;\n      });\n    } else if (views) {\n      jsxViews[views.id] = views;\n    }\n    views = Object.values(jsxViews);\n  }\n\n  // Avoid modifying layers array if no JSX layers were found\n  layers = jsxLayers.length > 0 ? [...jsxLayers, ...layers] : layers;\n\n  return {layers, children: reactChildren, views};\n}\n\nfunction createLayer(LayerType: typeof Layer, reactProps: any): Layer {\n  const props = {};\n  // Layer.defaultProps is treated as ReactElement.defaultProps and merged into react props\n  // Remove them\n  const defaultProps = LayerType.defaultProps || {};\n  for (const key in reactProps) {\n    if (defaultProps[key] !== reactProps[key]) {\n      props[key] = reactProps[key];\n    }\n  }\n  // @ts-ignore Cannot instantiate an abstract class (Layer)\n  return new LayerType(props);\n}\n"]},"metadata":{},"sourceType":"module"}