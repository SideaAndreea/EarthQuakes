{"ast":null,"code":"import { project, fp64LowPart } from '@deck.gl/core';\nconst patternVs = \"\\n#ifdef NON_INSTANCED_MODEL\\n  #define FILL_PATTERN_FRAME_ATTRIB fillPatternFrames\\n  #define FILL_PATTERN_SCALE_ATTRIB fillPatternScales\\n  #define FILL_PATTERN_OFFSET_ATTRIB fillPatternOffsets\\n#else\\n  #define FILL_PATTERN_FRAME_ATTRIB instanceFillPatternFrames\\n  #define FILL_PATTERN_SCALE_ATTRIB instanceFillPatternScales\\n  #define FILL_PATTERN_OFFSET_ATTRIB instanceFillPatternOffsets\\n#endif\\n\\nattribute vec4 FILL_PATTERN_FRAME_ATTRIB;\\nattribute float FILL_PATTERN_SCALE_ATTRIB;\\nattribute vec2 FILL_PATTERN_OFFSET_ATTRIB;\\n\\nuniform bool fill_patternEnabled;\\nuniform vec2 fill_patternTextureSize;\\n\\nvarying vec2 fill_uv;\\nvarying vec4 fill_patternBounds;\\nvarying vec3 fill_patternPlacement;\\n\";\nconst patternFs = \"\\nuniform bool fill_patternEnabled;\\nuniform bool fill_patternMask;\\nuniform sampler2D fill_patternTexture;\\nuniform vec2 fill_uvCoordinateOrigin;\\nuniform vec2 fill_uvCoordinateOrigin64Low;\\n\\nvarying vec4 fill_patternBounds;\\nvarying vec3 fill_patternPlacement;\\nvarying vec2 fill_uv;\\n\\nconst float FILL_UV_SCALE = 512.0 / 40000000.0;\\n\";\nconst inject = {\n  'vs:DECKGL_FILTER_GL_POSITION': \"\\n    fill_uv = geometry.position.xy;\\n  \",\n  'vs:DECKGL_FILTER_COLOR': \"\\n    if (fill_patternEnabled) {\\n      fill_patternBounds = FILL_PATTERN_FRAME_ATTRIB / vec4(fill_patternTextureSize, fill_patternTextureSize);\\n      fill_patternPlacement.xy = FILL_PATTERN_OFFSET_ATTRIB;\\n      fill_patternPlacement.z = FILL_PATTERN_SCALE_ATTRIB * FILL_PATTERN_FRAME_ATTRIB.w;\\n    }\\n  \",\n  'fs:DECKGL_FILTER_COLOR': \"\\n    if (fill_patternEnabled) {\\n      float scale = FILL_UV_SCALE * fill_patternPlacement.z;\\n      vec2 patternUV = mod(mod(fill_uvCoordinateOrigin, scale) + fill_uvCoordinateOrigin64Low + fill_uv, scale) / scale;\\n      patternUV = mod(fill_patternPlacement.xy + patternUV, 1.0);\\n\\n      vec2 texCoords = fill_patternBounds.xy + fill_patternBounds.zw * patternUV;\\n\\n      vec4 patternColor = texture2D(fill_patternTexture, texCoords);\\n      color.a *= patternColor.a;\\n      if (!fill_patternMask) {\\n        color.rgb = patternColor.rgb;\\n      }\\n    }\\n  \"\n};\n\nfunction getPatternUniforms(opts, uniforms) {\n  if (!opts) {\n    return {};\n  }\n\n  if ('fillPatternTexture' in opts) {\n    const {\n      fillPatternTexture\n    } = opts;\n    return {\n      fill_patternTexture: fillPatternTexture,\n      fill_patternTextureSize: [fillPatternTexture.width, fillPatternTexture.height]\n    };\n  }\n\n  if ('viewport' in opts) {\n    const {\n      viewport,\n      fillPatternMask = true,\n      fillPatternEnabled = true\n    } = opts;\n    const {\n      project_uCoordinateOrigin\n    } = uniforms;\n    const coordinateOriginCommon = viewport.projectPosition(project_uCoordinateOrigin);\n    const coordinateOriginCommon64Low = [fp64LowPart(coordinateOriginCommon[0]), fp64LowPart(coordinateOriginCommon[1])];\n    return {\n      fill_uvCoordinateOrigin: coordinateOriginCommon.slice(0, 2),\n      fill_uvCoordinateOrigin64Low: coordinateOriginCommon64Low,\n      fill_patternMask: fillPatternMask,\n      fill_patternEnabled: fillPatternEnabled\n    };\n  }\n\n  return {};\n}\n\nexport const patternShaders = {\n  name: 'fill-pattern',\n  vs: patternVs,\n  fs: patternFs,\n  inject,\n  dependencies: [project],\n  getUniforms: getPatternUniforms\n};","map":{"version":3,"mappings":"AAAA,SAAQA,OAAR,EAAiBC,WAAjB,QAAmC,eAAnC;AAQA,MAAMC,SAAS,ysBAAf;AAuBA,MAAMC,SAAS,wVAAf;AAcA,MAAMC,MAAM,GAAG;EACb,2EADa;EAKb,+UALa;EAab;AAba,CAAf;;AAyCA,SAASC,kBAAT,CACEC,IADF,EAEEC,QAFF,EAGuB;EACrB,IAAI,CAACD,IAAL,EAAW;IACT,OAAO,EAAP;EACD;;EACD,IAAI,wBAAwBA,IAA5B,EAAkC;IAChC,MAAM;MAACE;IAAD,IAAuBF,IAA7B;IACA,OAAO;MACLG,mBAAmB,EAAED,kBADhB;MAELE,uBAAuB,EAAE,CAACF,kBAAkB,CAACG,KAApB,EAA2BH,kBAAkB,CAACI,MAA9C;IAFpB,CAAP;EAID;;EACD,IAAI,cAAcN,IAAlB,EAAwB;IACtB,MAAM;MAACO,QAAD;MAAWC,eAAe,GAAG,IAA7B;MAAmCC,kBAAkB,GAAG;IAAxD,IAAgET,IAAtE;IACA,MAAM;MAACU;IAAD,IAA8BT,QAApC;IAEA,MAAMU,sBAAsB,GAAGJ,QAAQ,CAACK,eAATL,CAAyBG,yBAAzBH,CAA/B;IACA,MAAMM,2BAA2B,GAAG,CAClClB,WAAW,CAACgB,sBAAsB,CAAC,CAAD,CAAvB,CADuB,EAElChB,WAAW,CAACgB,sBAAsB,CAAC,CAAD,CAAvB,CAFuB,CAApC;IAKA,OAAO;MACLG,uBAAuB,EAAEH,sBAAsB,CAACI,KAAvBJ,CAA6B,CAA7BA,EAAgC,CAAhCA,CADpB;MAELK,4BAA4B,EAAEH,2BAFzB;MAGLI,gBAAgB,EAAET,eAHb;MAILU,mBAAmB,EAAET;IAJhB,CAAP;EAMD;;EACD,OAAO,EAAP;AACD;;AAED,OAAO,MAAMU,cAAqD,GAAG;EACnEC,IAAI,EAAE,cAD6D;EAEnEC,EAAE,EAAEzB,SAF+D;EAGnE0B,EAAE,EAAEzB,SAH+D;EAInEC,MAJmE;EAKnEyB,YAAY,EAAE,CAAC7B,OAAD,CALqD;EAMnE8B,WAAW,EAAEzB;AANsD,CAA9D","names":["project","fp64LowPart","patternVs","patternFs","inject","getPatternUniforms","opts","uniforms","fillPatternTexture","fill_patternTexture","fill_patternTextureSize","width","height","viewport","fillPatternMask","fillPatternEnabled","project_uCoordinateOrigin","coordinateOriginCommon","projectPosition","coordinateOriginCommon64Low","fill_uvCoordinateOrigin","slice","fill_uvCoordinateOrigin64Low","fill_patternMask","fill_patternEnabled","patternShaders","name","vs","fs","dependencies","getUniforms"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplica»õii\\earthquakes\\node_modules\\@deck.gl\\extensions\\src\\fill-style\\shaders.glsl.ts"],"sourcesContent":["import {project, fp64LowPart} from '@deck.gl/core';\nimport type {Viewport, _ShaderModule as ShaderModule, ProjectUniforms} from '@deck.gl/core';\n\nimport type {Texture2D} from '@luma.gl/webgl';\n\n/*\n * fill pattern shader module\n */\nconst patternVs = `\n#ifdef NON_INSTANCED_MODEL\n  #define FILL_PATTERN_FRAME_ATTRIB fillPatternFrames\n  #define FILL_PATTERN_SCALE_ATTRIB fillPatternScales\n  #define FILL_PATTERN_OFFSET_ATTRIB fillPatternOffsets\n#else\n  #define FILL_PATTERN_FRAME_ATTRIB instanceFillPatternFrames\n  #define FILL_PATTERN_SCALE_ATTRIB instanceFillPatternScales\n  #define FILL_PATTERN_OFFSET_ATTRIB instanceFillPatternOffsets\n#endif\n\nattribute vec4 FILL_PATTERN_FRAME_ATTRIB;\nattribute float FILL_PATTERN_SCALE_ATTRIB;\nattribute vec2 FILL_PATTERN_OFFSET_ATTRIB;\n\nuniform bool fill_patternEnabled;\nuniform vec2 fill_patternTextureSize;\n\nvarying vec2 fill_uv;\nvarying vec4 fill_patternBounds;\nvarying vec3 fill_patternPlacement;\n`;\n\nconst patternFs = `\nuniform bool fill_patternEnabled;\nuniform bool fill_patternMask;\nuniform sampler2D fill_patternTexture;\nuniform vec2 fill_uvCoordinateOrigin;\nuniform vec2 fill_uvCoordinateOrigin64Low;\n\nvarying vec4 fill_patternBounds;\nvarying vec3 fill_patternPlacement;\nvarying vec2 fill_uv;\n\nconst float FILL_UV_SCALE = 512.0 / 40000000.0;\n`;\n\nconst inject = {\n  'vs:DECKGL_FILTER_GL_POSITION': `\n    fill_uv = geometry.position.xy;\n  `,\n\n  'vs:DECKGL_FILTER_COLOR': `\n    if (fill_patternEnabled) {\n      fill_patternBounds = FILL_PATTERN_FRAME_ATTRIB / vec4(fill_patternTextureSize, fill_patternTextureSize);\n      fill_patternPlacement.xy = FILL_PATTERN_OFFSET_ATTRIB;\n      fill_patternPlacement.z = FILL_PATTERN_SCALE_ATTRIB * FILL_PATTERN_FRAME_ATTRIB.w;\n    }\n  `,\n\n  'fs:DECKGL_FILTER_COLOR': `\n    if (fill_patternEnabled) {\n      float scale = FILL_UV_SCALE * fill_patternPlacement.z;\n      vec2 patternUV = mod(mod(fill_uvCoordinateOrigin, scale) + fill_uvCoordinateOrigin64Low + fill_uv, scale) / scale;\n      patternUV = mod(fill_patternPlacement.xy + patternUV, 1.0);\n\n      vec2 texCoords = fill_patternBounds.xy + fill_patternBounds.zw * patternUV;\n\n      vec4 patternColor = texture2D(fill_patternTexture, texCoords);\n      color.a *= patternColor.a;\n      if (!fill_patternMask) {\n        color.rgb = patternColor.rgb;\n      }\n    }\n  `\n};\n\ntype FillStyleModuleSettings =\n  | {\n      viewport: Viewport;\n      fillPatternEnabled?: boolean;\n      fillPatternMask?: boolean;\n    }\n  | {\n      fillPatternTexture: Texture2D;\n    };\n\n/* eslint-disable camelcase */\nfunction getPatternUniforms(\n  opts: FillStyleModuleSettings | {},\n  uniforms: Record<string, any>\n): Record<string, any> {\n  if (!opts) {\n    return {};\n  }\n  if ('fillPatternTexture' in opts) {\n    const {fillPatternTexture} = opts;\n    return {\n      fill_patternTexture: fillPatternTexture,\n      fill_patternTextureSize: [fillPatternTexture.width, fillPatternTexture.height]\n    };\n  }\n  if ('viewport' in opts) {\n    const {viewport, fillPatternMask = true, fillPatternEnabled = true} = opts;\n    const {project_uCoordinateOrigin} = uniforms as ProjectUniforms;\n\n    const coordinateOriginCommon = viewport.projectPosition(project_uCoordinateOrigin);\n    const coordinateOriginCommon64Low = [\n      fp64LowPart(coordinateOriginCommon[0]),\n      fp64LowPart(coordinateOriginCommon[1])\n    ];\n\n    return {\n      fill_uvCoordinateOrigin: coordinateOriginCommon.slice(0, 2),\n      fill_uvCoordinateOrigin64Low: coordinateOriginCommon64Low,\n      fill_patternMask: fillPatternMask,\n      fill_patternEnabled: fillPatternEnabled\n    };\n  }\n  return {};\n}\n\nexport const patternShaders: ShaderModule<FillStyleModuleSettings> = {\n  name: 'fill-pattern',\n  vs: patternVs,\n  fs: patternFs,\n  inject,\n  dependencies: [project],\n  getUniforms: getPatternUniforms\n};\n"]},"metadata":{},"sourceType":"module"}