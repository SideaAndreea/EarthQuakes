{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Attribute from './attribute';\nimport log from '../../utils/log';\nimport debug from '../../debug';\nimport AttributeTransitionManager from './attribute-transition-manager';\nconst TRACE_INVALIDATE = 'attributeManager.invalidate';\nconst TRACE_UPDATE_START = 'attributeManager.updateStart';\nconst TRACE_UPDATE_END = 'attributeManager.updateEnd';\nconst TRACE_ATTRIBUTE_UPDATE_START = 'attribute.updateStart';\nconst TRACE_ATTRIBUTE_ALLOCATE = 'attribute.allocate';\nconst TRACE_ATTRIBUTE_UPDATE_END = 'attribute.updateEnd';\nexport default class AttributeManager {\n  constructor(gl) {\n    let {\n      id = 'attribute-manager',\n      stats,\n      timeline\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"gl\", void 0);\n\n    _defineProperty(this, \"attributes\", void 0);\n\n    _defineProperty(this, \"updateTriggers\", void 0);\n\n    _defineProperty(this, \"needsRedraw\", void 0);\n\n    _defineProperty(this, \"userData\", void 0);\n\n    _defineProperty(this, \"stats\", void 0);\n\n    _defineProperty(this, \"attributeTransitionManager\", void 0);\n\n    this.id = id;\n    this.gl = gl;\n    this.attributes = {};\n    this.updateTriggers = {};\n    this.needsRedraw = true;\n    this.userData = {};\n    this.stats = stats;\n    this.attributeTransitionManager = new AttributeTransitionManager(gl, {\n      id: \"\".concat(id, \"-transitions\"),\n      timeline\n    });\n    Object.seal(this);\n  }\n\n  finalize() {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].delete();\n    }\n\n    this.attributeTransitionManager.finalize();\n  }\n\n  getNeedsRedraw() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      clearRedrawFlags: false\n    };\n    const redraw = this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !opts.clearRedrawFlags;\n    return redraw && this.id;\n  }\n\n  setNeedsRedraw() {\n    this.needsRedraw = true;\n  }\n\n  add(attributes) {\n    this._add(attributes);\n  }\n\n  addInstanced(attributes) {\n    this._add(attributes, {\n      instanced: 1\n    });\n  }\n\n  remove(attributeNameArray) {\n    for (const name of attributeNameArray) {\n      if (this.attributes[name] !== undefined) {\n        this.attributes[name].delete();\n        delete this.attributes[name];\n      }\n    }\n  }\n\n  invalidate(triggerName, dataRange) {\n    const invalidatedAttributes = this._invalidateTrigger(triggerName, dataRange);\n\n    debug(TRACE_INVALIDATE, this, triggerName, invalidatedAttributes);\n  }\n\n  invalidateAll(dataRange) {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].setNeedsUpdate(attributeName, dataRange);\n    }\n\n    debug(TRACE_INVALIDATE, this, 'all');\n  }\n\n  update(_ref) {\n    let {\n      data,\n      numInstances,\n      startIndices = null,\n      transitions,\n      props = {},\n      buffers = {},\n      context = {}\n    } = _ref;\n    let updated = false;\n    debug(TRACE_UPDATE_START, this);\n\n    if (this.stats) {\n      this.stats.get('Update Attributes').timeStart();\n    }\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      const accessorName = attribute.settings.accessor;\n      attribute.startIndices = startIndices;\n      attribute.numInstances = numInstances;\n\n      if (props[attributeName]) {\n        log.removed(\"props.\".concat(attributeName), \"data.attributes.\".concat(attributeName))();\n      }\n\n      if (attribute.setExternalBuffer(buffers[attributeName])) {} else if (attribute.setBinaryValue(typeof accessorName === 'string' ? buffers[accessorName] : undefined, data.startIndices)) {} else if (typeof accessorName === 'string' && !buffers[accessorName] && attribute.setConstantValue(props[accessorName])) {} else if (attribute.needsUpdate()) {\n        updated = true;\n\n        this._updateAttribute({\n          attribute,\n          numInstances,\n          data,\n          props,\n          context\n        });\n      }\n\n      this.needsRedraw = this.needsRedraw || attribute.needsRedraw();\n    }\n\n    if (updated) {\n      debug(TRACE_UPDATE_END, this, numInstances);\n    }\n\n    if (this.stats) {\n      this.stats.get('Update Attributes').timeEnd();\n    }\n\n    this.attributeTransitionManager.update({\n      attributes: this.attributes,\n      numInstances,\n      transitions\n    });\n  }\n\n  updateTransition() {\n    const {\n      attributeTransitionManager\n    } = this;\n    const transitionUpdated = attributeTransitionManager.run();\n    this.needsRedraw = this.needsRedraw || transitionUpdated;\n    return transitionUpdated;\n  }\n\n  getAttributes() {\n    return this.attributes;\n  }\n\n  getChangedAttributes() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      clearChangedFlags: false\n    };\n    const {\n      attributes,\n      attributeTransitionManager\n    } = this;\n    const changedAttributes = { ...attributeTransitionManager.getAttributes()\n    };\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n\n      if (attribute.needsRedraw(opts) && !attributeTransitionManager.hasAttribute(attributeName)) {\n        changedAttributes[attributeName] = attribute;\n      }\n    }\n\n    return changedAttributes;\n  }\n\n  getShaderAttributes(attributes) {\n    let excludeAttributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!attributes) {\n      attributes = this.getAttributes();\n    }\n\n    const shaderAttributes = {};\n\n    for (const attributeName in attributes) {\n      if (!excludeAttributes[attributeName]) {\n        Object.assign(shaderAttributes, attributes[attributeName].getShaderAttributes());\n      }\n    }\n\n    return shaderAttributes;\n  }\n\n  _add(attributes) {\n    let extraProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      this.attributes[attributeName] = this._createAttribute(attributeName, attribute, extraProps);\n    }\n\n    this._mapUpdateTriggersToAttributes();\n  }\n\n  _createAttribute(name, attribute, extraProps) {\n    const props = { ...attribute,\n      id: name,\n      size: attribute.isIndexed && 1 || attribute.size || 1,\n      divisor: extraProps.instanced ? 1 : attribute.divisor || 0\n    };\n    return new Attribute(this.gl, props);\n  }\n\n  _mapUpdateTriggersToAttributes() {\n    const triggers = {};\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      attribute.getUpdateTriggers().forEach(triggerName => {\n        if (!triggers[triggerName]) {\n          triggers[triggerName] = [];\n        }\n\n        triggers[triggerName].push(attributeName);\n      });\n    }\n\n    this.updateTriggers = triggers;\n  }\n\n  _invalidateTrigger(triggerName, dataRange) {\n    const {\n      attributes,\n      updateTriggers\n    } = this;\n    const invalidatedAttributes = updateTriggers[triggerName];\n\n    if (invalidatedAttributes) {\n      invalidatedAttributes.forEach(name => {\n        const attribute = attributes[name];\n\n        if (attribute) {\n          attribute.setNeedsUpdate(attribute.id, dataRange);\n        }\n      });\n    }\n\n    return invalidatedAttributes;\n  }\n\n  _updateAttribute(opts) {\n    const {\n      attribute,\n      numInstances\n    } = opts;\n    debug(TRACE_ATTRIBUTE_UPDATE_START, attribute);\n\n    if (attribute.constant) {\n      attribute.setConstantValue(attribute.value);\n      return;\n    }\n\n    if (attribute.allocate(numInstances)) {\n      debug(TRACE_ATTRIBUTE_ALLOCATE, attribute, numInstances);\n    }\n\n    const updated = attribute.updateBuffer(opts);\n\n    if (updated) {\n      this.needsRedraw = true;\n      debug(TRACE_ATTRIBUTE_UPDATE_END, attribute, numInstances);\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Attribute","log","debug","AttributeTransitionManager","TRACE_INVALIDATE","TRACE_UPDATE_START","TRACE_UPDATE_END","TRACE_ATTRIBUTE_UPDATE_START","TRACE_ATTRIBUTE_ALLOCATE","TRACE_ATTRIBUTE_UPDATE_END","AttributeManager","constructor","gl","id","stats","timeline","_defineProperty","attributes","updateTriggers","needsRedraw","userData","attributeTransitionManager","Object","seal","finalize","attributeName","delete","getNeedsRedraw","opts","clearRedrawFlags","redraw","setNeedsRedraw","add","_add","addInstanced","instanced","remove","attributeNameArray","name","undefined","invalidate","triggerName","dataRange","invalidatedAttributes","_invalidateTrigger","invalidateAll","setNeedsUpdate","update","data","numInstances","startIndices","transitions","props","buffers","context","updated","get","timeStart","attribute","accessorName","settings","accessor","removed","setExternalBuffer","setBinaryValue","setConstantValue","needsUpdate","_updateAttribute","timeEnd","updateTransition","transitionUpdated","run","getAttributes","getChangedAttributes","clearChangedFlags","changedAttributes","hasAttribute","getShaderAttributes","excludeAttributes","shaderAttributes","assign","extraProps","_createAttribute","_mapUpdateTriggersToAttributes","size","isIndexed","divisor","triggers","getUpdateTriggers","forEach","push","constant","value","allocate","updateBuffer"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@deck.gl\\core\\src\\lib\\attribute\\attribute-manager.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable guard-for-in */\nimport Attribute, {AttributeOptions} from './attribute';\nimport {IShaderAttribute} from './shader-attribute';\nimport log from '../../utils/log';\nimport debug from '../../debug';\nimport {NumericArray} from '../../types/types';\n\nimport AttributeTransitionManager from './attribute-transition-manager';\n\nimport type {Stat} from 'probe.gl';\nimport type {Timeline} from '@luma.gl/engine';\n\nconst TRACE_INVALIDATE = 'attributeManager.invalidate';\nconst TRACE_UPDATE_START = 'attributeManager.updateStart';\nconst TRACE_UPDATE_END = 'attributeManager.updateEnd';\nconst TRACE_ATTRIBUTE_UPDATE_START = 'attribute.updateStart';\nconst TRACE_ATTRIBUTE_ALLOCATE = 'attribute.allocate';\nconst TRACE_ATTRIBUTE_UPDATE_END = 'attribute.updateEnd';\n\nexport default class AttributeManager {\n  /**\n   * @classdesc\n   * Automated attribute generation and management. Suitable when a set of\n   * vertex shader attributes are generated by iteration over a data array,\n   * and updates to these attributes are needed either when the data itself\n   * changes, or when other data relevant to the calculations change.\n   *\n   * - First the application registers descriptions of its dynamic vertex\n   *   attributes using AttributeManager.add().\n   * - Then, when any change that affects attributes is detected by the\n   *   application, the app will call AttributeManager.invalidate().\n   * - Finally before it renders, it calls AttributeManager.update() to\n   *   ensure that attributes are automatically rebuilt if anything has been\n   *   invalidated.\n   *\n   * The application provided update functions describe how attributes\n   * should be updated from a data array and are expected to traverse\n   * that data array (or iterable) and fill in the attribute's typed array.\n   *\n   * Note that the attribute manager intentionally does not do advanced\n   * change detection, but instead makes it easy to build such detection\n   * by offering the ability to \"invalidate\" each attribute separately.\n   */\n  id: string;\n  gl: WebGLRenderingContext;\n  attributes: Record<string, Attribute>;\n  updateTriggers: {[name: string]: string[]};\n  needsRedraw: string | boolean;\n  userData: any;\n\n  private stats?: Stat;\n  private attributeTransitionManager: AttributeTransitionManager;\n\n  constructor(\n    gl: WebGLRenderingContext,\n    {\n      id = 'attribute-manager',\n      stats,\n      timeline\n    }: {\n      id?: string;\n      stats?: Stat;\n      timeline?: Timeline;\n    } = {}\n  ) {\n    this.id = id;\n    this.gl = gl;\n\n    this.attributes = {};\n\n    this.updateTriggers = {};\n    this.needsRedraw = true;\n\n    this.userData = {};\n    this.stats = stats;\n\n    this.attributeTransitionManager = new AttributeTransitionManager(gl, {\n      id: `${id}-transitions`,\n      timeline\n    });\n\n    // For debugging sanity, prevent uninitialized members\n    Object.seal(this);\n  }\n\n  finalize() {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].delete();\n    }\n    this.attributeTransitionManager.finalize();\n  }\n\n  // Returns the redraw flag, optionally clearing it.\n  // Redraw flag will be set if any attributes attributes changed since\n  // flag was last cleared.\n  //\n  // @param {String} [clearRedrawFlags=false] - whether to clear the flag\n  // @return {false|String} - reason a redraw is needed.\n  getNeedsRedraw(opts: {clearRedrawFlags?: boolean} = {clearRedrawFlags: false}): string | false {\n    const redraw = this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !opts.clearRedrawFlags;\n    return redraw && this.id;\n  }\n\n  // Sets the redraw flag.\n  // @param {Boolean} redraw=true\n  setNeedsRedraw() {\n    this.needsRedraw = true;\n  }\n\n  // Adds attributes\n  add(attributes: {[id: string]: AttributeOptions}) {\n    this._add(attributes);\n  }\n\n  // Adds attributes\n  addInstanced(attributes: {[id: string]: AttributeOptions}) {\n    this._add(attributes, {instanced: 1});\n  }\n\n  /**\n   * Removes attributes\n   * Takes an array of attribute names and delete them from\n   * the attribute map if they exists\n   *\n   * @example\n   * attributeManager.remove(['position']);\n   *\n   * @param {Object} attributeNameArray - attribute name array (see above)\n   */\n  remove(attributeNameArray: string[]) {\n    for (const name of attributeNameArray) {\n      if (this.attributes[name] !== undefined) {\n        this.attributes[name].delete();\n        delete this.attributes[name];\n      }\n    }\n  }\n\n  // Marks an attribute for update\n  invalidate(triggerName: string, dataRange?: {startRow?: number; endRow?: number}) {\n    const invalidatedAttributes = this._invalidateTrigger(triggerName, dataRange);\n    // For performance tuning\n    debug(TRACE_INVALIDATE, this, triggerName, invalidatedAttributes);\n  }\n\n  invalidateAll(dataRange?: {startRow?: number; endRow?: number}) {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].setNeedsUpdate(attributeName, dataRange);\n    }\n    // For performance tuning\n    debug(TRACE_INVALIDATE, this, 'all');\n  }\n\n  // Ensure all attribute buffers are updated from props or data.\n  update({\n    data,\n    numInstances,\n    startIndices = null,\n    transitions,\n    props = {},\n    buffers = {},\n    context = {}\n  }: {\n    data: any;\n    numInstances: number;\n    startIndices?: NumericArray | null;\n    transitions: any;\n    props: any;\n    buffers: any;\n    context: any;\n  }) {\n    // keep track of whether some attributes are updated\n    let updated = false;\n\n    debug(TRACE_UPDATE_START, this);\n    if (this.stats) {\n      this.stats.get('Update Attributes').timeStart();\n    }\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      const accessorName = attribute.settings.accessor;\n      attribute.startIndices = startIndices;\n      attribute.numInstances = numInstances;\n\n      if (props[attributeName]) {\n        log.removed(`props.${attributeName}`, `data.attributes.${attributeName}`)();\n      }\n\n      if (attribute.setExternalBuffer(buffers[attributeName])) {\n        // Step 1: try update attribute directly from external buffers\n      } else if (\n        attribute.setBinaryValue(\n          typeof accessorName === 'string' ? buffers[accessorName] : undefined,\n          data.startIndices\n        )\n      ) {\n        // Step 2: try set packed value from external typed array\n      } else if (\n        typeof accessorName === 'string' &&\n        !buffers[accessorName] &&\n        attribute.setConstantValue(props[accessorName])\n      ) {\n        // Step 3: try set constant value from props\n        // Note: if buffers[accessorName] is supplied, ignore props[accessorName]\n        // This may happen when setBinaryValue falls through to use the auto updater\n      } else if (attribute.needsUpdate()) {\n        // Step 4: update via updater callback\n        updated = true;\n        this._updateAttribute({\n          attribute,\n          numInstances,\n          data,\n          props,\n          context\n        });\n      }\n\n      this.needsRedraw = this.needsRedraw || attribute.needsRedraw();\n    }\n\n    if (updated) {\n      // Only initiate alloc/update (and logging) if actually needed\n      debug(TRACE_UPDATE_END, this, numInstances);\n    }\n\n    if (this.stats) {\n      this.stats.get('Update Attributes').timeEnd();\n    }\n\n    this.attributeTransitionManager.update({\n      attributes: this.attributes,\n      numInstances,\n      transitions\n    });\n  }\n\n  // Update attribute transition to the current timestamp\n  // Returns `true` if any transition is in progress\n  updateTransition() {\n    const {attributeTransitionManager} = this;\n    const transitionUpdated = attributeTransitionManager.run();\n    this.needsRedraw = this.needsRedraw || transitionUpdated;\n    return transitionUpdated;\n  }\n\n  /**\n   * Returns all attribute descriptors\n   * Note: Format matches luma.gl Model/Program.setAttributes()\n   * @return {Object} attributes - descriptors\n   */\n  getAttributes(): {[id: string]: Attribute} {\n    return this.attributes;\n  }\n\n  /**\n   * Returns changed attribute descriptors\n   * This indicates which WebGLBuffers need to be updated\n   * @return {Object} attributes - descriptors\n   */\n  getChangedAttributes(opts: {clearChangedFlags?: boolean} = {clearChangedFlags: false}): {\n    [id: string]: Attribute;\n  } {\n    const {attributes, attributeTransitionManager} = this;\n\n    const changedAttributes = {...attributeTransitionManager.getAttributes()};\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      if (attribute.needsRedraw(opts) && !attributeTransitionManager.hasAttribute(attributeName)) {\n        changedAttributes[attributeName] = attribute;\n      }\n    }\n\n    return changedAttributes;\n  }\n\n  // Returns shader attributes\n  getShaderAttributes(\n    attributes?: {[id: string]: Attribute},\n    excludeAttributes: Record<string, boolean> = {}\n  ): {[id: string]: IShaderAttribute} {\n    if (!attributes) {\n      attributes = this.getAttributes();\n    }\n    const shaderAttributes = {};\n    for (const attributeName in attributes) {\n      if (!excludeAttributes[attributeName]) {\n        Object.assign(shaderAttributes, attributes[attributeName].getShaderAttributes());\n      }\n    }\n    return shaderAttributes;\n  }\n\n  // PRIVATE METHODS\n\n  // Used to register an attribute\n  private _add(attributes: {[id: string]: AttributeOptions}, extraProps: any = {}) {\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n\n      // Initialize the attribute descriptor, with WebGL and metadata fields\n      this.attributes[attributeName] = this._createAttribute(attributeName, attribute, extraProps);\n    }\n\n    this._mapUpdateTriggersToAttributes();\n  }\n  /* eslint-enable max-statements */\n\n  private _createAttribute(name: string, attribute: AttributeOptions, extraProps: any) {\n    // For expected default values see:\n    // https://github.com/visgl/luma.gl/blob/1affe21352e289eeaccee2a876865138858a765c/modules/webgl/src/classes/accessor.js#L5-L13\n    // and https://deck.gl/docs/api-reference/core/attribute-manager#add\n    const props: AttributeOptions = {\n      ...attribute,\n      id: name,\n      size: (attribute.isIndexed && 1) || attribute.size || 1,\n      divisor: extraProps.instanced ? 1 : attribute.divisor || 0\n    };\n\n    return new Attribute(this.gl, props);\n  }\n\n  // build updateTrigger name to attribute name mapping\n  private _mapUpdateTriggersToAttributes() {\n    const triggers: {[name: string]: string[]} = {};\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      attribute.getUpdateTriggers().forEach(triggerName => {\n        if (!triggers[triggerName]) {\n          triggers[triggerName] = [];\n        }\n        triggers[triggerName].push(attributeName);\n      });\n    }\n\n    this.updateTriggers = triggers;\n  }\n\n  private _invalidateTrigger(\n    triggerName: string,\n    dataRange?: {startRow?: number; endRow?: number}\n  ): string[] {\n    const {attributes, updateTriggers} = this;\n    const invalidatedAttributes = updateTriggers[triggerName];\n\n    if (invalidatedAttributes) {\n      invalidatedAttributes.forEach(name => {\n        const attribute = attributes[name];\n        if (attribute) {\n          attribute.setNeedsUpdate(attribute.id, dataRange);\n        }\n      });\n    }\n    return invalidatedAttributes;\n  }\n\n  private _updateAttribute(opts: {\n    attribute: Attribute;\n    numInstances: number;\n    data: any;\n    props: any;\n    context: any;\n  }) {\n    const {attribute, numInstances} = opts;\n    debug(TRACE_ATTRIBUTE_UPDATE_START, attribute);\n\n    if (attribute.constant) {\n      // The attribute is flagged as constant outside of an update cycle\n      // Skip allocation and updater call\n      attribute.setConstantValue(attribute.value as NumericArray);\n      return;\n    }\n\n    if (attribute.allocate(numInstances)) {\n      debug(TRACE_ATTRIBUTE_ALLOCATE, attribute, numInstances);\n    }\n\n    // Calls update on any buffers that need update\n    const updated = attribute.updateBuffer(opts);\n    if (updated) {\n      this.needsRedraw = true;\n      debug(TRACE_ATTRIBUTE_UPDATE_END, attribute, numInstances);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}