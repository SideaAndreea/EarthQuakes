{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport PathTesselator from './path-tesselator';\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  widthUnits: 'meters',\n  widthScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  widthMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  jointRounded: false,\n  capRounded: false,\n  miterLimit: {\n    type: 'number',\n    min: 0,\n    value: 4\n  },\n  billboard: false,\n  _pathType: null,\n  getPath: {\n    type: 'accessor',\n    value: object => object.path\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  rounded: {\n    deprecatedFor: ['jointRounded', 'capRounded']\n  }\n};\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\nexport default class PathLayer extends Layer {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking]\n    });\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      positions: {\n        size: 3,\n        vertexOffset: 1,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: 5121,\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 3,\n        type: 5121,\n        accessor: (object, _ref) => {\n          let {\n            index,\n            target: value\n          } = _ref;\n          return this.encodePickingColor(object && object.__source ? object.__source.index : index, value);\n        }\n      }\n    });\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      changeFlags\n    } = params;\n    const attributeManager = this.getAttributeManager();\n    const geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath);\n\n    if (geometryChanged) {\n      const {\n        pathTesselator\n      } = this.state;\n      const buffers = props.data.attributes || {};\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        attributeManager.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager.invalidateAll();\n    }\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {\n      index\n    } = info;\n    const {\n      data\n    } = this.props;\n\n    if (data[0] && data[0].__source) {\n      info.object = data.find(d => d.__source.index === index);\n    }\n\n    return info;\n  }\n\n  disablePickingIndex(objectIndex) {\n    const {\n      data\n    } = this.props;\n\n    if (data[0] && data[0].__source) {\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw(_ref2) {\n    let {\n      uniforms\n    } = _ref2;\n    const {\n      jointRounded,\n      capRounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      jointType: Number(jointRounded),\n      capType: Number(capRounded),\n      billboard,\n      widthUnits: UNIT[widthUnits],\n      widthScale,\n      miterLimit,\n      widthMinPixels,\n      widthMaxPixels\n    }).draw();\n  }\n\n  _getModel(gl) {\n    const SEGMENT_INDICES = [0, 1, 2, 1, 4, 2, 1, 3, 4, 3, 5, 4];\n    const SEGMENT_POSITIONS = [0, 0, 0, -1, 0, 1, 1, -1, 1, 1, 1, 0];\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 4,\n        attributes: {\n          indices: new Uint16Array(SEGMENT_INDICES),\n          positions: {\n            value: new Float32Array(SEGMENT_POSITIONS),\n            size: 2\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  calculatePositions(attribute) {\n    const {\n      pathTesselator\n    } = this.state;\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  calculateSegmentTypes(attribute) {\n    const {\n      pathTesselator\n    } = this.state;\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n\n}\n\n_defineProperty(PathLayer, \"defaultProps\", defaultProps);\n\n_defineProperty(PathLayer, \"layerName\", 'PathLayer');","map":{"version":3,"mappings":"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","names":["Layer","project32","picking","UNIT","Model","Geometry","PathTesselator","vs","fs","DEFAULT_COLOR","defaultProps","widthUnits","widthScale","type","min","value","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","jointRounded","capRounded","miterLimit","billboard","_pathType","getPath","object","path","getColor","getWidth","rounded","deprecatedFor","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","PathLayer","constructor","_defineProperty","getShaders","modules","wrapLongitude","initializeState","noAlloc","attributeManager","getAttributeManager","addInstanced","positions","size","vertexOffset","fp64","use64bitPositions","transition","accessor","update","calculatePositions","shaderAttributes","instanceLeftPositions","instanceStartPositions","instanceEndPositions","instanceRightPositions","instanceTypes","calculateSegmentTypes","instanceStrokeWidths","defaultValue","instanceColors","props","colorFormat","normalized","instancePickingColors","index","target","encodePickingColor","__source","setState","pathTesselator","updateState","params","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","state","buffers","data","attributes","updateGeometry","geometryBuffer","normalize","loop","getGeometry","positionFormat","resolution","context","viewport","numInstances","instanceCount","startIndices","vertexStarts","invalidateAll","extensionsChanged","gl","model","delete","_getModel","getPickingInfo","info","find","d","disablePickingIndex","objectIndex","i","_disablePickingIndex","draw","uniforms","setUniforms","jointType","capType","SEGMENT_INDICES","SEGMENT_POSITIONS","id","geometry","drawMode","indices","Uint16Array","Float32Array","isInstanced","attribute","get"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplicații\\earthquakes\\node_modules\\@deck.gl\\layers\\src\\path-layer\\path-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\nimport PathTesselator from './path-tesselator';\n\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  Color,\n  Accessor,\n  AccessorFunction,\n  Unit,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {PathGeometry} from './path';\n\ntype _PathLayerProps<DataT> = {\n  /** The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`\n   * @default 'meters'\n   */\n  widthUnits?: Unit;\n  /**\n   * Path width multiplier.\n   * @default 1\n   */\n  widthScale?: number;\n  /**\n   * The minimum path width in pixels. This prop can be used to prevent the path from getting too thin when zoomed out.\n   * @default 0\n   */\n  widthMinPixels?: number;\n  /**\n   * The maximum path width in pixels. This prop can be used to prevent the path from getting too thick when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   * @default false\n   */\n  jointRounded?: boolean;\n  /**\n   * Type of caps. If `true`, draw round caps. Otherwise draw square caps.\n   * @default false\n   */\n  capRounded?: boolean;\n  /**\n   * The maximum extent of a joint in ratio to the stroke width. Only works if `jointRounded` is `false`.\n   * @default 4\n   */\n  miterLimit?: number;\n  /**\n   * If `true`, extrude the path in screen space (width always faces the camera).\n   * If `false`, the width always faces up (z).\n   * @default false\n   */\n  billboard?: boolean;\n  /**\n   * (Experimental) If `'loop'` or `'open'`, will skip normalizing the coordinates returned by `getPath` and instead assume all paths are to be loops or open paths.\n   * When normalization is disabled, paths must be specified in the format of flat array. Open paths must contain at least 2 vertices and closed paths must contain at least 3 vertices.\n   * @default null\n   */\n  _pathType?: null | 'loop' | 'open';\n  /**\n   * Path geometry accessor.\n   */\n  getPath?: AccessorFunction<DataT, PathGeometry>;\n  /**\n   * Path color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color | Color[]>;\n  /**\n   * Path width accessor.\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number | number[]>;\n  /**\n   * @deprecated Use `jointRounded` and `capRounded` instead\n   */\n  rounded?: boolean;\n};\n\nexport type PathLayerProps<DataT = any> = _PathLayerProps<DataT> & LayerProps<DataT>;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<PathLayerProps> = {\n  widthUnits: 'meters',\n  widthScale: {type: 'number', min: 0, value: 1},\n  widthMinPixels: {type: 'number', min: 0, value: 0},\n  widthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n  jointRounded: false,\n  capRounded: false,\n  miterLimit: {type: 'number', min: 0, value: 4},\n  billboard: false,\n  _pathType: null,\n\n  getPath: {type: 'accessor', value: object => object.path},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  // deprecated props\n  rounded: {deprecatedFor: ['jointRounded', 'capRounded']}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\n/** Render lists of coordinate points as extruded polylines with mitering. */\nexport default class PathLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_PathLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'PathLayer';\n\n  state!: {\n    model?: Model;\n    pathTesselator: PathTesselator;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager!.addInstanced({\n      positions: {\n        size: 3,\n        // Start filling buffer from 1 vertex in\n        vertexOffset: 1,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value)\n      }\n    });\n    /* eslint-enable max-len */\n\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager();\n\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath));\n\n    if (geometryChanged) {\n      const {pathTesselator} = this.state;\n      const buffers = (props.data as any).attributes || {};\n\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        attributeManager!.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager!.invalidateAll();\n    }\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): PickingInfo {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = (data as any[]).find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  /** Override base Layer method */\n  disablePickingIndex(objectIndex: number) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < (data as any[]).length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      jointRounded,\n      capRounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        jointType: Number(jointRounded),\n        capType: Number(capRounded),\n        billboard,\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        miterLimit,\n        widthMinPixels,\n        widthMaxPixels\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    /*\n     *       _\n     *        \"-_ 1                   3                       5\n     *     _     \"o---------------------o-------------------_-o\n     *       -   / \"\"--..__              '.             _.-' /\n     *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n     *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n     *       \"o----------------------------\"\"-o'    :     /\n     *      0,2                            4 / '.  :     /\n     *                                      /   '.:     /\n     *                                     /     :'.   /\n     *                                    /     :  ', /\n     *                                   /     :     o\n     */\n\n    // prettier-ignore\n    const SEGMENT_INDICES = [\n      // start corner\n      0, 1, 2,\n      // body\n      1, 4, 2,\n      1, 3, 4,\n      // end corner\n      3, 5, 4\n    ];\n\n    // [0] position on segment - 0: start, 1: end\n    // [1] side of path - -1: left, 0: center (joint), 1: right\n    // prettier-ignore\n    const SEGMENT_POSITIONS = [\n      // bevel start corner\n      0, 0,\n      // start inner corner\n      0, -1,\n      // start outer corner\n      0, 1,\n      // end inner corner\n      1, -1,\n      // end outer corner\n      1, 1,\n      // bevel end corner\n      1, 0\n    ];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          indices: new Uint16Array(SEGMENT_INDICES),\n          positions: {value: new Float32Array(SEGMENT_POSITIONS), size: 2}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  protected calculatePositions(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  protected calculateSegmentTypes(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}