{"ast":null,"code":"import { loadBasisEncoderModule, loadBasisTrascoderModule } from './basis-module-loader';\nimport { GL_EXTENSIONS_CONSTANTS } from '../gl-extensions';\nimport { getSupportedGPUTextureFormats } from '../utils/texture-formats';\nimport { isKTX } from './parse-ktx';\nconst OutputFormat = {\n  etc1: {\n    basisFormat: 0,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_ETC1_WEBGL\n  },\n  etc2: {\n    basisFormat: 1,\n    compressed: true\n  },\n  bc1: {\n    basisFormat: 2,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_S3TC_DXT1_EXT\n  },\n  bc3: {\n    basisFormat: 3,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT5_EXT\n  },\n  bc4: {\n    basisFormat: 4,\n    compressed: true\n  },\n  bc5: {\n    basisFormat: 5,\n    compressed: true\n  },\n  'bc7-m6-opaque-only': {\n    basisFormat: 6,\n    compressed: true\n  },\n  'bc7-m5': {\n    basisFormat: 7,\n    compressed: true\n  },\n  'pvrtc1-4-rgb': {\n    basisFormat: 8,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG\n  },\n  'pvrtc1-4-rgba': {\n    basisFormat: 9,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\n  },\n  'astc-4x4': {\n    basisFormat: 10,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_4X4_KHR\n  },\n  'atc-rgb': {\n    basisFormat: 11,\n    compressed: true\n  },\n  'atc-rgba-interpolated-alpha': {\n    basisFormat: 12,\n    compressed: true\n  },\n  rgba32: {\n    basisFormat: 13,\n    compressed: false\n  },\n  rgb565: {\n    basisFormat: 14,\n    compressed: false\n  },\n  bgr565: {\n    basisFormat: 15,\n    compressed: false\n  },\n  rgba4444: {\n    basisFormat: 16,\n    compressed: false\n  }\n};\nexport default async function parseBasis(data, options) {\n  if (options.basis.containerFormat === 'auto') {\n    if (isKTX(data)) {\n      const fileConstructors = await loadBasisEncoderModule(options);\n      return parseKTX2File(fileConstructors.KTX2File, data, options);\n    }\n\n    const {\n      BasisFile\n    } = await loadBasisTrascoderModule(options);\n    return parseBasisFile(BasisFile, data, options);\n  }\n\n  switch (options.basis.module) {\n    case 'encoder':\n      const fileConstructors = await loadBasisEncoderModule(options);\n\n      switch (options.basis.containerFormat) {\n        case 'ktx2':\n          return parseKTX2File(fileConstructors.KTX2File, data, options);\n\n        case 'basis':\n        default:\n          return parseBasisFile(fileConstructors.BasisFile, data, options);\n      }\n\n    case 'transcoder':\n    default:\n      const {\n        BasisFile\n      } = await loadBasisTrascoderModule(options);\n      return parseBasisFile(BasisFile, data, options);\n  }\n}\n\nfunction parseBasisFile(BasisFile, data, options) {\n  const basisFile = new BasisFile(new Uint8Array(data));\n\n  try {\n    if (!basisFile.startTranscoding()) {\n      throw new Error('Failed to start basis transcoding');\n    }\n\n    const imageCount = basisFile.getNumImages();\n    const images = [];\n\n    for (let imageIndex = 0; imageIndex < imageCount; imageIndex++) {\n      const levelsCount = basisFile.getNumLevels(imageIndex);\n      const levels = [];\n\n      for (let levelIndex = 0; levelIndex < levelsCount; levelIndex++) {\n        levels.push(transcodeImage(basisFile, imageIndex, levelIndex, options));\n      }\n\n      images.push(levels);\n    }\n\n    return images;\n  } finally {\n    basisFile.close();\n    basisFile.delete();\n  }\n}\n\nfunction transcodeImage(basisFile, imageIndex, levelIndex, options) {\n  const width = basisFile.getImageWidth(imageIndex, levelIndex);\n  const height = basisFile.getImageHeight(imageIndex, levelIndex);\n  const hasAlpha = basisFile.getHasAlpha();\n  const {\n    compressed,\n    format,\n    basisFormat\n  } = getBasisOptions(options, hasAlpha);\n  const decodedSize = basisFile.getImageTranscodedSizeInBytes(imageIndex, levelIndex, basisFormat);\n  const decodedData = new Uint8Array(decodedSize);\n\n  if (!basisFile.transcodeImage(decodedData, imageIndex, levelIndex, basisFormat, 0, 0)) {\n    throw new Error('failed to start Basis transcoding');\n  }\n\n  return {\n    width,\n    height,\n    data: decodedData,\n    compressed,\n    format,\n    hasAlpha\n  };\n}\n\nfunction parseKTX2File(KTX2File, data, options) {\n  const ktx2File = new KTX2File(new Uint8Array(data));\n\n  try {\n    if (!ktx2File.startTranscoding()) {\n      throw new Error('failed to start KTX2 transcoding');\n    }\n\n    const levelsCount = ktx2File.getLevels();\n    const levels = [];\n\n    for (let levelIndex = 0; levelIndex < levelsCount; levelIndex++) {\n      levels.push(transcodeKTX2Image(ktx2File, levelIndex, options));\n      break;\n    }\n\n    return [levels];\n  } finally {\n    ktx2File.close();\n    ktx2File.delete();\n  }\n}\n\nfunction transcodeKTX2Image(ktx2File, levelIndex, options) {\n  const {\n    alphaFlag,\n    height,\n    width\n  } = ktx2File.getImageLevelInfo(levelIndex, 0, 0);\n  const {\n    compressed,\n    format,\n    basisFormat\n  } = getBasisOptions(options, alphaFlag);\n  const decodedSize = ktx2File.getImageTranscodedSizeInBytes(levelIndex, 0, 0, basisFormat);\n  const decodedData = new Uint8Array(decodedSize);\n\n  if (!ktx2File.transcodeImage(decodedData, levelIndex, 0, 0, basisFormat, 0, -1, -1)) {\n    throw new Error('Failed to transcode KTX2 image');\n  }\n\n  return {\n    width,\n    height,\n    data: decodedData,\n    compressed,\n    hasAlpha: alphaFlag,\n    format\n  };\n}\n\nfunction getBasisOptions(options, hasAlpha) {\n  let format = options && options.basis && options.basis.format;\n\n  if (format === 'auto') {\n    format = selectSupportedBasisFormat();\n  }\n\n  if (typeof format === 'object') {\n    format = hasAlpha ? format.alpha : format.noAlpha;\n  }\n\n  format = format.toLowerCase();\n  return OutputFormat[format];\n}\n\nexport function selectSupportedBasisFormat() {\n  const supportedFormats = getSupportedGPUTextureFormats();\n\n  if (supportedFormats.has('astc')) {\n    return 'astc-4x4';\n  } else if (supportedFormats.has('dxt')) {\n    return {\n      alpha: 'bc3',\n      noAlpha: 'bc1'\n    };\n  } else if (supportedFormats.has('pvrtc')) {\n    return {\n      alpha: 'pvrtc1-4-rgba',\n      noAlpha: 'pvrtc1-4-rgb'\n    };\n  } else if (supportedFormats.has('etc1')) {\n    return 'etc1';\n  } else if (supportedFormats.has('etc2')) {\n    return 'etc2';\n  }\n\n  return 'rgb565';\n}","map":{"version":3,"mappings":"AAEA,SAAQA,sBAAR,EAAgCC,wBAAhC,QAA+D,uBAA/D;AACA,SAAQC,uBAAR,QAAsC,kBAAtC;AACA,SAAQC,6BAAR,QAA4C,0BAA5C;AACA,SAAQC,KAAR,QAAoB,aAApB;AA2BA,MAAMC,YAAgD,GAAG;EACvDC,IAAI,EAAE;IACJC,WAAW,EAAE,CADT;IAEJC,UAAU,EAAE,IAFR;IAGJC,MAAM,EAAEP,uBAAuB,CAACQ;EAH5B,CADiD;EAMvDC,IAAI,EAAE;IAACJ,WAAW,EAAE,CAAd;IAAiBC,UAAU,EAAE;EAA7B,CANiD;EAOvDI,GAAG,EAAE;IACHL,WAAW,EAAE,CADV;IAEHC,UAAU,EAAE,IAFT;IAGHC,MAAM,EAAEP,uBAAuB,CAACW;EAH7B,CAPkD;EAYvDC,GAAG,EAAE;IACHP,WAAW,EAAE,CADV;IAEHC,UAAU,EAAE,IAFT;IAGHC,MAAM,EAAEP,uBAAuB,CAACa;EAH7B,CAZkD;EAiBvDC,GAAG,EAAE;IAACT,WAAW,EAAE,CAAd;IAAiBC,UAAU,EAAE;EAA7B,CAjBkD;EAkBvDS,GAAG,EAAE;IAACV,WAAW,EAAE,CAAd;IAAiBC,UAAU,EAAE;EAA7B,CAlBkD;EAmBvD,sBAAsB;IAACD,WAAW,EAAE,CAAd;IAAiBC,UAAU,EAAE;EAA7B,CAnBiC;EAoBvD,UAAU;IAACD,WAAW,EAAE,CAAd;IAAiBC,UAAU,EAAE;EAA7B,CApB6C;EAqBvD,gBAAgB;IACdD,WAAW,EAAE,CADC;IAEdC,UAAU,EAAE,IAFE;IAGdC,MAAM,EAAEP,uBAAuB,CAACgB;EAHlB,CArBuC;EA0BvD,iBAAiB;IACfX,WAAW,EAAE,CADE;IAEfC,UAAU,EAAE,IAFG;IAGfC,MAAM,EAAEP,uBAAuB,CAACiB;EAHjB,CA1BsC;EA+BvD,YAAY;IACVZ,WAAW,EAAE,EADH;IAEVC,UAAU,EAAE,IAFF;IAGVC,MAAM,EAAEP,uBAAuB,CAACkB;EAHtB,CA/B2C;EAoCvD,WAAW;IAACb,WAAW,EAAE,EAAd;IAAkBC,UAAU,EAAE;EAA9B,CApC4C;EAqCvD,+BAA+B;IAACD,WAAW,EAAE,EAAd;IAAkBC,UAAU,EAAE;EAA9B,CArCwB;EAsCvDa,MAAM,EAAE;IAACd,WAAW,EAAE,EAAd;IAAkBC,UAAU,EAAE;EAA9B,CAtC+C;EAuCvDc,MAAM,EAAE;IAACf,WAAW,EAAE,EAAd;IAAkBC,UAAU,EAAE;EAA9B,CAvC+C;EAwCvDe,MAAM,EAAE;IAAChB,WAAW,EAAE,EAAd;IAAkBC,UAAU,EAAE;EAA9B,CAxC+C;EAyCvDgB,QAAQ,EAAE;IAACjB,WAAW,EAAE,EAAd;IAAkBC,UAAU,EAAE;EAA9B;AAzC6C,CAAzD;AAkDA,eAAe,eAAeiB,UAAf,CAA0BC,IAA1B,EAA6CC,OAA7C,EAAiF;EAC9F,IAAIA,OAAO,CAACC,KAARD,CAAcE,eAAdF,KAAkC,MAAtC,EAA8C;IAC5C,IAAIvB,KAAK,CAACsB,IAAD,CAAT,EAAiB;MACf,MAAMI,gBAAgB,GAAG,MAAM9B,sBAAsB,CAAC2B,OAAD,CAArD;MACA,OAAOI,aAAa,CAACD,gBAAgB,CAACE,QAAlB,EAA4BN,IAA5B,EAAkCC,OAAlC,CAApB;IACD;;IACD,MAAM;MAACM;IAAD,IAAc,MAAMhC,wBAAwB,CAAC0B,OAAD,CAAlD;IACA,OAAOO,cAAc,CAACD,SAAD,EAAYP,IAAZ,EAAkBC,OAAlB,CAArB;EACD;;EACD,QAAQA,OAAO,CAACC,KAARD,CAAcQ,MAAtB;IACE,KAAK,SAAL;MACE,MAAML,gBAAgB,GAAG,MAAM9B,sBAAsB,CAAC2B,OAAD,CAArD;;MACA,QAAQA,OAAO,CAACC,KAARD,CAAcE,eAAtB;QACE,KAAK,MAAL;UACE,OAAOE,aAAa,CAACD,gBAAgB,CAACE,QAAlB,EAA4BN,IAA5B,EAAkCC,OAAlC,CAApB;;QACF,KAAK,OAAL;QACA;UACE,OAAOO,cAAc,CAACJ,gBAAgB,CAACG,SAAlB,EAA6BP,IAA7B,EAAmCC,OAAnC,CAArB;MALJ;;IAOF,KAAK,YAAL;IACA;MACE,MAAM;QAACM;MAAD,IAAc,MAAMhC,wBAAwB,CAAC0B,OAAD,CAAlD;MACA,OAAOO,cAAc,CAACD,SAAD,EAAYP,IAAZ,EAAkBC,OAAlB,CAArB;EAbJ;AAeD;;AASD,SAASO,cAAT,CAAwBD,SAAxB,EAAmCP,IAAnC,EAAyCC,OAAzC,EAAoE;EAClE,MAAMS,SAAS,GAAG,IAAIH,SAAJ,CAAc,IAAII,UAAJ,CAAeX,IAAf,CAAd,CAAlB;;EAEA,IAAI;IACF,IAAI,CAACU,SAAS,CAACE,gBAAVF,EAAL,EAAmC;MACjC,MAAM,IAAIG,KAAJ,CAAU,mCAAV,CAAN;IACD;;IAED,MAAMC,UAAU,GAAGJ,SAAS,CAACK,YAAVL,EAAnB;IACA,MAAMM,MAAwB,GAAG,EAAjC;;IAEA,KAAK,IAAIC,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGH,UAAtC,EAAkDG,UAAU,EAA5D,EAAgE;MAC9D,MAAMC,WAAW,GAAGR,SAAS,CAACS,YAAVT,CAAuBO,UAAvBP,CAApB;MACA,MAAMU,MAAsB,GAAG,EAA/B;;MAEA,KAAK,IAAIC,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGH,WAAtC,EAAmDG,UAAU,EAA7D,EAAiE;QAC/DD,MAAM,CAACE,IAAPF,CAAYG,cAAc,CAACb,SAAD,EAAYO,UAAZ,EAAwBI,UAAxB,EAAoCpB,OAApC,CAA1BmB;MACD;;MAEDJ,MAAM,CAACM,IAAPN,CAAYI,MAAZJ;IACD;;IAED,OAAOA,MAAP;EAnBF,UAoBU;IACRN,SAAS,CAACc,KAAVd;IACAA,SAAS,CAACe,MAAVf;EACD;AACF;;AAUD,SAASa,cAAT,CAAwBb,SAAxB,EAAmCO,UAAnC,EAA+CI,UAA/C,EAA2DpB,OAA3D,EAAkF;EAChF,MAAMyB,KAAK,GAAGhB,SAAS,CAACiB,aAAVjB,CAAwBO,UAAxBP,EAAoCW,UAApCX,CAAd;EACA,MAAMkB,MAAM,GAAGlB,SAAS,CAACmB,cAAVnB,CAAyBO,UAAzBP,EAAqCW,UAArCX,CAAf;EAGA,MAAMoB,QAAQ,GAAGpB,SAAS,CAACqB,WAAVrB,EAAjB;EAGA,MAAM;IAAC5B,UAAD;IAAaC,MAAb;IAAqBF;EAArB,IAAoCmD,eAAe,CAAC/B,OAAD,EAAU6B,QAAV,CAAzD;EAEA,MAAMG,WAAW,GAAGvB,SAAS,CAACwB,6BAAVxB,CAAwCO,UAAxCP,EAAoDW,UAApDX,EAAgE7B,WAAhE6B,CAApB;EACA,MAAMyB,WAAW,GAAG,IAAIxB,UAAJ,CAAesB,WAAf,CAApB;;EAEA,IAAI,CAACvB,SAAS,CAACa,cAAVb,CAAyByB,WAAzBzB,EAAsCO,UAAtCP,EAAkDW,UAAlDX,EAA8D7B,WAA9D6B,EAA2E,CAA3EA,EAA8E,CAA9EA,CAAL,EAAuF;IACrF,MAAM,IAAIG,KAAJ,CAAU,mCAAV,CAAN;EACD;;EAED,OAAO;IAELa,KAFK;IAGLE,MAHK;IAIL5B,IAAI,EAAEmC,WAJD;IAKLrD,UALK;IAMLC,MANK;IAUL+C;EAVK,CAAP;AAYD;;AASD,SAASzB,aAAT,CAAuBC,QAAvB,EAAiCN,IAAjC,EAAoDC,OAApD,EAA+E;EAC7E,MAAMmC,QAAQ,GAAG,IAAI9B,QAAJ,CAAa,IAAIK,UAAJ,CAAeX,IAAf,CAAb,CAAjB;;EAEA,IAAI;IACF,IAAI,CAACoC,QAAQ,CAACxB,gBAATwB,EAAL,EAAkC;MAChC,MAAM,IAAIvB,KAAJ,CAAU,kCAAV,CAAN;IACD;;IACD,MAAMK,WAAW,GAAGkB,QAAQ,CAACC,SAATD,EAApB;IACA,MAAMhB,MAAsB,GAAG,EAA/B;;IAEA,KAAK,IAAIC,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGH,WAAtC,EAAmDG,UAAU,EAA7D,EAAiE;MAC/DD,MAAM,CAACE,IAAPF,CAAYkB,kBAAkB,CAACF,QAAD,EAAWf,UAAX,EAAuBpB,OAAvB,CAA9BmB;MACA;IACD;;IAED,OAAO,CAACA,MAAD,CAAP;EAZF,UAaU;IACRgB,QAAQ,CAACZ,KAATY;IACAA,QAAQ,CAACX,MAATW;EACD;AACF;;AASD,SAASE,kBAAT,CAA4BF,QAA5B,EAAsCf,UAAtC,EAA0DpB,OAA1D,EAAiF;EAC/E,MAAM;IAACsC,SAAD;IAAYX,MAAZ;IAAoBF;EAApB,IAA6BU,QAAQ,CAACI,iBAATJ,CAA2Bf,UAA3Be,EAAuC,CAAvCA,EAA0C,CAA1CA,CAAnC;EAGA,MAAM;IAACtD,UAAD;IAAaC,MAAb;IAAqBF;EAArB,IAAoCmD,eAAe,CAAC/B,OAAD,EAAUsC,SAAV,CAAzD;EAEA,MAAMN,WAAW,GAAGG,QAAQ,CAACF,6BAATE,CAClBf,UADkBe,EAElB,CAFkBA,EAGlB,CAHkBA,EAIlBvD,WAJkBuD,CAApB;EAMA,MAAMD,WAAW,GAAG,IAAIxB,UAAJ,CAAesB,WAAf,CAApB;;EAEA,IACE,CAACG,QAAQ,CAACb,cAATa,CACCD,WADDC,EAECf,UAFDe,EAGC,CAHDA,EAIC,CAJDA,EAKCvD,WALDuD,EAMC,CANDA,EAOC,CAAC,CAPFA,EAQC,CAAC,CARFA,CADH,EAWE;IACA,MAAM,IAAIvB,KAAJ,CAAU,gCAAV,CAAN;EACD;;EAED,OAAO;IAELa,KAFK;IAGLE,MAHK;IAIL5B,IAAI,EAAEmC,WAJD;IAKLrD,UALK;IASLgD,QAAQ,EAAES,SATL;IAULxD;EAVK,CAAP;AAYD;;AAQD,SAASiD,eAAT,CAAyB/B,OAAzB,EAAkC6B,QAAlC,EAAyE;EACvE,IAAI/C,MAAM,GAAGkB,OAAO,IAAIA,OAAO,CAACC,KAAnBD,IAA4BA,OAAO,CAACC,KAARD,CAAclB,MAAvD;;EACA,IAAIA,MAAM,KAAK,MAAf,EAAuB;IACrBA,MAAM,GAAG0D,0BAA0B,EAAnC1D;EACD;;EACD,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;IAC9BA,MAAM,GAAG+C,QAAQ,GAAG/C,MAAM,CAAC2D,KAAV,GAAkB3D,MAAM,CAAC4D,OAA1C5D;EACD;;EACDA,MAAM,GAAGA,MAAM,CAAC6D,WAAP7D,EAATA;EACA,OAAOJ,YAAY,CAACI,MAAD,CAAnB;AACD;;AAMD,OAAO,SAAS0D,0BAAT,GAKD;EACJ,MAAMI,gBAAgB,GAAGpE,6BAA6B,EAAtD;;EACA,IAAIoE,gBAAgB,CAACC,GAAjBD,CAAqB,MAArBA,CAAJ,EAAkC;IAChC,OAAO,UAAP;EADF,OAEO,IAAIA,gBAAgB,CAACC,GAAjBD,CAAqB,KAArBA,CAAJ,EAAiC;IACtC,OAAO;MACLH,KAAK,EAAE,KADF;MAELC,OAAO,EAAE;IAFJ,CAAP;EADK,OAKA,IAAIE,gBAAgB,CAACC,GAAjBD,CAAqB,OAArBA,CAAJ,EAAmC;IACxC,OAAO;MACLH,KAAK,EAAE,eADF;MAELC,OAAO,EAAE;IAFJ,CAAP;EADK,OAKA,IAAIE,gBAAgB,CAACC,GAAjBD,CAAqB,MAArBA,CAAJ,EAAkC;IACvC,OAAO,MAAP;EADK,OAEA,IAAIA,gBAAgB,CAACC,GAAjBD,CAAqB,MAArBA,CAAJ,EAAkC;IACvC,OAAO,MAAP;EACD;;EACD,OAAO,QAAP;AACD","names":["loadBasisEncoderModule","loadBasisTrascoderModule","GL_EXTENSIONS_CONSTANTS","getSupportedGPUTextureFormats","isKTX","OutputFormat","etc1","basisFormat","compressed","format","COMPRESSED_RGB_ETC1_WEBGL","etc2","bc1","COMPRESSED_RGB_S3TC_DXT1_EXT","bc3","COMPRESSED_RGBA_S3TC_DXT5_EXT","bc4","bc5","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_ASTC_4X4_KHR","rgba32","rgb565","bgr565","rgba4444","parseBasis","data","options","basis","containerFormat","fileConstructors","parseKTX2File","KTX2File","BasisFile","parseBasisFile","module","basisFile","Uint8Array","startTranscoding","Error","imageCount","getNumImages","images","imageIndex","levelsCount","getNumLevels","levels","levelIndex","push","transcodeImage","close","delete","width","getImageWidth","height","getImageHeight","hasAlpha","getHasAlpha","getBasisOptions","decodedSize","getImageTranscodedSizeInBytes","decodedData","ktx2File","getLevels","transcodeKTX2Image","alphaFlag","getImageLevelInfo","selectSupportedBasisFormat","alpha","noAlpha","toLowerCase","supportedFormats","has"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@loaders.gl\\textures\\src\\lib\\parsers\\parse-basis.ts"],"sourcesContent":["/* eslint-disable indent */\nimport type {TextureLevel} from '@loaders.gl/schema';\nimport {loadBasisEncoderModule, loadBasisTrascoderModule} from './basis-module-loader';\nimport {GL_EXTENSIONS_CONSTANTS} from '../gl-extensions';\nimport {getSupportedGPUTextureFormats} from '../utils/texture-formats';\nimport {isKTX} from './parse-ktx';\n\nexport type BasisFormat =\n  | 'etc1'\n  | 'etc2'\n  | 'bc1'\n  | 'bc3'\n  | 'bc4'\n  | 'bc5'\n  | 'bc7-m6-opaque-only'\n  | 'bc7-m5'\n  | 'pvrtc1-4-rgb'\n  | 'pvrtc1-4-rgba'\n  | 'astc-4x4'\n  | 'atc-rgb'\n  | 'atc-rgba-interpolated-alpha'\n  | 'rgba32'\n  | 'rgb565'\n  | 'bgr565'\n  | 'rgba4444';\n\ntype BasisOutputOptions = {\n  basisFormat: number;\n  compressed: boolean;\n  format?: number;\n};\n\nconst OutputFormat: Record<string, BasisOutputOptions> = {\n  etc1: {\n    basisFormat: 0,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_ETC1_WEBGL\n  },\n  etc2: {basisFormat: 1, compressed: true},\n  bc1: {\n    basisFormat: 2,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_S3TC_DXT1_EXT\n  },\n  bc3: {\n    basisFormat: 3,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT5_EXT\n  },\n  bc4: {basisFormat: 4, compressed: true},\n  bc5: {basisFormat: 5, compressed: true},\n  'bc7-m6-opaque-only': {basisFormat: 6, compressed: true},\n  'bc7-m5': {basisFormat: 7, compressed: true},\n  'pvrtc1-4-rgb': {\n    basisFormat: 8,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG\n  },\n  'pvrtc1-4-rgba': {\n    basisFormat: 9,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\n  },\n  'astc-4x4': {\n    basisFormat: 10,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_4X4_KHR\n  },\n  'atc-rgb': {basisFormat: 11, compressed: true},\n  'atc-rgba-interpolated-alpha': {basisFormat: 12, compressed: true},\n  rgba32: {basisFormat: 13, compressed: false},\n  rgb565: {basisFormat: 14, compressed: false},\n  bgr565: {basisFormat: 15, compressed: false},\n  rgba4444: {basisFormat: 16, compressed: false}\n};\n\n/**\n * parse data with a Binomial Basis_Universal module\n * @param data\n * @param options\n * @returns compressed texture data\n */\nexport default async function parseBasis(data: ArrayBuffer, options): Promise<TextureLevel[][]> {\n  if (options.basis.containerFormat === 'auto') {\n    if (isKTX(data)) {\n      const fileConstructors = await loadBasisEncoderModule(options);\n      return parseKTX2File(fileConstructors.KTX2File, data, options);\n    }\n    const {BasisFile} = await loadBasisTrascoderModule(options);\n    return parseBasisFile(BasisFile, data, options);\n  }\n  switch (options.basis.module) {\n    case 'encoder':\n      const fileConstructors = await loadBasisEncoderModule(options);\n      switch (options.basis.containerFormat) {\n        case 'ktx2':\n          return parseKTX2File(fileConstructors.KTX2File, data, options);\n        case 'basis':\n        default:\n          return parseBasisFile(fileConstructors.BasisFile, data, options);\n      }\n    case 'transcoder':\n    default:\n      const {BasisFile} = await loadBasisTrascoderModule(options);\n      return parseBasisFile(BasisFile, data, options);\n  }\n}\n\n/**\n * Parse *.basis file data\n * @param BasisFile - initialized transcoder module\n * @param data\n * @param options\n * @returns compressed texture data\n */\nfunction parseBasisFile(BasisFile, data, options): TextureLevel[][] {\n  const basisFile = new BasisFile(new Uint8Array(data));\n\n  try {\n    if (!basisFile.startTranscoding()) {\n      throw new Error('Failed to start basis transcoding');\n    }\n\n    const imageCount = basisFile.getNumImages();\n    const images: TextureLevel[][] = [];\n\n    for (let imageIndex = 0; imageIndex < imageCount; imageIndex++) {\n      const levelsCount = basisFile.getNumLevels(imageIndex);\n      const levels: TextureLevel[] = [];\n\n      for (let levelIndex = 0; levelIndex < levelsCount; levelIndex++) {\n        levels.push(transcodeImage(basisFile, imageIndex, levelIndex, options));\n      }\n\n      images.push(levels);\n    }\n\n    return images;\n  } finally {\n    basisFile.close();\n    basisFile.delete();\n  }\n}\n\n/**\n * Parse the particular level image of a basis file\n * @param basisFile\n * @param imageIndex\n * @param levelIndex\n * @param options\n * @returns compressed texture data\n */\nfunction transcodeImage(basisFile, imageIndex, levelIndex, options): TextureLevel {\n  const width = basisFile.getImageWidth(imageIndex, levelIndex);\n  const height = basisFile.getImageHeight(imageIndex, levelIndex);\n\n  // See https://github.com/BinomialLLC/basis_universal/pull/83\n  const hasAlpha = basisFile.getHasAlpha(/* imageIndex, levelIndex */);\n\n  // Check options for output format etc\n  const {compressed, format, basisFormat} = getBasisOptions(options, hasAlpha);\n\n  const decodedSize = basisFile.getImageTranscodedSizeInBytes(imageIndex, levelIndex, basisFormat);\n  const decodedData = new Uint8Array(decodedSize);\n\n  if (!basisFile.transcodeImage(decodedData, imageIndex, levelIndex, basisFormat, 0, 0)) {\n    throw new Error('failed to start Basis transcoding');\n  }\n\n  return {\n    // standard loaders.gl image category payload\n    width,\n    height,\n    data: decodedData,\n    compressed,\n    format,\n\n    // Additional fields\n    // Add levelSize field.\n    hasAlpha\n  };\n}\n\n/**\n * Parse *.ktx2 file data\n * @param KTX2File\n * @param data\n * @param options\n * @returns compressed texture data\n */\nfunction parseKTX2File(KTX2File, data: ArrayBuffer, options): TextureLevel[][] {\n  const ktx2File = new KTX2File(new Uint8Array(data));\n\n  try {\n    if (!ktx2File.startTranscoding()) {\n      throw new Error('failed to start KTX2 transcoding');\n    }\n    const levelsCount = ktx2File.getLevels();\n    const levels: TextureLevel[] = [];\n\n    for (let levelIndex = 0; levelIndex < levelsCount; levelIndex++) {\n      levels.push(transcodeKTX2Image(ktx2File, levelIndex, options));\n      break; // texture app can only show one level for some reason\n    }\n\n    return [levels];\n  } finally {\n    ktx2File.close();\n    ktx2File.delete();\n  }\n}\n\n/**\n * Parse the particular level image of a ktx2 file\n * @param ktx2File\n * @param levelIndex\n * @param options\n * @returns\n */\nfunction transcodeKTX2Image(ktx2File, levelIndex: number, options): TextureLevel {\n  const {alphaFlag, height, width} = ktx2File.getImageLevelInfo(levelIndex, 0, 0);\n\n  // Check options for output format etc\n  const {compressed, format, basisFormat} = getBasisOptions(options, alphaFlag);\n\n  const decodedSize = ktx2File.getImageTranscodedSizeInBytes(\n    levelIndex,\n    0 /* layerIndex */,\n    0 /* faceIndex */,\n    basisFormat\n  );\n  const decodedData = new Uint8Array(decodedSize);\n\n  if (\n    !ktx2File.transcodeImage(\n      decodedData,\n      levelIndex,\n      0 /* layerIndex */,\n      0 /* faceIndex */,\n      basisFormat,\n      0,\n      -1 /* channel0 */,\n      -1 /* channel1 */\n    )\n  ) {\n    throw new Error('Failed to transcode KTX2 image');\n  }\n\n  return {\n    // standard loaders.gl image category payload\n    width,\n    height,\n    data: decodedData,\n    compressed,\n\n    // Additional fields\n    // Add levelSize field.\n    hasAlpha: alphaFlag,\n    format\n  };\n}\n\n/**\n * Get BasisFormat by loader format option\n * @param options\n * @param hasAlpha\n * @returns BasisFormat data\n */\nfunction getBasisOptions(options, hasAlpha: boolean): BasisOutputOptions {\n  let format = options && options.basis && options.basis.format;\n  if (format === 'auto') {\n    format = selectSupportedBasisFormat();\n  }\n  if (typeof format === 'object') {\n    format = hasAlpha ? format.alpha : format.noAlpha;\n  }\n  format = format.toLowerCase();\n  return OutputFormat[format];\n}\n\n/**\n * Select transcode format from the list of supported formats\n * @returns key for OutputFormat map\n */\nexport function selectSupportedBasisFormat():\n  | BasisFormat\n  | {\n      alpha: BasisFormat;\n      noAlpha: BasisFormat;\n    } {\n  const supportedFormats = getSupportedGPUTextureFormats();\n  if (supportedFormats.has('astc')) {\n    return 'astc-4x4';\n  } else if (supportedFormats.has('dxt')) {\n    return {\n      alpha: 'bc3',\n      noAlpha: 'bc1'\n    };\n  } else if (supportedFormats.has('pvrtc')) {\n    return {\n      alpha: 'pvrtc1-4-rgba',\n      noAlpha: 'pvrtc1-4-rgb'\n    };\n  } else if (supportedFormats.has('etc1')) {\n    return 'etc1';\n  } else if (supportedFormats.has('etc2')) {\n    return 'etc2';\n  }\n  return 'rgb565';\n}\n"]},"metadata":{},"sourceType":"module"}