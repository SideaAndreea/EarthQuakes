{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, phongLighting, picking, log } from '@deck.gl/core';\nimport { Model, Geometry, Texture2D, isWebGL2 } from '@luma.gl/core';\nimport { hasFeature, FEATURES } from '@luma.gl/webgl';\nimport { MATRIX_ATTRIBUTES, shouldComposeModelMatrix } from '../utils/matrix';\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\n\nfunction validateGeometryAttributes(attributes, useMeshColors) {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  const useColorAttribute = hasColorAttribute && useMeshColors;\n\n  if (!useColorAttribute) {\n    attributes.colors = {\n      constant: true,\n      value: new Float32Array([1, 1, 1])\n    };\n  }\n\n  log.assert(attributes.positions || attributes.POSITION, 'no \"postions\" or \"POSITION\" attribute in mesh');\n}\n\nfunction getGeometry(data, useMeshColors) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes, useMeshColors);\n\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data, useMeshColors);\n    return new Geometry({\n      attributes: data\n    });\n  }\n\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  mesh: {\n    type: 'object',\n    value: null,\n    async: true\n  },\n  texture: {\n    type: 'image',\n    value: null,\n    async: true\n  },\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  _useMeshColors: {\n    type: 'boolean',\n    value: false\n  },\n  _instanced: true,\n  wireframe: false,\n  material: true,\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getOrientation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getScale: {\n    type: 'accessor',\n    value: [1, 1, 1]\n  },\n  getTranslation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getTransformMatrix: {\n    type: 'accessor',\n    value: []\n  }\n};\nexport default class SimpleMeshLayer extends Layer {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  getShaders() {\n    const transpileToGLSL100 = !isWebGL2(this.context.gl);\n    const defines = {};\n\n    if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n      defines.DERIVATIVES_AVAILABLE = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, phongLighting, picking],\n      transpileToGLSL100,\n      defines\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: 5121,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n    this.setState({\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = params;\n\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      var _this$state$model;\n\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n\n      if (props.mesh) {\n        this.state.model = this.getModel(props.mesh);\n        const attributes = props.mesh.attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? 3 : 4);\n    }\n  }\n\n  finalizeState(context) {\n    super.finalizeState(context);\n    this.state.emptyTexture.delete();\n  }\n\n  draw(_ref) {\n    let {\n      uniforms\n    } = _ref;\n\n    if (!this.state.model) {\n      return;\n    }\n\n    const {\n      viewport\n    } = this.context;\n    const {\n      sizeScale,\n      coordinateSystem,\n      _instanced\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      sizeScale,\n      composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n      flatShading: !this.state.hasNormals\n    }).draw();\n  }\n\n  getModel(mesh) {\n    const model = new Model(this.context.gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: getGeometry(mesh, this.props._useMeshColors),\n      isInstanced: true\n    });\n    const {\n      texture\n    } = this.props;\n    const {\n      emptyTexture\n    } = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n    return model;\n  }\n\n  setTexture(texture) {\n    const {\n      emptyTexture,\n      model\n    } = this.state;\n\n    if (model) {\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n    }\n  }\n\n}\n\n_defineProperty(SimpleMeshLayer, \"defaultProps\", defaultProps);\n\n_defineProperty(SimpleMeshLayer, \"layerName\", 'SimpleMeshLayer');","map":{"version":3,"mappings":"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","names":["Layer","project32","phongLighting","picking","log","Model","Geometry","Texture2D","isWebGL2","hasFeature","FEATURES","MATRIX_ATTRIBUTES","shouldComposeModelMatrix","vs","fs","validateGeometryAttributes","attributes","useMeshColors","hasColorAttribute","COLOR_0","colors","useColorAttribute","constant","value","Float32Array","assert","positions","POSITION","getGeometry","data","Error","DEFAULT_COLOR","defaultProps","mesh","type","async","texture","sizeScale","min","_useMeshColors","_instanced","wireframe","material","getPosition","x","position","getColor","getOrientation","getScale","getTranslation","getTransformMatrix","SimpleMeshLayer","constructor","_defineProperty","getShaders","transpileToGLSL100","context","gl","defines","GLSL_DERIVATIVES","DERIVATIVES_AVAILABLE","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","fp64","use64bitPositions","size","accessor","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceModelMatrix","setState","emptyTexture","Uint8Array","width","height","updateState","params","oldProps","changeFlags","extensionsChanged","state","model","delete","getModel","hasNormals","Boolean","NORMAL","normals","invalidateAll","setTexture","setDrawMode","finalizeState","draw","uniforms","viewport","coordinateSystem","setUniforms","composeModelMatrix","flatShading","id","geometry","isInstanced","sampler","hasTexture"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@deck.gl\\mesh-layers\\src\\simple-mesh-layer\\simple-mesh-layer.ts"],"sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  phongLighting,\n  picking,\n  DefaultProps,\n  log,\n  LayerContext,\n  Material\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D, isWebGL2} from '@luma.gl/core';\nimport {hasFeature, FEATURES} from '@luma.gl/webgl';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\n\nimport type {LayerProps, UpdateParameters, Accessor, Position, Color, Texture} from '@deck.gl/core';\nimport type {MeshAttribute, MeshAttributes} from '@loaders.gl/schema';\nimport type {Geometry as GeometryType} from '@luma.gl/engine';\nimport {GLTFMaterialParser} from '@luma.gl/experimental';\n\nfunction validateGeometryAttributes(attributes: Record<string, any>, useMeshColors: boolean): void {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  const useColorAttribute = hasColorAttribute && useMeshColors;\n  if (!useColorAttribute) {\n    attributes.colors = {constant: true, value: new Float32Array([1, 1, 1])};\n  }\n  log.assert(\n    attributes.positions || attributes.POSITION,\n    'no \"postions\" or \"POSITION\" attribute in mesh'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data: Mesh, useMeshColors: boolean): Geometry {\n  if ((data as any).attributes) {\n    validateGeometryAttributes((data as any).attributes, useMeshColors);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if ((data as MeshAttributes).positions || (data as MeshAttributes).POSITION) {\n    validateGeometryAttributes(data, useMeshColors);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\ntype Mesh =\n  | GeometryType\n  | {\n      attributes: MeshAttributes;\n      indices?: MeshAttribute;\n    }\n  | MeshAttributes;\n\ntype _SimpleMeshLayerProps<DataT> = {\n  mesh: string | Mesh | Promise<Mesh> | null;\n  texture?: string | Texture | Promise<Texture>;\n  /** Customize the [texture parameters](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter). */\n  textureParameters?: Record<number, number> | null;\n\n  /** Anchor position accessor. */\n  getPosition?: Accessor<DataT, Position>;\n  /** Color value or accessor.\n   * If `mesh` does not contain vertex colors, use this color to render each object.\n   * If `mesh` contains vertex colors, then the two colors are mixed together.\n   * Use `[255, 255, 255]` to use the original mesh colors.\n   * If `texture` is assigned, then both colors will be ignored.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /**\n   * Orientation in [pitch, yaw, roll] in degrees.\n   * @see https://en.wikipedia.org/wiki/Euler_angles\n   * @default [0, 0, 0]\n   */\n  getOrientation?: Accessor<DataT, [number, number, number]>;\n  /**\n   * Scaling factor of the model along each axis.\n   * @default [1, 1, 1]\n   */\n  getScale?: Accessor<DataT, [number, number, number]>;\n  /**\n   * Translation from the anchor point, [x, y, z] in meters.\n   * @default [0, 0, 0]\n   */\n  getTranslation?: Accessor<DataT, [number, number, number]>;\n  /**\n   * TransformMatrix. If specified, `getOrientation`, `getScale` and `getTranslation` are ignored.\n   */\n  getTransformMatrix?: Accessor<DataT, number[]>;\n  /**\n   * Multiplier to scale each geometry by.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * @deprecated Whether to color pixels using vertex colors supplied in the mesh (the `COLOR_0` or `colors` attribute).\n   * If set to `false` vertex colors will be ignored.\n   * This prop will be removed and set to always true in the next major release.\n   * @default false\n   */\n  _useMeshColors?: boolean;\n\n  /**\n   * (Experimental) If rendering only one instance of the mesh, set this to false to treat mesh positions\n   * as deltas of the world coordinates of the anchor.\n   * E.g. in LNGLAT coordinates, mesh positions are interpreted as meter offsets by default.\n   * setting _instanced to false interpreted mesh positions as lnglat deltas.\n   * @default true\n   */\n  _instanced?: true; // TODO - formalize API\n  /**\n   * Whether to render the mesh in wireframe mode.\n   * @default false\n   */\n  wireframe?: false;\n  /**\n   * Material props for lighting effect.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting#constructing-a-material-instance\n   */\n  material?: Material;\n};\n\nexport type SimpleMeshLayerProps<DataT = any> = _SimpleMeshLayerProps<DataT> & LayerProps<DataT>;\n\nconst defaultProps: DefaultProps<SimpleMeshLayerProps> = {\n  mesh: {type: 'object', value: null, async: true},\n  texture: {type: 'image', value: null, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  // Whether the color attribute in a mesh will be used\n  // This prop will be removed and set to true in next major release\n  _useMeshColors: {type: 'boolean', value: false},\n\n  // _instanced is a hack to use world position instead of meter offsets in mesh\n  // TODO - formalize API\n  _instanced: true,\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: true,\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []}\n};\n\n/** Render a number of instances of an arbitrary 3D geometry. */\nexport default class SimpleMeshLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_SimpleMeshLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'SimpleMeshLayer';\n\n  state!: {\n    materialParser?: GLTFMaterialParser;\n    model?: Model;\n    emptyTexture: Texture2D;\n    hasNormals?: boolean;\n  };\n\n  getShaders() {\n    const transpileToGLSL100 = !isWebGL2(this.context.gl);\n\n    const defines: any = {};\n\n    if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n      defines.DERIVATIVES_AVAILABLE = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, phongLighting, picking],\n      transpileToGLSL100,\n      defines\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    // attributeManager is always defined in a primitive layer\n    attributeManager!.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    const {props, oldProps, changeFlags} = params;\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      this.state.model?.delete();\n      if (props.mesh) {\n        this.state.model = this.getModel(props.mesh as Mesh);\n\n        const attributes = (props.mesh as any).attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      // attributeManager is always defined in a primitive layer\n      this.getAttributeManager()!.invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n    }\n  }\n\n  finalizeState(context: LayerContext) {\n    super.finalizeState(context);\n\n    this.state.emptyTexture.delete();\n  }\n\n  draw({uniforms}) {\n    if (!this.state.model) {\n      return;\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, coordinateSystem, _instanced} = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        sizeScale,\n        composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n        flatShading: !this.state.hasNormals\n      })\n      .draw();\n  }\n\n  protected getModel(mesh: Mesh): Model {\n    const model = new Model(this.context.gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: getGeometry(mesh, this.props._useMeshColors),\n      isInstanced: true\n    });\n\n    const {texture} = this.props;\n    const {emptyTexture} = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n\n    return model;\n  }\n\n  private setTexture(texture: Texture2D): void {\n    const {emptyTexture, model} = this.state;\n\n    // props.mesh may not be ready at this time.\n    // The sampler will be set when `getModel` is called\n    if (model) {\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}