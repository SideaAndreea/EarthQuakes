{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { log } from '@deck.gl/core';\nexport default class Tile2DHeader {\n  constructor(index) {\n    _defineProperty(this, \"index\", void 0);\n\n    _defineProperty(this, \"isVisible\", void 0);\n\n    _defineProperty(this, \"isSelected\", void 0);\n\n    _defineProperty(this, \"parent\", void 0);\n\n    _defineProperty(this, \"children\", void 0);\n\n    _defineProperty(this, \"content\", void 0);\n\n    _defineProperty(this, \"state\", void 0);\n\n    _defineProperty(this, \"layers\", void 0);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"bbox\", void 0);\n\n    _defineProperty(this, \"zoom\", void 0);\n\n    _defineProperty(this, \"userData\", void 0);\n\n    _defineProperty(this, \"_abortController\", void 0);\n\n    _defineProperty(this, \"_loader\", void 0);\n\n    _defineProperty(this, \"_loaderId\", void 0);\n\n    _defineProperty(this, \"_isLoaded\", void 0);\n\n    _defineProperty(this, \"_isCancelled\", void 0);\n\n    _defineProperty(this, \"_needsReload\", void 0);\n\n    this.index = index;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n    this.content = null;\n    this._loader = undefined;\n    this._abortController = null;\n    this._loaderId = 0;\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n  }\n\n  get data() {\n    return this.isLoading && this._loader ? this._loader.then(() => this.data) : this.content;\n  }\n\n  get isLoaded() {\n    return this._isLoaded && !this._needsReload;\n  }\n\n  get isLoading() {\n    return Boolean(this._loader) && !this._isCancelled;\n  }\n\n  get needsReload() {\n    return this._needsReload || this._isCancelled;\n  }\n\n  get byteLength() {\n    const result = this.content ? this.content.byteLength : 0;\n\n    if (!Number.isFinite(result)) {\n      log.error('byteLength not defined in tile data')();\n    }\n\n    return result;\n  }\n\n  async _loadData(_ref) {\n    let {\n      getData,\n      requestScheduler,\n      onLoad,\n      onError\n    } = _ref;\n    const {\n      index,\n      id,\n      bbox,\n      userData,\n      zoom\n    } = this;\n    const loaderId = this._loaderId;\n    this._abortController = new AbortController();\n    const {\n      signal\n    } = this._abortController;\n    const requestToken = await requestScheduler.scheduleRequest(this, tile => {\n      return tile.isSelected ? 1 : -1;\n    });\n\n    if (!requestToken) {\n      this._isCancelled = true;\n      return;\n    }\n\n    if (this._isCancelled) {\n      requestToken.done();\n      return;\n    }\n\n    let tileData = null;\n    let error;\n\n    try {\n      tileData = await getData({\n        index,\n        id,\n        bbox,\n        userData,\n        zoom,\n        signal\n      });\n    } catch (err) {\n      error = err || true;\n    } finally {\n      requestToken.done();\n    }\n\n    if (loaderId !== this._loaderId) {\n      return;\n    }\n\n    this._loader = undefined;\n    this.content = tileData;\n\n    if (this._isCancelled && !tileData) {\n      this._isLoaded = false;\n      return;\n    }\n\n    this._isLoaded = true;\n    this._isCancelled = false;\n\n    if (error) {\n      onError(error, this);\n    } else {\n      onLoad(this);\n    }\n  }\n\n  loadData(opts) {\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n    this._loaderId++;\n    this._loader = this._loadData(opts);\n    return this._loader;\n  }\n\n  setNeedsReload() {\n    if (this.isLoading) {\n      this.abort();\n      this._loader = undefined;\n    }\n\n    this._needsReload = true;\n  }\n\n  abort() {\n    var _this$_abortControlle;\n\n    if (this.isLoaded) {\n      return;\n    }\n\n    this._isCancelled = true;\n    (_this$_abortControlle = this._abortController) === null || _this$_abortControlle === void 0 ? void 0 : _this$_abortControlle.abort();\n  }\n\n}","map":{"version":3,"mappings":"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","names":["log","Tile2DHeader","constructor","index","_defineProperty","isVisible","isSelected","parent","children","content","_loader","undefined","_abortController","_loaderId","_isLoaded","_isCancelled","_needsReload","data","isLoading","then","isLoaded","Boolean","needsReload","byteLength","result","Number","isFinite","error","_loadData","getData","requestScheduler","onLoad","onError","id","bbox","userData","zoom","loaderId","AbortController","signal","requestToken","scheduleRequest","tile","done","tileData","err","loadData","opts","setNeedsReload","abort"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@deck.gl\\geo-layers\\src\\tile-layer\\tile-2d-header.ts"],"sourcesContent":["/* eslint-env browser */\nimport {Layer, log} from '@deck.gl/core';\nimport {RequestScheduler} from '@loaders.gl/loader-utils';\nimport {TileBoundingBox, TileIndex, TileLoadProps} from './types';\n\nexport type TileLoadDataProps<DataT = any> = {\n  requestScheduler: RequestScheduler;\n  getData: (props: TileLoadProps) => Promise<DataT>;\n  onLoad: (tile: Tile2DHeader<DataT>) => void;\n  onError: (error: any, tile: Tile2DHeader<DataT>) => void;\n};\n\nexport default class Tile2DHeader<DataT = any> {\n  index: TileIndex;\n  isVisible: boolean;\n  isSelected: boolean;\n  parent: Tile2DHeader | null;\n  children: Tile2DHeader[] | null;\n  content: DataT | null;\n  state?: number;\n  layers?: Layer[] | null;\n\n  id!: string; // assigned _always_ with result of `getTileId`\n  bbox!: TileBoundingBox; // assigned _always_ with result of `getTileMetadata`\n  zoom!: number; // assigned _always_ with result of `getTileZoom`\n  userData?: Record<string, any>; // _may be_ assigned with result of `getTileMetadata`\n\n  private _abortController: AbortController | null;\n  private _loader: Promise<void> | undefined;\n  private _loaderId: number;\n  private _isLoaded: boolean;\n  private _isCancelled: boolean;\n  private _needsReload: boolean;\n\n  constructor(index: TileIndex) {\n    this.index = index;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n\n    this.content = null;\n\n    this._loader = undefined;\n    this._abortController = null;\n    this._loaderId = 0;\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n  }\n\n  get data(): Promise<DataT | null> | DataT | null {\n    return this.isLoading && this._loader ? this._loader.then(() => this.data) : this.content;\n  }\n\n  get isLoaded(): boolean {\n    return this._isLoaded && !this._needsReload;\n  }\n\n  get isLoading(): boolean {\n    return Boolean(this._loader) && !this._isCancelled;\n  }\n\n  get needsReload(): boolean {\n    return this._needsReload || this._isCancelled;\n  }\n\n  get byteLength(): number {\n    const result = this.content ? (this.content as any).byteLength : 0;\n    if (!Number.isFinite(result)) {\n      log.error('byteLength not defined in tile data')();\n    }\n    return result;\n  }\n\n  /* eslint-disable max-statements */\n  private async _loadData({\n    getData,\n    requestScheduler,\n    onLoad,\n    onError\n  }: TileLoadDataProps<DataT>): Promise<void> {\n    const {index, id, bbox, userData, zoom} = this;\n    const loaderId = this._loaderId;\n\n    this._abortController = new AbortController();\n    const {signal} = this._abortController;\n\n    // @ts-expect-error (2345) Argument of type '(tile: any) => 1 | -1' is not assignable ...\n    const requestToken = await requestScheduler.scheduleRequest(this, tile => {\n      return tile.isSelected ? 1 : -1;\n    });\n\n    if (!requestToken) {\n      this._isCancelled = true;\n      return;\n    }\n    // A tile can be cancelled while being scheduled\n    if (this._isCancelled) {\n      requestToken.done();\n      return;\n    }\n\n    let tileData: DataT | null = null;\n    let error;\n    try {\n      tileData = await getData({index, id, bbox, userData, zoom, signal});\n    } catch (err) {\n      error = err || true;\n    } finally {\n      requestToken.done();\n    }\n\n    // If loadData has been called with a newer version, discard the result from this operation\n    if (loaderId !== this._loaderId) {\n      return;\n    }\n    // Clear the `isLoading` flag\n    this._loader = undefined;\n    // Rewrite tile content with the result of getTileData if successful, or `null` in case of\n    // error or cancellation\n    this.content = tileData;\n    // If cancelled, do not invoke the callbacks\n    // Consider it loaded if we tried to cancel but `getTileData` still returned data\n    if (this._isCancelled && !tileData) {\n      this._isLoaded = false;\n      return;\n    }\n    this._isLoaded = true;\n    this._isCancelled = false;\n\n    if (error) {\n      onError(error, this);\n    } else {\n      onLoad(this);\n    }\n  }\n\n  loadData(opts: TileLoadDataProps): Promise<void> {\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n    this._loaderId++;\n    this._loader = this._loadData(opts);\n    return this._loader;\n  }\n\n  setNeedsReload(): void {\n    if (this.isLoading) {\n      this.abort();\n      this._loader = undefined;\n    }\n    this._needsReload = true;\n  }\n\n  abort(): void {\n    if (this.isLoaded) {\n      return;\n    }\n\n    this._isCancelled = true;\n    this._abortController?.abort();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}