{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Layer from './layer';\nimport debug from '../debug';\nimport { flatten } from '../utils/flatten';\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\nexport default class CompositeLayer extends Layer {\n  get isComposite() {\n    return true;\n  }\n\n  get isLoaded() {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  getSubLayers() {\n    return this.internalState && this.internalState.subLayers || [];\n  }\n\n  initializeState(context) {}\n\n  setState(updateObject) {\n    super.setState(updateObject);\n    this.setNeedsUpdate();\n  }\n\n  getPickingInfo(_ref) {\n    let {\n      info\n    } = _ref;\n    const {\n      object\n    } = info;\n    const isDataWrapped = object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n    return info;\n  }\n\n  filterSubLayer(context) {\n    return true;\n  }\n\n  shouldRenderSubLayer(subLayerId, data) {\n    return data && data.length;\n  }\n\n  getSubLayerClass(subLayerId, DefaultLayerClass) {\n    const {\n      _subLayerProps: overridingProps\n    } = this.props;\n    return overridingProps && overridingProps[subLayerId] && overridingProps[subLayerId].type || DefaultLayerClass;\n  }\n\n  getSubLayerRow(row, sourceObject, sourceObjectIndex) {\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  getSubLayerAccessor(accessor) {\n    if (typeof accessor === 'function') {\n      const objectInfo = {\n        index: -1,\n        data: this.props.data,\n        target: []\n      };\n      return (x, i) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          return accessor(x.__source.object, objectInfo);\n        }\n\n        return accessor(x, i);\n      };\n    }\n\n    return accessor;\n  }\n\n  getSubLayerProps() {\n    let sublayerProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _this$props$updateTri;\n\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      id: '',\n      updateTriggers: {},\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation\n    };\n    const overridingSublayerProps = overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers = overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n\n    if (overridingSublayerProps) {\n      const propTypes = this.constructor._propTypes;\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(newProps, sublayerProps, overridingSublayerProps);\n    newProps.id = \"\".concat(this.props.id, \"-\").concat(sublayerId);\n    newProps.updateTriggers = {\n      all: (_this$props$updateTri = this.props.updateTriggers) === null || _this$props$updateTri === void 0 ? void 0 : _this$props$updateTri.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  _updateAutoHighlight(info) {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n\n  _getAttributeManager() {\n    return null;\n  }\n\n  _postUpdate(updateParams, forceUpdate) {\n    let subLayers = this.internalState.subLayers;\n    const shouldUpdate = !subLayers || this.needsUpdate();\n\n    if (shouldUpdate) {\n      const subLayersList = this.renderLayers();\n      subLayers = flatten(subLayersList, Boolean);\n      this.internalState.subLayers = subLayers;\n    }\n\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n\n}\n\n_defineProperty(CompositeLayer, \"layerName\", 'CompositeLayer');","map":{"version":3,"mappings":"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","names":["Layer","debug","flatten","TRACE_RENDER_LAYERS","CompositeLayer","isComposite","isLoaded","getSubLayers","every","layer","internalState","subLayers","initializeState","context","setState","updateObject","setNeedsUpdate","getPickingInfo","info","object","isDataWrapped","__source","parent","id","index","filterSubLayer","shouldRenderSubLayer","subLayerId","data","length","getSubLayerClass","DefaultLayerClass","_subLayerProps","overridingProps","props","type","getSubLayerRow","row","sourceObject","sourceObjectIndex","getSubLayerAccessor","accessor","objectInfo","target","x","i","getSubLayerProps","sublayerProps","opacity","pickable","visible","parameters","getPolygonOffset","highlightedObjectIndex","autoHighlight","highlightColor","coordinateSystem","coordinateOrigin","wrapLongitude","positionFormat","modelMatrix","extensions","fetch","operation","newProps","updateTriggers","overridingSublayerProps","overridingSublayerTriggers","sublayerId","propTypes","constructor","_propTypes","subLayerPropTypes","key","propType","Object","assign","all","_this$props$updateTri","extension","passThroughProps","call","_updateAutoHighlight","updateAutoHighlight","_getAttributeManager","_postUpdate","updateParams","forceUpdate","shouldUpdate","needsUpdate","subLayersList","renderLayers","Boolean"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@deck.gl\\core\\src\\lib\\composite-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Layer, {UpdateParameters} from './layer';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\n\nimport type AttributeManager from './attribute/attribute-manager';\nimport type {PickingInfo, GetPickingInfoParams} from './picking/pick-info';\nimport type {FilterContext} from '../passes/layers-pass';\nimport type {LayersList, LayerContext} from './layer-manager';\nimport type {CompositeLayerProps, Accessor, AccessorContext} from '../types/layer-props';\nimport {ConstructorOf} from '../types/types';\n\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\n\nexport default abstract class CompositeLayer<PropsT = {}> extends Layer<\n  PropsT & Required<CompositeLayerProps>\n> {\n  static layerName: string = 'CompositeLayer';\n\n  /** `true` if this layer renders other layers */\n  get isComposite(): boolean {\n    return true;\n  }\n\n  /** Returns true if all async resources are loaded */\n  get isLoaded(): boolean {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  /** Return last rendered sub layers */\n  getSubLayers(): Layer[] {\n    return (this.internalState && this.internalState.subLayers) || [];\n  }\n\n  // initializeState is usually not needed for composite layers\n  // Provide empty definition to disable check for missing definition\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  initializeState(context: LayerContext): void {}\n\n  /** Updates selected state members and marks the composite layer to need rerender */\n  setState(updateObject: any): void {\n    super.setState(updateObject);\n    // Trigger a layer update\n    // Although conceptually layer.draw and compositeLayer.renderLayers are equivalent,\n    // they are executed during different lifecycles.\n    // draw can be called without calling updateState (e.g. most viewport changes),\n    // while renderLayers can only be called during a recursive layer update.\n    this.setNeedsUpdate();\n  }\n\n  /** called to augment the info object that is bubbled up from a sublayer\n      override Layer.getPickingInfo() because decoding / setting uniform do\n      not apply to a composite layer. */\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    const {object} = info;\n    const isDataWrapped =\n      object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    // override object with picked data\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n\n    return info;\n  }\n\n  // Implement to generate subLayers\n  abstract renderLayers(): Layer | null | LayersList;\n\n  /**\n   * Filters sub layers at draw time. Return true if the sub layer should be drawn.\n   */\n  filterSubLayer(context: FilterContext): boolean {\n    return true;\n  }\n\n  /** Returns true if sub layer needs to be rendered */\n  protected shouldRenderSubLayer(subLayerId: string, data: any): boolean {\n    return data && data.length;\n  }\n\n  /** Returns sub layer class for a specific sublayer */\n  protected getSubLayerClass<T extends Layer>(\n    subLayerId: string,\n    DefaultLayerClass: ConstructorOf<T>\n  ): ConstructorOf<T> {\n    const {_subLayerProps: overridingProps} = this.props;\n\n    return (\n      (overridingProps &&\n        overridingProps[subLayerId] &&\n        (overridingProps[subLayerId].type as ConstructorOf<T>)) ||\n      DefaultLayerClass\n    );\n  }\n\n  /** When casting user data into another format to pass to sublayers,\n      add reference to the original object and object index */\n  protected getSubLayerRow<T>(row: T, sourceObject: any, sourceObjectIndex: number): T {\n    // @ts-ignore (TS2339) adding undefined property\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  /** Some composite layers cast user data into another format before passing to sublayers\n    We need to unwrap them before calling the accessor so that they see the original data\n    objects */\n  protected getSubLayerAccessor<In, Out>(accessor: Accessor<In, Out>): Accessor<In, Out> {\n    if (typeof accessor === 'function') {\n      const objectInfo: AccessorContext<In> = {\n        index: -1,\n        // @ts-ignore accessing resolved data\n        data: this.props.data,\n        target: []\n      };\n      return (x: any, i: AccessorContext<In>) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          // @ts-ignore (TS2349) Out is never a function\n          return accessor(x.__source.object as In, objectInfo);\n        }\n        // @ts-ignore (TS2349) Out is never a function\n        return accessor(x as In, i);\n      };\n    }\n    return accessor;\n  }\n\n  // eslint-disable-next-line complexity\n  /** Returns sub layer props for a specific sublayer */\n  protected getSubLayerProps(\n    sublayerProps: {\n      id?: string;\n      updateTriggers?: Record<string, any>;\n      [propName: string]: any;\n    } = {}\n  ): any {\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      id: '',\n      updateTriggers: {},\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation\n    };\n\n    const overridingSublayerProps =\n      overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers =\n      overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n\n    if (overridingSublayerProps) {\n      // @ts-ignore (TS2339) hidden property\n      const propTypes = this.constructor._propTypes;\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n        // eslint-disable-next-line\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(\n      newProps,\n      sublayerProps,\n      // experimental feature that allows users to override sublayer props via parent layer prop\n      overridingSublayerProps\n    );\n    newProps.id = `${this.props.id}-${sublayerId}`;\n    newProps.updateTriggers = {\n      all: this.props.updateTriggers?.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n\n    // Pass through extension props\n    // @ts-ignore (TS2532) extensions is always defined after merging with default props\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  /** Update sub layers to highlight the hovered object */\n  protected _updateAutoHighlight(info: PickingInfo): void {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n\n  /** Override base Layer method */\n  protected _getAttributeManager(): AttributeManager | null {\n    return null;\n  }\n\n  /** (Internal) Called after an update to rerender sub layers */\n  protected _postUpdate(updateParams: UpdateParameters<this>, forceUpdate: boolean) {\n    // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n    let subLayers = this.internalState.subLayers as Layer[];\n    const shouldUpdate = !subLayers || this.needsUpdate();\n    if (shouldUpdate) {\n      const subLayersList = this.renderLayers();\n      // Flatten the returned array, removing any null, undefined or false\n      // this allows layers to render sublayers conditionally\n      // (see CompositeLayer.renderLayers docs)\n      subLayers = flatten(subLayersList, Boolean) as Layer[];\n      // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n      this.internalState.subLayers = subLayers;\n    }\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    // populate reference to parent layer (this layer)\n    // NOTE: needs to be done even when reusing layers as the parent may have changed\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}