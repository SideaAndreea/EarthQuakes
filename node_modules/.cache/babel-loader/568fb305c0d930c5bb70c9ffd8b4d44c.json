{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Vector3 } from '@math.gl/core';\nimport { INTERSECTION } from '../../constants';\nconst scratchVector = new Vector3();\nconst scratchNormal = new Vector3();\nexport default class AxisAlignedBoundingBox {\n  constructor() {\n    let minimum = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 0];\n    let maximum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    let center = arguments.length > 2 ? arguments[2] : undefined;\n\n    _defineProperty(this, \"center\", void 0);\n\n    _defineProperty(this, \"halfDiagonal\", void 0);\n\n    _defineProperty(this, \"minimum\", void 0);\n\n    _defineProperty(this, \"maximum\", void 0);\n\n    center = center || scratchVector.copy(minimum).add(maximum).scale(0.5);\n    this.center = new Vector3(center);\n    this.halfDiagonal = new Vector3(maximum).subtract(this.center);\n    this.minimum = new Vector3(minimum);\n    this.maximum = new Vector3(maximum);\n  }\n\n  clone() {\n    return new AxisAlignedBoundingBox(this.minimum, this.maximum, this.center);\n  }\n\n  equals(right) {\n    return this === right || Boolean(right) && this.minimum.equals(right.minimum) && this.maximum.equals(right.maximum);\n  }\n\n  transform(transform) {\n    this.center.transformAsPoint(transform);\n    this.halfDiagonal.transform(transform);\n    this.minimum.transform(transform);\n    this.maximum.transform(transform);\n    return this;\n  }\n\n  intersectPlane(plane) {\n    const {\n      halfDiagonal\n    } = this;\n    const normal = scratchNormal.from(plane.normal);\n    const e = halfDiagonal.x * Math.abs(normal.x) + halfDiagonal.y * Math.abs(normal.y) + halfDiagonal.z * Math.abs(normal.z);\n    const s = this.center.dot(normal) + plane.distance;\n\n    if (s - e > 0) {\n      return INTERSECTION.INSIDE;\n    }\n\n    if (s + e < 0) {\n      return INTERSECTION.OUTSIDE;\n    }\n\n    return INTERSECTION.INTERSECTING;\n  }\n\n  distanceTo(point) {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  distanceSquaredTo(point) {\n    const offset = scratchVector.from(point).subtract(this.center);\n    const {\n      halfDiagonal\n    } = this;\n    let distanceSquared = 0.0;\n    let d;\n    d = Math.abs(offset.x) - halfDiagonal.x;\n\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.y) - halfDiagonal.y;\n\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.z) - halfDiagonal.z;\n\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    return distanceSquared;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Vector3","INTERSECTION","scratchVector","scratchNormal","AxisAlignedBoundingBox","constructor","minimum","maximum","center","_defineProperty","copy","add","scale","halfDiagonal","subtract","clone","equals","right","Boolean","transform","transformAsPoint","intersectPlane","plane","normal","from","e","x","Math","abs","y","z","s","dot","distance","INSIDE","OUTSIDE","INTERSECTING","distanceTo","point","sqrt","distanceSquaredTo","offset","distanceSquared","d"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@math.gl\\culling\\src\\lib\\bounding-volumes\\axis-aligned-bounding-box.ts"],"sourcesContent":["import {BoundingVolume} from './bounding-volume';\nimport {Vector3} from '@math.gl/core';\nimport Plane from '../plane';\nimport {INTERSECTION} from '../../constants';\n\nconst scratchVector = new Vector3();\nconst scratchNormal = new Vector3();\n\n/**\n * An axis aligned bounding box - aligned with coordinate axes\n * @see BoundingVolume\n * @see BoundingRectangle\n * @see OrientedBoundingBox\n */\nexport default class AxisAlignedBoundingBox implements BoundingVolume {\n  /** The center point of the bounding box. */\n  readonly center: Vector3;\n  /** The positive half diagonal of the bounding box. */\n  readonly halfDiagonal: Vector3;\n  /** The minimum point defining the bounding box. [0, 0, 0] for empty box */\n  readonly minimum: Vector3;\n  /** The maximum point defining the bounding box. [0, 0, 0] for empty box */\n  readonly maximum: Vector3;\n\n  /**\n   * Creates an instance of an AxisAlignedBoundingBox from the minimum and maximum points along the x, y, and z axes.\n   * @param minimum=[0, 0, 0] The minimum point along the x, y, and z axes.\n   * @param maximum=[0, 0, 0] The maximum point along the x, y, and z axes.\n   * @param center The center of the box; automatically computed if not supplied.\n   */\n  constructor(\n    minimum: readonly number[] = [0, 0, 0],\n    maximum: readonly number[] = [0, 0, 0],\n    center?: readonly number[]\n  ) {\n    // If center was not defined, compute it.\n    center = center || scratchVector.copy(minimum).add(maximum).scale(0.5);\n    this.center = new Vector3(center);\n    this.halfDiagonal = new Vector3(maximum).subtract(this.center);\n\n    /**\n     * The minimum point defining the bounding box.\n     * @type {Vector3}\n     * @default {@link 0, 0, 0}\n     */\n    this.minimum = new Vector3(minimum);\n\n    /**\n     * The maximum point defining the bounding box.\n     * @type {Vector3}\n     * @default {@link 0, 0, 0}\n     */\n    this.maximum = new Vector3(maximum);\n  }\n\n  /**\n   * Duplicates a AxisAlignedBoundingBox instance.\n   *\n   * @returns {AxisAlignedBoundingBox} A new AxisAlignedBoundingBox instance.\n   */\n  clone(): AxisAlignedBoundingBox {\n    return new AxisAlignedBoundingBox(this.minimum, this.maximum, this.center);\n  }\n\n  /**\n   * Compares the provided AxisAlignedBoundingBox componentwise and returns\n   * <code>true</code> if they are equal, <code>false</code> otherwise.\n   *\n   * @param {AxisAlignedBoundingBox} [right] The second AxisAlignedBoundingBox to compare with.\n   * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n   */\n  equals(right: AxisAlignedBoundingBox): boolean {\n    return (\n      this === right ||\n      (Boolean(right) && this.minimum.equals(right.minimum) && this.maximum.equals(right.maximum))\n    );\n  }\n\n  /**\n   * Applies a 4x4 affine transformation matrix to a bounding sphere.\n   * @param transform The transformation matrix to apply to the bounding sphere.\n   * @returns itself, i.e. the modified BoundingVolume.\n   */\n  transform(transform: readonly number[]): this {\n    this.center.transformAsPoint(transform);\n    // TODO - this.halfDiagonal.transformAsVector(transform);\n    this.halfDiagonal.transform(transform);\n    this.minimum.transform(transform);\n    this.maximum.transform(transform);\n    return this;\n  }\n\n  /**\n   * Determines which side of a plane a box is located.\n   */\n  intersectPlane(plane: Plane): number {\n    const {halfDiagonal} = this;\n    const normal = scratchNormal.from(plane.normal);\n    const e =\n      halfDiagonal.x * Math.abs(normal.x) +\n      halfDiagonal.y * Math.abs(normal.y) +\n      halfDiagonal.z * Math.abs(normal.z);\n    const s = this.center.dot(normal) + plane.distance; // signed distance from center\n\n    if (s - e > 0) {\n      return INTERSECTION.INSIDE;\n    }\n\n    if (s + e < 0) {\n      // Not in front because normals point inward\n      return INTERSECTION.OUTSIDE;\n    }\n\n    return INTERSECTION.INTERSECTING;\n  }\n\n  /** Computes the estimated distance from the closest point on a bounding box to a point. */\n  distanceTo(point: readonly number[]): number {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  /** Computes the estimated distance squared from the closest point on a bounding box to a point. */\n  distanceSquaredTo(point: readonly number[]): number {\n    const offset = scratchVector.from(point).subtract(this.center);\n    const {halfDiagonal} = this;\n\n    let distanceSquared = 0.0;\n    let d;\n\n    d = Math.abs(offset.x) - halfDiagonal.x;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.y) - halfDiagonal.y;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.z) - halfDiagonal.z;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    return distanceSquared;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}