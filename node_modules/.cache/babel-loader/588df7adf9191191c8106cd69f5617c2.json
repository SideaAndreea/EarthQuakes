{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport TinySDF from '@mapbox/tiny-sdf';\nimport { log } from '@deck.gl/core';\nimport { buildMapping } from './utils';\nimport LRUCache from './lru-cache';\n\nfunction getDefaultCharacterSet() {\n  const charSet = [];\n\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n\n  return charSet;\n}\n\nexport const DEFAULT_FONT_SETTINGS = {\n  fontFamily: 'Monaco, monospace',\n  fontWeight: 'normal',\n  characterSet: getDefaultCharacterSet(),\n  fontSize: 64,\n  buffer: 4,\n  sdf: false,\n  cutoff: 0.25,\n  radius: 12,\n  smoothing: 0.1\n};\nconst MAX_CANVAS_WIDTH = 1024;\nconst BASELINE_SCALE = 0.9;\nconst HEIGHT_SCALE = 1.2;\nconst CACHE_LIMIT = 3;\nlet cache = new LRUCache(CACHE_LIMIT);\n\nfunction getNewChars(cacheKey, characterSet) {\n  let newCharSet;\n\n  if (typeof characterSet === 'string') {\n    newCharSet = new Set(Array.from(characterSet));\n  } else {\n    newCharSet = new Set(characterSet);\n  }\n\n  const cachedFontAtlas = cache.get(cacheKey);\n\n  if (!cachedFontAtlas) {\n    return newCharSet;\n  }\n\n  for (const char in cachedFontAtlas.mapping) {\n    if (newCharSet.has(char)) {\n      newCharSet.delete(char);\n    }\n  }\n\n  return newCharSet;\n}\n\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = \"\".concat(fontWeight, \" \").concat(fontSize, \"px \").concat(fontFamily);\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'alphabetic';\n  ctx.textAlign = 'left';\n}\n\nexport function setFontAtlasCacheLimit(limit) {\n  log.assert(Number.isFinite(limit) && limit >= CACHE_LIMIT, 'Invalid cache limit');\n  cache = new LRUCache(limit);\n}\nexport default class FontAtlasManager {\n  constructor() {\n    _defineProperty(this, \"props\", { ...DEFAULT_FONT_SETTINGS\n    });\n\n    _defineProperty(this, \"_key\", void 0);\n\n    _defineProperty(this, \"_atlas\", void 0);\n  }\n\n  get texture() {\n    return this._atlas;\n  }\n\n  get mapping() {\n    return this._atlas && this._atlas.mapping;\n  }\n\n  get scale() {\n    return HEIGHT_SCALE;\n  }\n\n  setProps() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    Object.assign(this.props, props);\n    const oldKey = this._key;\n    this._key = this._getKey();\n    const charSet = getNewChars(this._key, this.props.characterSet);\n    const cachedFontAtlas = cache.get(this._key);\n\n    if (cachedFontAtlas && charSet.size === 0) {\n      if (this._key !== oldKey) {\n        this._atlas = cachedFontAtlas;\n      }\n\n      return;\n    }\n\n    const fontAtlas = this._generateFontAtlas(this._key, charSet, cachedFontAtlas);\n\n    this._atlas = fontAtlas;\n    cache.set(this._key, fontAtlas);\n  }\n\n  _generateFontAtlas(key, characterSet, cachedFontAtlas) {\n    const {\n      fontFamily,\n      fontWeight,\n      fontSize,\n      buffer,\n      sdf,\n      radius,\n      cutoff\n    } = this.props;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n\n    const ctx = canvas.getContext('2d');\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n    const {\n      mapping,\n      canvasHeight,\n      xOffset,\n      yOffset\n    } = buildMapping({\n      getFontWidth: char => ctx.measureText(char).width,\n      fontHeight: fontSize * HEIGHT_SCALE,\n      buffer,\n      characterSet,\n      maxCanvasWidth: MAX_CANVAS_WIDTH,\n      ...(cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset\n      })\n    });\n\n    if (canvas.height !== canvasHeight) {\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      canvas.height = canvasHeight;\n      ctx.putImageData(imageData, 0, 0);\n    }\n\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    if (sdf) {\n      const tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n      const imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n\n      for (const char of characterSet) {\n        populateAlphaChannel(tinySDF.draw(char), imageData);\n        ctx.putImageData(imageData, mapping[char].x - buffer, mapping[char].y + buffer);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);\n      }\n    }\n\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  _getKey() {\n    const {\n      fontFamily,\n      fontWeight,\n      fontSize,\n      buffer,\n      sdf,\n      radius,\n      cutoff\n    } = this.props;\n\n    if (sdf) {\n      return \"\".concat(fontFamily, \" \").concat(fontWeight, \" \").concat(fontSize, \" \").concat(buffer, \" \").concat(radius, \" \").concat(cutoff);\n    }\n\n    return \"\".concat(fontFamily, \" \").concat(fontWeight, \" \").concat(fontSize, \" \").concat(buffer);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["TinySDF","log","buildMapping","LRUCache","getDefaultCharacterSet","charSet","i","push","String","fromCharCode","DEFAULT_FONT_SETTINGS","fontFamily","fontWeight","characterSet","fontSize","buffer","sdf","cutoff","radius","smoothing","MAX_CANVAS_WIDTH","BASELINE_SCALE","HEIGHT_SCALE","CACHE_LIMIT","cache","getNewChars","cacheKey","newCharSet","Set","Array","from","cachedFontAtlas","get","char","mapping","has","delete","populateAlphaChannel","alphaChannel","imageData","length","data","setTextStyle","ctx","font","fillStyle","textBaseline","textAlign","setFontAtlasCacheLimit","limit","assert","Number","isFinite","FontAtlasManager","constructor","_defineProperty","texture","_atlas","scale","setProps","props","Object","assign","oldKey","_key","_getKey","size","fontAtlas","_generateFontAtlas","set","key","canvas","document","createElement","width","getContext","canvasHeight","xOffset","yOffset","getFontWidth","measureText","fontHeight","maxCanvasWidth","height","getImageData","putImageData","tinySDF","draw","x","y","fillText"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplicații\\earthquakes\\node_modules\\@deck.gl\\layers\\src\\text-layer\\font-atlas-manager.ts"],"sourcesContent":["/* global document */\nimport TinySDF from '@mapbox/tiny-sdf';\n\nimport {log} from '@deck.gl/core';\n\nimport {buildMapping, CharacterMapping} from './utils';\nimport LRUCache from './lru-cache';\n\nimport type {Texture} from '@deck.gl/core';\n\nfunction getDefaultCharacterSet() {\n  const charSet: string[] = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\n\nexport type FontSettings = {\n  /** CSS font family\n   * @default 'Monaco, monospace'\n   */\n  fontFamily?: string;\n  /** CSS font weight\n   * @default 'normal'\n   */\n  fontWeight?: string | number;\n  /** Specifies a list of characters to include in the font.\n   * @default (ASCII characters 32-128)\n   */\n  characterSet?: Set<string> | string[] | string;\n  /** Font size in pixels. This option is only applied for generating `fontAtlas`, it does not impact the size of displayed text labels. Larger `fontSize` will give you a sharper look when rendering text labels with very large font sizes. But larger `fontSize` requires more time and space to generate the `fontAtlas`.\n   * @default 64\n   */\n  fontSize?: number;\n  /** Whitespace buffer around each side of the character. In general, bigger `fontSize` requires bigger `buffer`. Increase `buffer` will add more space between each character when layout `characterSet` in `fontAtlas`. This option could be tuned to provide sufficient space for drawing each character and avoiding overlapping of neighboring characters.\n   * @default 4\n   */\n  buffer?: number;\n  /** Flag to enable / disable `sdf`. [`sdf` (Signed Distance Fields)](http://cs.brown.edu/people/pfelzens/papers/dt-final.pdf) will provide a sharper look when rendering with very large or small font sizes. `TextLayer` integrates with [`TinySDF`](https://github.com/mapbox/tiny-sdf) which implements the `sdf` algorithm.\n   * @default false\n   */\n  sdf?: boolean;\n  /** How much of the radius (relative) is used for the inside part the glyph. Bigger `cutoff` makes character thinner. Smaller `cutoff` makes character look thicker. Only applies when `sdf: true`.\n   * @default 0.25\n   */\n  cutoff?: number;\n  /** How many pixels around the glyph shape to use for encoding distance. Bigger radius yields higher quality outcome. Only applies when `sdf: true`.\n   * @default 12\n   */\n  radius?: number;\n  /** How much smoothing to apply to the text edges. Only applies when `sdf: true`.\n   * @default 0.1\n   */\n  smoothing?: number;\n};\n\nexport const DEFAULT_FONT_SETTINGS: Required<FontSettings> = {\n  fontFamily: 'Monaco, monospace',\n  fontWeight: 'normal',\n  characterSet: getDefaultCharacterSet(),\n  fontSize: 64,\n  buffer: 4,\n  sdf: false,\n  cutoff: 0.25,\n  radius: 12,\n  smoothing: 0.1\n};\n\nconst MAX_CANVAS_WIDTH = 1024;\n\nconst BASELINE_SCALE = 0.9;\nconst HEIGHT_SCALE = 1.2;\n\n// only preserve latest three fontAtlas\nconst CACHE_LIMIT = 3;\n\ntype FontAtlas = {\n  /** x position of last character in mapping */\n  xOffset: number;\n  /** y position of last character in mapping */\n  yOffset: number;\n  /** bounding box of each character in the texture */\n  mapping: CharacterMapping;\n  /** packed texture */\n  data: HTMLCanvasElement;\n  /** texture width */\n  width: number;\n  /** texture height */\n  height: number;\n};\n\nlet cache = new LRUCache<FontAtlas>(CACHE_LIMIT);\n\n/**\n * get all the chars not in cache\n * @returns chars not in cache\n */\nfunction getNewChars(cacheKey: string, characterSet: Set<string> | string[] | string): Set<string> {\n  let newCharSet: Set<string>;\n  if (typeof characterSet === 'string') {\n    newCharSet = new Set(Array.from(characterSet));\n  } else {\n    newCharSet = new Set(characterSet);\n  }\n\n  const cachedFontAtlas = cache.get(cacheKey);\n  if (!cachedFontAtlas) {\n    return newCharSet;\n  }\n\n  for (const char in cachedFontAtlas.mapping) {\n    if (newCharSet.has(char)) {\n      newCharSet.delete(char);\n    }\n  }\n  return newCharSet;\n}\n\nfunction populateAlphaChannel(alphaChannel: number[], imageData: ImageData): void {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(\n  ctx: CanvasRenderingContext2D,\n  fontFamily: string,\n  fontSize: number,\n  fontWeight: string | number\n): void {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'alphabetic';\n  ctx.textAlign = 'left';\n}\n\n/**\n * Sets the Font Atlas LRU Cache Limit\n * @param {number} limit LRU Cache limit\n */\nexport function setFontAtlasCacheLimit(limit: number): void {\n  log.assert(Number.isFinite(limit) && limit >= CACHE_LIMIT, 'Invalid cache limit');\n\n  cache = new LRUCache(limit);\n}\n\nexport default class FontAtlasManager {\n  /** Font settings */\n  props: Required<FontSettings> = {...DEFAULT_FONT_SETTINGS};\n\n  /** Cache key of the current font atlas */\n  private _key?: string;\n  /** The current font atlas */\n  private _atlas?: FontAtlas;\n\n  get texture(): Texture | undefined {\n    return this._atlas;\n  }\n\n  get mapping(): CharacterMapping | undefined {\n    return this._atlas && this._atlas.mapping;\n  }\n\n  get scale(): number {\n    return HEIGHT_SCALE;\n  }\n\n  setProps(props: FontSettings = {}) {\n    Object.assign(this.props, props);\n\n    // update cache key\n    const oldKey = this._key;\n    this._key = this._getKey();\n\n    const charSet = getNewChars(this._key, this.props.characterSet);\n    const cachedFontAtlas = cache.get(this._key);\n\n    // if a fontAtlas associated with the new settings is cached and\n    // there are no new chars\n    if (cachedFontAtlas && charSet.size === 0) {\n      // update texture with cached fontAtlas\n      if (this._key !== oldKey) {\n        this._atlas = cachedFontAtlas;\n      }\n      return;\n    }\n\n    // update fontAtlas with new settings\n    const fontAtlas = this._generateFontAtlas(this._key, charSet, cachedFontAtlas);\n    this._atlas = fontAtlas;\n\n    // update cache\n    cache.set(this._key, fontAtlas);\n  }\n\n  private _generateFontAtlas(\n    key: string,\n    characterSet: Set<string>,\n    cachedFontAtlas?: FontAtlas\n  ): FontAtlas {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n    const ctx = canvas.getContext('2d')!;\n\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 1. build mapping\n    const {mapping, canvasHeight, xOffset, yOffset} = buildMapping({\n      getFontWidth: char => ctx.measureText(char).width,\n      fontHeight: fontSize * HEIGHT_SCALE,\n      buffer,\n      characterSet,\n      maxCanvasWidth: MAX_CANVAS_WIDTH,\n      ...(cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset\n      })\n    });\n\n    // 2. update canvas\n    // copy old canvas data to new canvas only when height changed\n    if (canvas.height !== canvasHeight) {\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      canvas.height = canvasHeight;\n      ctx.putImageData(imageData, 0, 0);\n    }\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 3. layout characters\n    if (sdf) {\n      const tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n      // used to store distance values from tinySDF\n      // tinySDF.size equals `fontSize + buffer * 2`\n      const imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n\n      for (const char of characterSet) {\n        populateAlphaChannel(tinySDF.draw(char), imageData);\n        ctx.putImageData(imageData, mapping[char].x - buffer, mapping[char].y + buffer);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);\n      }\n    }\n\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  private _getKey(): string {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    if (sdf) {\n      return `${fontFamily} ${fontWeight} ${fontSize} ${buffer} ${radius} ${cutoff}`;\n    }\n    return `${fontFamily} ${fontWeight} ${fontSize} ${buffer}`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}