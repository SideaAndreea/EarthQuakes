{"ast":null,"code":"const vs = \"\\nuniform DATAFILTER_TYPE filter_min;\\nuniform DATAFILTER_TYPE filter_softMin;\\nuniform DATAFILTER_TYPE filter_softMax;\\nuniform DATAFILTER_TYPE filter_max;\\nuniform bool filter_useSoftMargin;\\nuniform bool filter_enabled;\\nuniform bool filter_transformSize;\\n\\n#ifdef NON_INSTANCED_MODEL\\n  #define DATAFILTER_ATTRIB filterValues\\n  #define DATAFILTER_ATTRIB_64LOW filterValues64Low\\n#else\\n  #define DATAFILTER_ATTRIB instanceFilterValues\\n  #define DATAFILTER_ATTRIB_64LOW instanceFilterValues64Low\\n#endif\\n\\nattribute DATAFILTER_TYPE DATAFILTER_ATTRIB;\\n#ifdef DATAFILTER_DOUBLE\\n  attribute DATAFILTER_TYPE DATAFILTER_ATTRIB_64LOW;\\n\\n  uniform DATAFILTER_TYPE filter_min64High;\\n  uniform DATAFILTER_TYPE filter_max64High;\\n#endif\\n\\nvarying float dataFilter_value;\\n\\nfloat dataFilter_reduceValue(float value) {\\n  return value;\\n}\\nfloat dataFilter_reduceValue(vec2 value) {\\n  return min(value.x, value.y);\\n}\\nfloat dataFilter_reduceValue(vec3 value) {\\n  return min(min(value.x, value.y), value.z);\\n}\\nfloat dataFilter_reduceValue(vec4 value) {\\n  return min(min(value.x, value.y), min(value.z, value.w));\\n}\\nvoid dataFilter_setValue(DATAFILTER_TYPE valueFromMin, DATAFILTER_TYPE valueFromMax) {\\n  if (filter_enabled) {\\n    if (filter_useSoftMargin) {\\n      dataFilter_value = dataFilter_reduceValue(\\n        smoothstep(filter_min, filter_softMin, valueFromMin) *\\n        (1.0 - smoothstep(filter_softMax, filter_max, valueFromMax))\\n      );\\n    } else {\\n      dataFilter_value = dataFilter_reduceValue(\\n        step(filter_min, valueFromMin) * step(valueFromMax, filter_max)\\n      );\\n    }\\n  } else {\\n    dataFilter_value = 1.0;\\n  }\\n}\\n\";\nconst fs = \"\\nuniform bool filter_transformColor;\\nvarying float dataFilter_value;\\n\";\n\nfunction getUniforms(opts) {\n  if (!opts || !('extensions' in opts)) {\n    return {};\n  }\n\n  const {\n    filterRange = [-1, 1],\n    filterEnabled = true,\n    filterTransformSize = true,\n    filterTransformColor = true\n  } = opts;\n  const filterSoftRange = opts.filterSoftRange || filterRange;\n  return { ...(Number.isFinite(filterRange[0]) ? {\n      filter_min: filterRange[0],\n      filter_softMin: filterSoftRange[0],\n      filter_softMax: filterSoftRange[1],\n      filter_max: filterRange[1]\n    } : {\n      filter_min: filterRange.map(r => r[0]),\n      filter_softMin: filterSoftRange.map(r => r[0]),\n      filter_softMax: filterSoftRange.map(r => r[1]),\n      filter_max: filterRange.map(r => r[1])\n    }),\n    filter_enabled: filterEnabled,\n    filter_useSoftMargin: Boolean(opts.filterSoftRange),\n    filter_transformSize: filterEnabled && filterTransformSize,\n    filter_transformColor: filterEnabled && filterTransformColor\n  };\n}\n\nfunction getUniforms64(opts) {\n  if (!opts || !('extensions' in opts)) {\n    return {};\n  }\n\n  const uniforms = getUniforms(opts);\n\n  if (Number.isFinite(uniforms.filter_min)) {\n    const min64High = Math.fround(uniforms.filter_min);\n    uniforms.filter_min -= min64High;\n    uniforms.filter_softMin -= min64High;\n    uniforms.filter_min64High = min64High;\n    const max64High = Math.fround(uniforms.filter_max);\n    uniforms.filter_max -= max64High;\n    uniforms.filter_softMax -= max64High;\n    uniforms.filter_max64High = max64High;\n  } else {\n    const min64High = uniforms.filter_min.map(Math.fround);\n    uniforms.filter_min = uniforms.filter_min.map((x, i) => x - min64High[i]);\n    uniforms.filter_softMin = uniforms.filter_softMin.map((x, i) => x - min64High[i]);\n    uniforms.filter_min64High = min64High;\n    const max64High = uniforms.filter_max.map(Math.fround);\n    uniforms.filter_max = uniforms.filter_max.map((x, i) => x - max64High[i]);\n    uniforms.filter_softMax = uniforms.filter_softMax.map((x, i) => x - max64High[i]);\n    uniforms.filter_max64High = max64High;\n  }\n\n  return uniforms;\n}\n\nconst inject = {\n  'vs:#main-start': \"\\n    #ifdef DATAFILTER_DOUBLE\\n      dataFilter_setValue(\\n        DATAFILTER_ATTRIB - filter_min64High + DATAFILTER_ATTRIB_64LOW,\\n        DATAFILTER_ATTRIB - filter_max64High + DATAFILTER_ATTRIB_64LOW\\n      );\\n    #else\\n      dataFilter_setValue(DATAFILTER_ATTRIB, DATAFILTER_ATTRIB);\\n    #endif\\n  \",\n  'vs:DECKGL_FILTER_SIZE': \"\\n    if (filter_transformSize) {\\n      size = size * dataFilter_value;\\n    }\\n  \",\n  'fs:DECKGL_FILTER_COLOR': \"\\n    if (dataFilter_value == 0.0) discard;\\n    if (filter_transformColor) {\\n      color.a *= dataFilter_value;\\n    }\\n  \"\n};\nexport const shaderModule = {\n  name: 'data-filter',\n  vs,\n  fs,\n  inject,\n  getUniforms\n};\nexport const shaderModule64 = {\n  name: 'data-filter-fp64',\n  vs,\n  fs,\n  inject,\n  getUniforms: getUniforms64\n};","map":{"version":3,"mappings":"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","names":["vs","fs","getUniforms","opts","filterRange","filterEnabled","filterTransformSize","filterTransformColor","filterSoftRange","Number","isFinite","filter_min","filter_softMin","filter_softMax","filter_max","map","r","filter_enabled","filter_useSoftMargin","Boolean","filter_transformSize","filter_transformColor","getUniforms64","uniforms","min64High","Math","fround","filter_min64High","max64High","filter_max64High","x","i","inject","shaderModule","name","shaderModule64"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@deck.gl\\extensions\\src\\data-filter\\shader-module.ts"],"sourcesContent":["import {_ShaderModule as ShaderModule} from '@deck.gl/core/typed';\n\nimport type {DataFilterExtensionProps} from './data-filter';\n\n/*\n * data filter shader module\n */\nconst vs = `\nuniform DATAFILTER_TYPE filter_min;\nuniform DATAFILTER_TYPE filter_softMin;\nuniform DATAFILTER_TYPE filter_softMax;\nuniform DATAFILTER_TYPE filter_max;\nuniform bool filter_useSoftMargin;\nuniform bool filter_enabled;\nuniform bool filter_transformSize;\n\n#ifdef NON_INSTANCED_MODEL\n  #define DATAFILTER_ATTRIB filterValues\n  #define DATAFILTER_ATTRIB_64LOW filterValues64Low\n#else\n  #define DATAFILTER_ATTRIB instanceFilterValues\n  #define DATAFILTER_ATTRIB_64LOW instanceFilterValues64Low\n#endif\n\nattribute DATAFILTER_TYPE DATAFILTER_ATTRIB;\n#ifdef DATAFILTER_DOUBLE\n  attribute DATAFILTER_TYPE DATAFILTER_ATTRIB_64LOW;\n\n  uniform DATAFILTER_TYPE filter_min64High;\n  uniform DATAFILTER_TYPE filter_max64High;\n#endif\n\nvarying float dataFilter_value;\n\nfloat dataFilter_reduceValue(float value) {\n  return value;\n}\nfloat dataFilter_reduceValue(vec2 value) {\n  return min(value.x, value.y);\n}\nfloat dataFilter_reduceValue(vec3 value) {\n  return min(min(value.x, value.y), value.z);\n}\nfloat dataFilter_reduceValue(vec4 value) {\n  return min(min(value.x, value.y), min(value.z, value.w));\n}\nvoid dataFilter_setValue(DATAFILTER_TYPE valueFromMin, DATAFILTER_TYPE valueFromMax) {\n  if (filter_enabled) {\n    if (filter_useSoftMargin) {\n      dataFilter_value = dataFilter_reduceValue(\n        smoothstep(filter_min, filter_softMin, valueFromMin) *\n        (1.0 - smoothstep(filter_softMax, filter_max, valueFromMax))\n      );\n    } else {\n      dataFilter_value = dataFilter_reduceValue(\n        step(filter_min, valueFromMin) * step(valueFromMax, filter_max)\n      );\n    }\n  } else {\n    dataFilter_value = 1.0;\n  }\n}\n`;\n\nconst fs = `\nuniform bool filter_transformColor;\nvarying float dataFilter_value;\n`;\n\ntype DataFilterModuleSettings = {\n  extensions: any[]; // used to detect if layer props are present\n} & DataFilterExtensionProps;\n\n/* eslint-disable camelcase */\nfunction getUniforms(opts?: DataFilterModuleSettings | {}): Record<string, any> {\n  if (!opts || !('extensions' in opts)) {\n    return {};\n  }\n  const {\n    filterRange = [-1, 1],\n    filterEnabled = true,\n    filterTransformSize = true,\n    filterTransformColor = true\n  } = opts;\n  const filterSoftRange = opts.filterSoftRange || filterRange;\n\n  return {\n    ...(Number.isFinite(filterRange[0])\n      ? {\n          filter_min: filterRange[0],\n          filter_softMin: filterSoftRange[0],\n          filter_softMax: filterSoftRange[1],\n          filter_max: filterRange[1]\n        }\n      : {\n          filter_min: filterRange.map(r => r[0]),\n          filter_softMin: filterSoftRange.map(r => r[0]),\n          filter_softMax: filterSoftRange.map(r => r[1]),\n          filter_max: filterRange.map(r => r[1])\n        }),\n    filter_enabled: filterEnabled,\n    filter_useSoftMargin: Boolean(opts.filterSoftRange),\n    filter_transformSize: filterEnabled && filterTransformSize,\n    filter_transformColor: filterEnabled && filterTransformColor\n  };\n}\n\nfunction getUniforms64(opts?: DataFilterModuleSettings | {}): Record<string, any> {\n  if (!opts || !('extensions' in opts)) {\n    return {};\n  }\n  const uniforms = getUniforms(opts);\n  if (Number.isFinite(uniforms.filter_min)) {\n    const min64High = Math.fround(uniforms.filter_min);\n    uniforms.filter_min -= min64High;\n    uniforms.filter_softMin -= min64High;\n    uniforms.filter_min64High = min64High;\n\n    const max64High = Math.fround(uniforms.filter_max);\n    uniforms.filter_max -= max64High;\n    uniforms.filter_softMax -= max64High;\n    uniforms.filter_max64High = max64High;\n  } else {\n    const min64High = uniforms.filter_min.map(Math.fround);\n    uniforms.filter_min = uniforms.filter_min.map((x, i) => x - min64High[i]);\n    uniforms.filter_softMin = uniforms.filter_softMin.map((x, i) => x - min64High[i]);\n    uniforms.filter_min64High = min64High;\n\n    const max64High = uniforms.filter_max.map(Math.fround);\n    uniforms.filter_max = uniforms.filter_max.map((x, i) => x - max64High[i]);\n    uniforms.filter_softMax = uniforms.filter_softMax.map((x, i) => x - max64High[i]);\n    uniforms.filter_max64High = max64High;\n  }\n  return uniforms;\n}\n\nconst inject = {\n  'vs:#main-start': `\n    #ifdef DATAFILTER_DOUBLE\n      dataFilter_setValue(\n        DATAFILTER_ATTRIB - filter_min64High + DATAFILTER_ATTRIB_64LOW,\n        DATAFILTER_ATTRIB - filter_max64High + DATAFILTER_ATTRIB_64LOW\n      );\n    #else\n      dataFilter_setValue(DATAFILTER_ATTRIB, DATAFILTER_ATTRIB);\n    #endif\n  `,\n\n  'vs:DECKGL_FILTER_SIZE': `\n    if (filter_transformSize) {\n      size = size * dataFilter_value;\n    }\n  `,\n\n  'fs:DECKGL_FILTER_COLOR': `\n    if (dataFilter_value == 0.0) discard;\n    if (filter_transformColor) {\n      color.a *= dataFilter_value;\n    }\n  `\n};\n\nexport const shaderModule: ShaderModule<DataFilterModuleSettings> = {\n  name: 'data-filter',\n  vs,\n  fs,\n  inject,\n  getUniforms\n};\n\nexport const shaderModule64: ShaderModule<DataFilterModuleSettings> = {\n  name: 'data-filter-fp64',\n  vs,\n  fs,\n  inject,\n  getUniforms: getUniforms64\n};\n"]},"metadata":{},"sourceType":"module"}