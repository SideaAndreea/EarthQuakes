{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { log } from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\nimport fs from './multi-icon-layer-fragment.glsl';\nconst DEFAULT_BUFFER = 192.0 / 256;\nconst EMPTY_ARRAY = [];\nconst defaultProps = {\n  getIconOffsets: {\n    type: 'accessor',\n    value: x => x.offsets\n  },\n  alphaCutoff: 0.001,\n  smoothing: 0.1,\n  outlineWidth: 0,\n  outlineColor: {\n    type: 'color',\n    value: [0, 0, 0, 255]\n  }\n};\nexport default class MultiIconLayer extends IconLayer {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  getShaders() {\n    return { ...super.getShaders(),\n      fs\n    };\n  }\n\n  initializeState() {\n    super.initializeState();\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIconOffsets'\n      },\n      instancePickingColors: {\n        type: 5121,\n        size: 3,\n        accessor: (object, _ref) => {\n          let {\n            index,\n            target: value\n          } = _ref;\n          return this.encodePickingColor(index, value);\n        }\n      }\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps\n    } = params;\n    let {\n      outlineColor\n    } = props;\n\n    if (outlineColor !== oldProps.outlineColor) {\n      outlineColor = outlineColor.map(x => x / 255);\n      outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;\n      this.setState({\n        outlineColor\n      });\n    }\n\n    if (!props.sdf && props.outlineWidth) {\n      log.warn(\"\".concat(this.id, \": fontSettings.sdf is required to render outline\"))();\n    }\n  }\n\n  draw(params) {\n    const {\n      sdf,\n      smoothing,\n      outlineWidth\n    } = this.props;\n    const {\n      outlineColor\n    } = this.state;\n    params.uniforms = { ...params.uniforms,\n      buffer: DEFAULT_BUFFER,\n      outlineBuffer: outlineWidth ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth)) : -1,\n      gamma: smoothing,\n      sdf: Boolean(sdf),\n      outlineColor\n    };\n    super.draw(params);\n  }\n\n  getInstanceOffset(icons) {\n    return icons ? Array.from(icons).flatMap(icon => super.getInstanceOffset(icon)) : EMPTY_ARRAY;\n  }\n\n  getInstanceColorMode(icons) {\n    return 1;\n  }\n\n  getInstanceIconFrame(icons) {\n    return icons ? Array.from(icons).flatMap(icon => super.getInstanceIconFrame(icon)) : EMPTY_ARRAY;\n  }\n\n}\n\n_defineProperty(MultiIconLayer, \"defaultProps\", defaultProps);\n\n_defineProperty(MultiIconLayer, \"layerName\", 'MultiIconLayer');","map":{"version":3,"mappings":"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","names":["log","IconLayer","fs","DEFAULT_BUFFER","EMPTY_ARRAY","defaultProps","getIconOffsets","type","value","x","offsets","alphaCutoff","smoothing","outlineWidth","outlineColor","MultiIconLayer","constructor","_defineProperty","getShaders","initializeState","attributeManager","getAttributeManager","addInstanced","instanceOffsets","size","accessor","instancePickingColors","object","index","target","encodePickingColor","updateState","params","props","oldProps","map","Number","isFinite","setState","sdf","warn","id","draw","state","uniforms","buffer","outlineBuffer","Math","max","gamma","Boolean","getInstanceOffset","icons","Array","from","flatMap","icon","getInstanceColorMode","getInstanceIconFrame"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@deck.gl\\layers\\src\\text-layer\\multi-icon-layer\\multi-icon-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {log} from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\n\nimport fs from './multi-icon-layer-fragment.glsl';\n\nimport type {IconLayerProps} from '../../icon-layer/icon-layer';\nimport type {Accessor, Color, UpdateParameters, DefaultProps} from '@deck.gl/core';\n\n// TODO expose as layer properties\nconst DEFAULT_BUFFER = 192.0 / 256;\nconst EMPTY_ARRAY = [];\n\ntype _MultiIconLayerProps<DataT> = {\n  getIconOffsets?: Accessor<DataT, number[]>;\n  sdf?: boolean;\n  smoothing?: number;\n  outlineWidth?: number;\n  outlineColor?: Color;\n};\n\nexport type MultiIconLayerProps<DataT = any> = _MultiIconLayerProps<DataT> & IconLayerProps<DataT>;\n\nconst defaultProps: DefaultProps<MultiIconLayerProps> = {\n  getIconOffsets: {type: 'accessor', value: x => x.offsets},\n  alphaCutoff: 0.001,\n  smoothing: 0.1,\n  outlineWidth: 0,\n  outlineColor: {type: 'color', value: [0, 0, 0, 255]}\n};\n\nexport default class MultiIconLayer<DataT, ExtraPropsT = {}> extends IconLayer<\n  DataT,\n  ExtraPropsT & Required<_MultiIconLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'MultiIconLayer';\n\n  state!: IconLayer['state'] & {\n    outlineColor: Color;\n  };\n\n  getShaders() {\n    return {...super.getShaders(), fs};\n  }\n\n  initializeState() {\n    super.initializeState();\n\n    const attributeManager = this.getAttributeManager();\n    attributeManager!.addInstanced({\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIconOffsets'\n      },\n      instancePickingColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: 3,\n        accessor: (object, {index, target: value}) => this.encodePickingColor(index, value)\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, oldProps} = params;\n    let {outlineColor} = props;\n\n    if (outlineColor !== oldProps.outlineColor) {\n      outlineColor = outlineColor.map(x => x / 255) as Color;\n      outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;\n\n      this.setState({\n        outlineColor\n      });\n    }\n    if (!props.sdf && props.outlineWidth) {\n      log.warn(`${this.id}: fontSettings.sdf is required to render outline`)();\n    }\n  }\n\n  draw(params) {\n    const {sdf, smoothing, outlineWidth} = this.props;\n    const {outlineColor} = this.state;\n\n    params.uniforms = {\n      ...params.uniforms,\n      // Refer the following doc about gamma and buffer\n      // https://blog.mapbox.com/drawing-text-with-signed-distance-fields-in-mapbox-gl-b0933af6f817\n      buffer: DEFAULT_BUFFER,\n      outlineBuffer: outlineWidth ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth)) : -1,\n      gamma: smoothing,\n      sdf: Boolean(sdf),\n      outlineColor\n    };\n    super.draw(params);\n  }\n\n  protected getInstanceOffset(icons: string): number[] {\n    return icons ? Array.from(icons).flatMap(icon => super.getInstanceOffset(icon)) : EMPTY_ARRAY;\n  }\n\n  getInstanceColorMode(icons: string): number {\n    return 1; // mask\n  }\n\n  getInstanceIconFrame(icons: string): number[] {\n    return icons\n      ? Array.from(icons).flatMap(icon => super.getInstanceIconFrame(icon))\n      : EMPTY_ARRAY;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}