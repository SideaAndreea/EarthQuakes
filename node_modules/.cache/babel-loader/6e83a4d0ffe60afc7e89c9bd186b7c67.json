{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport ComponentState from '../lifecycle/component-state';\nexport default class LayerState extends ComponentState {\n  constructor(_ref) {\n    let {\n      attributeManager,\n      layer\n    } = _ref;\n    super(layer);\n\n    _defineProperty(this, \"attributeManager\", void 0);\n\n    _defineProperty(this, \"needsRedraw\", void 0);\n\n    _defineProperty(this, \"needsUpdate\", void 0);\n\n    _defineProperty(this, \"subLayers\", void 0);\n\n    _defineProperty(this, \"usesPickingColorCache\", void 0);\n\n    _defineProperty(this, \"changeFlags\", void 0);\n\n    _defineProperty(this, \"viewport\", void 0);\n\n    _defineProperty(this, \"uniformTransitions\", void 0);\n\n    _defineProperty(this, \"propsInTransition\", void 0);\n\n    this.attributeManager = attributeManager;\n    this.needsRedraw = true;\n    this.needsUpdate = true;\n    this.subLayers = null;\n    this.usesPickingColorCache = false;\n  }\n\n  get layer() {\n    return this.component;\n  }\n\n  set layer(layer) {\n    this.component = layer;\n  }\n\n  _fetch(propName, url) {\n    const fetch = this.component.props.fetch;\n\n    if (fetch) {\n      return fetch(url, {\n        propName,\n        layer: this.layer\n      });\n    }\n\n    return super._fetch(propName, url);\n  }\n\n  _onResolve(propName, value) {\n    const onDataLoad = this.component.props.onDataLoad;\n\n    if (propName === 'data' && onDataLoad) {\n      onDataLoad(value, {\n        propName,\n        layer: this.layer\n      });\n    }\n  }\n\n  _onError(propName, error) {\n    this.layer.raiseError(error, \"loading \".concat(propName, \" of \").concat(this.layer));\n  }\n\n}","map":{"version":3,"mappings":";AAAA,OAAOA,cAAP,MAA2B,8BAA3B;AAqBA,eAAe,MAAMC,UAAN,SAA+CD,cAA/C,CAAsE;EAwBnFE,WAAW,OAMR;IAAA,IANS;MACVC,gBADU;MAEVC;IAFU,CAMT;IACD,MAAMA,KAAN;;IADCC;;IAAAA;;IAAAA;;IAAAA;;IAAAA;;IAAAA;;IAAAA;;IAAAA;;IAAAA;;IAED,KAAKF,gBAAL,GAAwBA,gBAAxB;IACA,KAAKG,WAAL,GAAmB,IAAnB;IACA,KAAKC,WAAL,GAAmB,IAAnB;IACA,KAAKC,SAAL,GAAiB,IAAjB;IACA,KAAKC,qBAAL,GAA6B,KAA7B;EACD;;EAEQ,IAALL,KAAK,GAAW;IAClB,OAAO,KAAKM,SAAZ;EACD;;EAEQ,IAALN,KAAK,CAACA,KAAD,EAAgB;IACvB,KAAKM,SAAL,GAAiBN,KAAjB;EACD;;EAISO,MAAM,CAACC,QAAD,EAAWC,GAAX,EAAwB;IACtC,MAAMC,KAAK,GAAG,KAAKJ,SAAL,CAAeK,KAAf,CAAqBD,KAAnC;;IACA,IAAIA,KAAJ,EAAW;MACT,OAAOA,KAAK,CAACD,GAAD,EAAM;QAACD,QAAD;QAAWR,KAAK,EAAE,KAAKA;MAAvB,CAAN,CAAZ;IACD;;IACD,OAAO,MAAMO,MAAN,CAAaC,QAAb,EAAuBC,GAAvB,CAAP;EACD;;EAESG,UAAU,CAACJ,QAAD,EAAmBK,KAAnB,EAA+B;IACjD,MAAMC,UAAU,GAAG,KAAKR,SAAL,CAAeK,KAAf,CAAqBG,UAAxC;;IACA,IAAIN,QAAQ,KAAK,MAAbA,IAAuBM,UAA3B,EAAuC;MACrCA,UAAU,CAACD,KAAD,EAAQ;QAACL,QAAD;QAAWR,KAAK,EAAE,KAAKA;MAAvB,CAAR,CAAVc;IACD;EACF;;EAESC,QAAQ,CAACP,QAAD,EAAmBQ,KAAnB,EAAiC;IACjD,KAAKhB,KAAL,CAAWiB,UAAX,CAAsBD,KAAtB,oBAAwCR,QAAxC,iBAAuD,KAAKR,KAA5D;EACD;;AAlEkF","names":["ComponentState","LayerState","constructor","attributeManager","layer","_defineProperty","needsRedraw","needsUpdate","subLayers","usesPickingColorCache","component","_fetch","propName","url","fetch","props","_onResolve","value","onDataLoad","_onError","error","raiseError"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplica»õii\\earthquakes\\node_modules\\@deck.gl\\core\\src\\lib\\layer-state.ts"],"sourcesContent":["import ComponentState from '../lifecycle/component-state';\n\nimport type Layer from './layer';\nimport type AttributeManager from './attribute/attribute-manager';\nimport type Viewport from '../viewports/viewport';\nimport type UniformTransitionManager from './uniform-transition-manager';\n\nexport type ChangeFlags = {\n  // Primary changeFlags, can be strings stating reason for change\n  dataChanged: string | false | {startRow: number; endRow?: number}[];\n  propsChanged: string | false;\n  updateTriggersChanged: Record<string, true> | false;\n  extensionsChanged: boolean;\n  viewportChanged: boolean;\n  stateChanged: boolean;\n\n  // Derived changeFlags\n  propsOrDataChanged: boolean;\n  somethingChanged: boolean;\n};\n\nexport default class LayerState<LayerT extends Layer> extends ComponentState<LayerT> {\n  attributeManager: AttributeManager | null;\n  needsRedraw: boolean;\n  needsUpdate: boolean;\n  /**\n   * Sublayers rendered in a previous cycle\n   */\n  subLayers: Layer[] | null;\n  /**\n   * If the layer is using the shared instancedPickingColors buffer\n   */\n  usesPickingColorCache: boolean;\n  /**\n   * Dirty flags of the layer's props and state\n   */\n  changeFlags!: ChangeFlags;\n\n  /** The last viewport rendered by this layer */\n  viewport?: Viewport;\n\n  uniformTransitions!: UniformTransitionManager;\n  /** Populated during uniform transition to replace user-supplied values */\n  propsInTransition?: LayerT['props'];\n\n  constructor({\n    attributeManager,\n    layer\n  }: {\n    attributeManager: AttributeManager | null;\n    layer: LayerT;\n  }) {\n    super(layer);\n    this.attributeManager = attributeManager;\n    this.needsRedraw = true;\n    this.needsUpdate = true;\n    this.subLayers = null;\n    this.usesPickingColorCache = false;\n  }\n\n  get layer(): LayerT {\n    return this.component;\n  }\n\n  set layer(layer: LayerT) {\n    this.component = layer;\n  }\n\n  /* Override base Component methods with Layer-specific handling */\n\n  protected _fetch(propName, url: string) {\n    const fetch = this.component.props.fetch;\n    if (fetch) {\n      return fetch(url, {propName, layer: this.layer});\n    }\n    return super._fetch(propName, url);\n  }\n\n  protected _onResolve(propName: string, value: any) {\n    const onDataLoad = this.component.props.onDataLoad;\n    if (propName === 'data' && onDataLoad) {\n      onDataLoad(value, {propName, layer: this.layer});\n    }\n  }\n\n  protected _onError(propName: string, error: Error) {\n    this.layer.raiseError(error, `loading ${propName} of ${this.layer}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}