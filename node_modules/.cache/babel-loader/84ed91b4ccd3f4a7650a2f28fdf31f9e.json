{"ast":null,"code":"import { log } from '@deck.gl/core';\nconst MISSING_CHAR_WIDTH = 32;\nconst SINGLE_LINE = [];\nexport function nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\nexport function buildMapping(_ref) {\n  let {\n    characterSet,\n    getFontWidth,\n    fontHeight,\n    buffer,\n    maxCanvasWidth,\n    mapping = {},\n    xOffset = 0,\n    yOffset = 0\n  } = _ref;\n  let row = 0;\n  let x = xOffset;\n\n  for (const char of characterSet) {\n    if (!mapping[char]) {\n      const width = getFontWidth(char);\n\n      if (x + width + buffer * 2 > maxCanvasWidth) {\n        x = 0;\n        row++;\n      }\n\n      mapping[char] = {\n        x: x + buffer,\n        y: yOffset + row * (fontHeight + buffer * 2) + buffer,\n        width,\n        height: fontHeight\n      };\n      x += width + buffer * 2;\n    }\n  }\n\n  const rowHeight = fontHeight + buffer * 2;\n  return {\n    mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\n\nfunction getTextWidth(text, startIndex, endIndex, mapping) {\n  let width = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    var _mapping$character;\n\n    const character = text[i];\n    width += ((_mapping$character = mapping[character]) === null || _mapping$character === void 0 ? void 0 : _mapping$character.width) || 0;\n  }\n\n  return width;\n}\n\nfunction breakAll(text, startIndex, endIndex, maxWidth, iconMapping, target) {\n  let rowStartCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    const textWidth = getTextWidth(text, i, i + 1, iconMapping);\n\n    if (rowOffsetLeft + textWidth > maxWidth) {\n      if (rowStartCharIndex < i) {\n        target.push(i);\n      }\n\n      rowStartCharIndex = i;\n      rowOffsetLeft = 0;\n    }\n\n    rowOffsetLeft += textWidth;\n  }\n\n  return rowOffsetLeft;\n}\n\nfunction breakWord(text, startIndex, endIndex, maxWidth, iconMapping, target) {\n  let rowStartCharIndex = startIndex;\n  let groupStartCharIndex = startIndex;\n  let groupEndCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    if (text[i] === ' ') {\n      groupEndCharIndex = i + 1;\n    } else if (text[i + 1] === ' ' || i + 1 === endIndex) {\n      groupEndCharIndex = i + 1;\n    }\n\n    if (groupEndCharIndex > groupStartCharIndex) {\n      let groupWidth = getTextWidth(text, groupStartCharIndex, groupEndCharIndex, iconMapping);\n\n      if (rowOffsetLeft + groupWidth > maxWidth) {\n        if (rowStartCharIndex < groupStartCharIndex) {\n          target.push(groupStartCharIndex);\n          rowStartCharIndex = groupStartCharIndex;\n          rowOffsetLeft = 0;\n        }\n\n        if (groupWidth > maxWidth) {\n          groupWidth = breakAll(text, groupStartCharIndex, groupEndCharIndex, maxWidth, iconMapping, target);\n          rowStartCharIndex = target[target.length - 1];\n        }\n      }\n\n      groupStartCharIndex = groupEndCharIndex;\n      rowOffsetLeft += groupWidth;\n    }\n  }\n\n  return rowOffsetLeft;\n}\n\nexport function autoWrapping(text, wordBreak, maxWidth, iconMapping) {\n  let startIndex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  let endIndex = arguments.length > 5 ? arguments[5] : undefined;\n\n  if (endIndex === undefined) {\n    endIndex = text.length;\n  }\n\n  const result = [];\n\n  if (wordBreak === 'break-all') {\n    breakAll(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  } else {\n    breakWord(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  }\n\n  return result;\n}\n\nfunction transformRow(line, startIndex, endIndex, iconMapping, leftOffsets, rowSize) {\n  let x = 0;\n  let rowHeight = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = line[i];\n    const frame = iconMapping[character];\n\n    if (frame) {\n      if (!rowHeight) {\n        rowHeight = frame.height;\n      }\n\n      leftOffsets[i] = x + frame.width / 2;\n      x += frame.width;\n    } else {\n      log.warn(\"Missing character: \".concat(character, \" (\").concat(character.codePointAt(0), \")\"))();\n      leftOffsets[i] = x;\n      x += MISSING_CHAR_WIDTH;\n    }\n  }\n\n  rowSize[0] = x;\n  rowSize[1] = rowHeight;\n}\n\nexport function transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping) {\n  const characters = Array.from(paragraph);\n  const numCharacters = characters.length;\n  const x = new Array(numCharacters);\n  const y = new Array(numCharacters);\n  const rowWidth = new Array(numCharacters);\n  const autoWrappingEnabled = (wordBreak === 'break-word' || wordBreak === 'break-all') && isFinite(maxWidth) && maxWidth > 0;\n  const size = [0, 0];\n  const rowSize = [0, 0];\n  let rowOffsetTop = 0;\n  let lineStartIndex = 0;\n  let lineEndIndex = 0;\n\n  for (let i = 0; i <= numCharacters; i++) {\n    const char = characters[i];\n\n    if (char === '\\n' || i === numCharacters) {\n      lineEndIndex = i;\n    }\n\n    if (lineEndIndex > lineStartIndex) {\n      const rows = autoWrappingEnabled ? autoWrapping(characters, wordBreak, maxWidth, iconMapping, lineStartIndex, lineEndIndex) : SINGLE_LINE;\n\n      for (let rowIndex = 0; rowIndex <= rows.length; rowIndex++) {\n        const rowStart = rowIndex === 0 ? lineStartIndex : rows[rowIndex - 1];\n        const rowEnd = rowIndex < rows.length ? rows[rowIndex] : lineEndIndex;\n        transformRow(characters, rowStart, rowEnd, iconMapping, x, rowSize);\n\n        for (let j = rowStart; j < rowEnd; j++) {\n          y[j] = rowOffsetTop + rowSize[1] / 2;\n          rowWidth[j] = rowSize[0];\n        }\n\n        rowOffsetTop = rowOffsetTop + rowSize[1] * lineHeight;\n        size[0] = Math.max(size[0], rowSize[0]);\n      }\n\n      lineStartIndex = lineEndIndex;\n    }\n\n    if (char === '\\n') {\n      x[lineStartIndex] = 0;\n      y[lineStartIndex] = 0;\n      rowWidth[lineStartIndex] = 0;\n      lineStartIndex++;\n    }\n  }\n\n  size[1] = rowOffsetTop;\n  return {\n    x,\n    y,\n    rowWidth,\n    size\n  };\n}\nexport function getTextFromBuffer(_ref2) {\n  let {\n    value,\n    length,\n    stride,\n    offset,\n    startIndices,\n    characterSet\n  } = _ref2;\n  const bytesPerElement = value.BYTES_PER_ELEMENT;\n  const elementStride = stride ? stride / bytesPerElement : 1;\n  const elementOffset = offset ? offset / bytesPerElement : 0;\n  const characterCount = startIndices[length] || Math.ceil((value.length - elementOffset) / elementStride);\n  const autoCharacterSet = characterSet && new Set();\n  const texts = new Array(length);\n  let codes = value;\n\n  if (elementStride > 1 || elementOffset > 0) {\n    const ArrayType = value.constructor;\n    codes = new ArrayType(characterCount);\n\n    for (let i = 0; i < characterCount; i++) {\n      codes[i] = value[i * elementStride + elementOffset];\n    }\n  }\n\n  for (let index = 0; index < length; index++) {\n    const startIndex = startIndices[index];\n    const endIndex = startIndices[index + 1] || characterCount;\n    const codesAtIndex = codes.subarray(startIndex, endIndex);\n    texts[index] = String.fromCodePoint.apply(null, codesAtIndex);\n\n    if (autoCharacterSet) {\n      codesAtIndex.forEach(autoCharacterSet.add, autoCharacterSet);\n    }\n  }\n\n  if (autoCharacterSet) {\n    for (const charCode of autoCharacterSet) {\n      characterSet.add(String.fromCodePoint(charCode));\n    }\n  }\n\n  return {\n    texts,\n    characterCount\n  };\n}","map":{"version":3,"mappings":"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","names":["log","MISSING_CHAR_WIDTH","SINGLE_LINE","nextPowOfTwo","number","Math","pow","ceil","log2","buildMapping","characterSet","getFontWidth","fontHeight","buffer","maxCanvasWidth","mapping","xOffset","yOffset","row","x","char","width","y","height","rowHeight","canvasHeight","getTextWidth","text","startIndex","endIndex","i","character","breakAll","maxWidth","iconMapping","target","rowStartCharIndex","rowOffsetLeft","textWidth","push","breakWord","groupStartCharIndex","groupEndCharIndex","groupWidth","length","autoWrapping","wordBreak","undefined","result","transformRow","line","leftOffsets","rowSize","frame","warn","codePointAt","transformParagraph","paragraph","lineHeight","characters","Array","from","numCharacters","rowWidth","autoWrappingEnabled","isFinite","size","rowOffsetTop","lineStartIndex","lineEndIndex","rows","rowIndex","rowStart","rowEnd","j","max","getTextFromBuffer","value","stride","offset","startIndices","bytesPerElement","BYTES_PER_ELEMENT","elementStride","elementOffset","characterCount","autoCharacterSet","Set","texts","codes","ArrayType","constructor","index","codesAtIndex","subarray","String","fromCodePoint","apply","forEach","add","charCode"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@deck.gl\\layers\\src\\text-layer\\utils.ts"],"sourcesContent":["/* eslint-disable max-statements, max-params, complexity, max-depth */\n// TODO merge with icon-layer/icon-manager\nimport {log} from '@deck.gl/core';\nimport type {NumericArray} from '@math.gl/core';\n\nconst MISSING_CHAR_WIDTH = 32;\nconst SINGLE_LINE = [];\n\nexport type Character = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nexport type CharacterMapping = Record<string, Character>;\n\nexport function nextPowOfTwo(number: number): number {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n/**\n * Generate character mapping table or update from an existing mapping table\n */\nexport function buildMapping({\n  characterSet,\n  getFontWidth,\n  fontHeight,\n  buffer,\n  maxCanvasWidth,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0\n}: {\n  /** list of characters */\n  characterSet: Set<string>;\n  /** function to get width of each character */\n  getFontWidth: (char: string) => number;\n  /** height of font */\n  fontHeight: number;\n  /** bleeding buffer surround each character */\n  buffer: number;\n  /** max width of font atlas */\n  maxCanvasWidth: number;\n  /** cached mapping table */\n  mapping?: CharacterMapping;\n  /** x position of last character in the existing mapping table */\n  xOffset?: number;\n  /** y position of last character in the existing mapping table */\n  yOffset?: number;\n}): {\n  /** new mapping table */\n  mapping: CharacterMapping;\n  /** x position of last character in the new mapping table */\n  xOffset: number;\n  /** y position of last character in the new mapping table */\n  yOffset: number;\n  /** height of the font atlas canvas, power of 2 */\n  canvasHeight: number;\n} {\n  let row = 0;\n  // continue from x position of last character in the old mapping\n  let x = xOffset;\n\n  for (const char of characterSet) {\n    if (!mapping[char]) {\n      // measure texts\n      // TODO - use Advanced text metrics when they are adopted:\n      // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics\n      const width = getFontWidth(char);\n\n      if (x + width + buffer * 2 > maxCanvasWidth) {\n        x = 0;\n        row++;\n      }\n      mapping[char] = {\n        x: x + buffer,\n        y: yOffset + row * (fontHeight + buffer * 2) + buffer,\n        width,\n        height: fontHeight\n      };\n      x += width + buffer * 2;\n    }\n  }\n\n  const rowHeight = fontHeight + buffer * 2;\n\n  return {\n    mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\n\nfunction getTextWidth(\n  text: string[],\n  startIndex: number,\n  endIndex: number,\n  mapping: CharacterMapping\n): number {\n  let width = 0;\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = text[i];\n    width += mapping[character]?.width || 0;\n  }\n\n  return width;\n}\n\nfunction breakAll(\n  text: string[],\n  startIndex: number,\n  endIndex: number,\n  maxWidth: number,\n  iconMapping: CharacterMapping,\n  target: number[]\n): number {\n  let rowStartCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    // 2. figure out where to break lines\n    const textWidth = getTextWidth(text, i, i + 1, iconMapping);\n    if (rowOffsetLeft + textWidth > maxWidth) {\n      if (rowStartCharIndex < i) {\n        target.push(i);\n      }\n      rowStartCharIndex = i;\n      rowOffsetLeft = 0;\n    }\n    rowOffsetLeft += textWidth;\n  }\n\n  return rowOffsetLeft;\n}\n\nfunction breakWord(\n  text: string[],\n  startIndex: number,\n  endIndex: number,\n  maxWidth: number,\n  iconMapping: CharacterMapping,\n  target: number[]\n): number {\n  let rowStartCharIndex = startIndex;\n  let groupStartCharIndex = startIndex;\n  let groupEndCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    // 1. break text into word groups\n    //  - if current char is white space\n    //  - else if next char is white space\n    //  - else if reach last char\n    if (text[i] === ' ') {\n      groupEndCharIndex = i + 1;\n    } else if (text[i + 1] === ' ' || i + 1 === endIndex) {\n      groupEndCharIndex = i + 1;\n    }\n\n    if (groupEndCharIndex > groupStartCharIndex) {\n      // 2. break text into next row at maxWidth\n      let groupWidth = getTextWidth(text, groupStartCharIndex, groupEndCharIndex, iconMapping);\n      if (rowOffsetLeft + groupWidth > maxWidth) {\n        if (rowStartCharIndex < groupStartCharIndex) {\n          target.push(groupStartCharIndex);\n          rowStartCharIndex = groupStartCharIndex;\n          rowOffsetLeft = 0;\n        }\n\n        // if a single text group is bigger than maxWidth, then `break-all`\n        if (groupWidth > maxWidth) {\n          groupWidth = breakAll(\n            text,\n            groupStartCharIndex,\n            groupEndCharIndex,\n            maxWidth,\n            iconMapping,\n            target\n          );\n          // move reference to last row\n          rowStartCharIndex = target[target.length - 1];\n        }\n      }\n      groupStartCharIndex = groupEndCharIndex;\n      rowOffsetLeft += groupWidth;\n    }\n  }\n\n  return rowOffsetLeft;\n}\n\n/**\n * Wrap the given text so that each line does not exceed the given max width.\n * Returns a list of indices where line breaks should be inserted.\n */\nexport function autoWrapping(\n  text: string[],\n  wordBreak: 'break-all' | 'break-word',\n  maxWidth: number,\n  iconMapping: CharacterMapping,\n  startIndex: number = 0,\n  endIndex: number\n): number[] {\n  if (endIndex === undefined) {\n    endIndex = text.length;\n  }\n  const result = [];\n  if (wordBreak === 'break-all') {\n    breakAll(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  } else {\n    breakWord(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  }\n  return result;\n}\n\nfunction transformRow(\n  line: string[],\n  startIndex: number,\n  endIndex: number,\n  iconMapping: CharacterMapping,\n  leftOffsets: number[],\n  rowSize: [number, number]\n) {\n  let x = 0;\n  let rowHeight = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = line[i];\n    const frame = iconMapping[character];\n    if (frame) {\n      if (!rowHeight) {\n        // frame.height should be a constant\n        rowHeight = frame.height;\n      }\n      leftOffsets[i] = x + frame.width / 2;\n      x += frame.width;\n    } else {\n      log.warn(`Missing character: ${character} (${character.codePointAt(0)})`)();\n      leftOffsets[i] = x;\n      x += MISSING_CHAR_WIDTH;\n    }\n  }\n\n  rowSize[0] = x;\n  rowSize[1] = rowHeight;\n}\n\n/**\n * Transform a text paragraph to an array of characters, each character contains\n */\nexport function transformParagraph(\n  paragraph: string,\n  /** CSS line-height */\n  lineHeight: number,\n  /** CSS word-break option */\n  wordBreak: 'break-word' | 'break-all',\n  /** CSS max-width */\n  maxWidth: number,\n  /** character mapping table for retrieving a character from font atlas */\n  iconMapping: CharacterMapping\n): {\n  /** x position of each character */\n  x: number[];\n  /** y position of each character */\n  y: number[];\n  /** the current row width of each character */\n  rowWidth: number[];\n  /** the width and height of the paragraph */\n  size: [number, number];\n} {\n  // Break into an array of characters\n  // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work\n  const characters = Array.from(paragraph);\n  const numCharacters = characters.length;\n  const x = new Array(numCharacters) as number[];\n  const y = new Array(numCharacters) as number[];\n  const rowWidth = new Array(numCharacters) as number[];\n  const autoWrappingEnabled =\n    (wordBreak === 'break-word' || wordBreak === 'break-all') && isFinite(maxWidth) && maxWidth > 0;\n\n  // maxWidth and height of the paragraph\n  const size: [number, number] = [0, 0];\n  const rowSize: [number, number] = [0, 0];\n  let rowOffsetTop = 0;\n  let lineStartIndex = 0;\n  let lineEndIndex = 0;\n\n  for (let i = 0; i <= numCharacters; i++) {\n    const char = characters[i];\n    if (char === '\\n' || i === numCharacters) {\n      lineEndIndex = i;\n    }\n\n    if (lineEndIndex > lineStartIndex) {\n      const rows = autoWrappingEnabled\n        ? autoWrapping(characters, wordBreak, maxWidth, iconMapping, lineStartIndex, lineEndIndex)\n        : SINGLE_LINE;\n\n      for (let rowIndex = 0; rowIndex <= rows.length; rowIndex++) {\n        const rowStart = rowIndex === 0 ? lineStartIndex : rows[rowIndex - 1];\n        const rowEnd = rowIndex < rows.length ? rows[rowIndex] : lineEndIndex;\n        transformRow(characters, rowStart, rowEnd, iconMapping, x, rowSize);\n        for (let j = rowStart; j < rowEnd; j++) {\n          y[j] = rowOffsetTop + rowSize[1] / 2;\n          rowWidth[j] = rowSize[0];\n        }\n\n        rowOffsetTop = rowOffsetTop + rowSize[1] * lineHeight;\n        size[0] = Math.max(size[0], rowSize[0]);\n      }\n      lineStartIndex = lineEndIndex;\n    }\n\n    if (char === '\\n') {\n      // Make sure result.length matches paragraph.length\n      x[lineStartIndex] = 0;\n      y[lineStartIndex] = 0;\n      rowWidth[lineStartIndex] = 0;\n      lineStartIndex++;\n    }\n  }\n\n  // last row\n  size[1] = rowOffsetTop;\n  return {x, y, rowWidth, size};\n}\n\nexport function getTextFromBuffer({\n  value,\n  length,\n  stride,\n  offset,\n  startIndices,\n  characterSet\n}: {\n  value: Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array;\n  length: number;\n  stride?: number;\n  offset?: number;\n  startIndices: NumericArray;\n  characterSet?: Set<string>;\n}): {\n  texts: string[];\n  characterCount: number;\n} {\n  const bytesPerElement = value.BYTES_PER_ELEMENT;\n  const elementStride = stride ? stride / bytesPerElement : 1;\n  const elementOffset = offset ? offset / bytesPerElement : 0;\n  const characterCount =\n    startIndices[length] || Math.ceil((value.length - elementOffset) / elementStride);\n  const autoCharacterSet = characterSet && new Set<number>();\n\n  const texts = new Array(length);\n\n  let codes = value;\n  if (elementStride > 1 || elementOffset > 0) {\n    const ArrayType = value.constructor as\n      | Uint8ArrayConstructor\n      | Uint8ClampedArrayConstructor\n      | Uint16ArrayConstructor\n      | Uint32ArrayConstructor;\n    codes = new ArrayType(characterCount);\n    for (let i = 0; i < characterCount; i++) {\n      codes[i] = value[i * elementStride + elementOffset];\n    }\n  }\n\n  for (let index = 0; index < length; index++) {\n    const startIndex = startIndices[index];\n    const endIndex = startIndices[index + 1] || characterCount;\n    const codesAtIndex = codes.subarray(startIndex, endIndex);\n    // @ts-ignore TS wants the argument to be number[] but typed array works too\n    texts[index] = String.fromCodePoint.apply(null, codesAtIndex);\n    if (autoCharacterSet) {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      codesAtIndex.forEach(autoCharacterSet.add, autoCharacterSet);\n    }\n  }\n\n  if (autoCharacterSet) {\n    for (const charCode of autoCharacterSet) {\n      characterSet.add(String.fromCodePoint(charCode));\n    }\n  }\n\n  return {texts, characterCount};\n}\n"]},"metadata":{},"sourceType":"module"}