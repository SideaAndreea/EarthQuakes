{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Viewport from '../viewports/viewport';\nimport { parsePosition, getPosition } from '../utils/positions';\nimport { deepEqual } from '../utils/deep-equal';\nimport assert from '../utils/assert';\nexport default class View {\n  constructor(props) {\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"viewportInstance\", void 0);\n\n    _defineProperty(this, \"_x\", void 0);\n\n    _defineProperty(this, \"_y\", void 0);\n\n    _defineProperty(this, \"_width\", void 0);\n\n    _defineProperty(this, \"_height\", void 0);\n\n    _defineProperty(this, \"_padding\", void 0);\n\n    _defineProperty(this, \"props\", void 0);\n\n    const {\n      id,\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n      padding = null,\n      viewportInstance\n    } = props || {};\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n    this.id = id || this.constructor.displayName || 'view';\n    this.props = { ...props,\n      id: this.id\n    };\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n    this._padding = padding && {\n      left: parsePosition(padding.left || 0),\n      right: parsePosition(padding.right || 0),\n      top: parsePosition(padding.top || 0),\n      bottom: parsePosition(padding.bottom || 0)\n    };\n    this.equals = this.equals.bind(this);\n    Object.seal(this);\n  }\n\n  equals(view) {\n    if (this === view) {\n      return true;\n    }\n\n    if (this.viewportInstance) {\n      return view.viewportInstance ? this.viewportInstance.equals(view.viewportInstance) : false;\n    }\n\n    return this.ViewportType === view.ViewportType && deepEqual(this.props, view.props);\n  }\n\n  makeViewport(_ref) {\n    let {\n      width,\n      height,\n      viewState\n    } = _ref;\n\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    viewState = this.filterViewState(viewState);\n    const viewportDimensions = this.getDimensions({\n      width,\n      height\n    });\n    return new this.ViewportType({ ...viewState,\n      ...this.props,\n      ...viewportDimensions\n    });\n  }\n\n  getViewStateId() {\n    const {\n      viewState\n    } = this.props;\n\n    if (typeof viewState === 'string') {\n      return viewState;\n    }\n\n    return (viewState === null || viewState === void 0 ? void 0 : viewState.id) || this.id;\n  }\n\n  filterViewState(viewState) {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      if (!this.props.viewState.id) {\n        return this.props.viewState;\n      }\n\n      const newViewState = { ...viewState\n      };\n\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  getDimensions(_ref2) {\n    let {\n      width,\n      height\n    } = _ref2;\n    const dimensions = {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n\n    if (this._padding) {\n      dimensions.padding = {\n        left: getPosition(this._padding.left, width),\n        top: getPosition(this._padding.top, height),\n        right: getPosition(this._padding.right, width),\n        bottom: getPosition(this._padding.bottom, height)\n      };\n    }\n\n    return dimensions;\n  }\n\n  get controller() {\n    const opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n\n    if (opts === true) {\n      return {\n        type: this.ControllerType\n      };\n    }\n\n    if (typeof opts === 'function') {\n      return {\n        type: opts\n      };\n    }\n\n    return {\n      type: this.ControllerType,\n      ...opts\n    };\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Viewport","parsePosition","getPosition","deepEqual","assert","View","constructor","props","_defineProperty","id","x","y","width","height","padding","viewportInstance","displayName","_x","_y","_width","_height","_padding","left","right","top","bottom","equals","bind","Object","seal","view","ViewportType","makeViewport","viewState","filterViewState","viewportDimensions","getDimensions","getViewStateId","newViewState","key","dimensions","controller","opts","type","ControllerType"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplica»õii\\earthquakes\\node_modules\\@deck.gl\\core\\src\\views\\view.ts"],"sourcesContent":["import Viewport from '../viewports/viewport';\nimport {parsePosition, getPosition, Position} from '../utils/positions';\nimport {deepEqual} from '../utils/deep-equal';\nimport assert from '../utils/assert';\nimport type Controller from '../controllers/controller';\nimport type {ControllerOptions} from '../controllers/controller';\nimport type {TransitionProps} from '../controllers/transition-manager';\nimport type {Padding} from '../viewports/viewport';\nimport type {ConstructorOf} from '../types/types';\n\nexport type CommonViewState = TransitionProps;\n\ntype CommonViewProps<ViewState> = {\n  /** A unique id of the view. In a multi-view use case, this is important for matching view states and place contents into this view. */\n  id?: string;\n  /** A relative (e.g. `'50%'`) or absolute position. Default `0`. */\n  x?: number | string;\n  /** A relative (e.g. `'50%'`) or absolute position. Default `0`. */\n  y?: number | string;\n  /** A relative (e.g. `'50%'`) or absolute extent. Default `'100%'`. */\n  width?: number | string;\n  /** A relative (e.g. `'50%'`) or absolute extent. Default `'100%'`. */\n  height?: number | string;\n  /** Padding around the view, expressed in either relative (e.g. `'50%'`) or absolute pixels. Default `null`. */\n  padding?: {\n    left?: number | string;\n    right?: number | string;\n    top?: number | string;\n    bottom?: number | string;\n  } | null;\n  /** State of the view */\n  viewState?:\n    | string\n    | ({\n        id?: string;\n      } & Partial<ViewState>);\n  /** Options for viewport interactivity. */\n  controller?:\n    | null\n    | boolean\n    | ConstructorOf<Controller<any>>\n    | (ControllerOptions & {\n        type?: ConstructorOf<Controller<any>>;\n      });\n\n  /** @deprecated Directly wrap a viewport instance */\n  viewportInstance?: Viewport;\n};\n\nexport default abstract class View<\n  ViewState extends CommonViewState = CommonViewState,\n  ViewProps = {}\n> {\n  id: string;\n  abstract get ViewportType(): ConstructorOf<Viewport>;\n  abstract get ControllerType(): ConstructorOf<Controller<any>>;\n\n  private viewportInstance?: Viewport;\n  private _x: Position;\n  private _y: Position;\n  private _width: Position;\n  private _height: Position;\n  private _padding: {\n    left: Position;\n    right: Position;\n    top: Position;\n    bottom: Position;\n  } | null;\n\n  readonly props: ViewProps & CommonViewProps<ViewState>;\n\n  constructor(props: ViewProps & CommonViewProps<ViewState>) {\n    const {\n      id,\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n      padding = null,\n      viewportInstance\n    } = props || {};\n\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n\n    // @ts-ignore\n    this.id = id || this.constructor.displayName || 'view';\n\n    this.props = {...props, id: this.id};\n\n    // Extents\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n    this._padding = padding && {\n      left: parsePosition(padding.left || 0),\n      right: parsePosition(padding.right || 0),\n      top: parsePosition(padding.top || 0),\n      bottom: parsePosition(padding.bottom || 0)\n    };\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n\n    Object.seal(this);\n  }\n\n  equals(view: View<ViewState, ViewProps>): boolean {\n    if (this === view) {\n      return true;\n    }\n\n    // if `viewportInstance` is set, it is the only prop that is used\n    // Delegate to `Viewport.equals`\n    if (this.viewportInstance) {\n      return view.viewportInstance ? this.viewportInstance.equals(view.viewportInstance) : false;\n    }\n\n    return this.ViewportType === view.ViewportType && deepEqual(this.props, view.props);\n  }\n\n  /** Make viewport from canvas dimensions and view state */\n  makeViewport({width, height, viewState}: {width: number; height: number; viewState: any}) {\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    viewState = this.filterViewState(viewState);\n\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({width, height});\n    return new this.ViewportType({...viewState, ...this.props, ...viewportDimensions});\n  }\n\n  getViewStateId(): string {\n    const {viewState} = this.props;\n    if (typeof viewState === 'string') {\n      // if View.viewState is a string, return it\n      return viewState;\n    }\n    return viewState?.id || this.id;\n  }\n\n  // Allows view to override (or completely define) viewState\n  filterViewState(viewState: ViewState): ViewState {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      // If we have specified an id, then intent is to override,\n      // If not, completely specify the view state\n      if (!this.props.viewState.id) {\n        return this.props.viewState as ViewState;\n      }\n\n      // Merge in all props from View's viewState, except id\n      const newViewState = {...viewState};\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  /** Resolve the dimensions of the view from overall canvas dimensions */\n  getDimensions({width, height}: {width: number; height: number}): {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    padding?: Padding;\n  } {\n    const dimensions: {\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n      padding?: Padding;\n    } = {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n\n    if (this._padding) {\n      dimensions.padding = {\n        left: getPosition(this._padding.left, width),\n        top: getPosition(this._padding.top, height),\n        right: getPosition(this._padding.right, width),\n        bottom: getPosition(this._padding.bottom, height)\n      };\n    }\n    return dimensions;\n  }\n\n  // Used by sub classes to resolve controller props\n  get controller(): (ControllerOptions & {type: ConstructorOf<Controller<any>>}) | null {\n    const opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n    if (opts === true) {\n      return {type: this.ControllerType};\n    }\n    if (typeof opts === 'function') {\n      return {type: opts};\n    }\n    return {type: this.ControllerType, ...opts};\n  }\n}\n"]},"metadata":{},"sourceType":"module"}