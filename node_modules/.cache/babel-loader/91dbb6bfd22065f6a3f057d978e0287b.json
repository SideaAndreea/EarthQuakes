{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { clamp } from '@math.gl/core';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { mod } from '../utils/math-utils';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nexport class OrbitState extends ViewState {\n  constructor(options) {\n    const {\n      width,\n      height,\n      rotationX = 0,\n      rotationOrbit = 0,\n      target = [0, 0, 0],\n      zoom = 0,\n      minRotationX = -90,\n      maxRotationX = 90,\n      minZoom = -Infinity,\n      maxZoom = Infinity,\n      startPanPosition,\n      startRotatePos,\n      startRotationX,\n      startRotationOrbit,\n      startZoomPosition,\n      startZoom\n    } = options;\n    super({\n      width,\n      height,\n      rotationX,\n      rotationOrbit,\n      target,\n      zoom,\n      minRotationX,\n      maxRotationX,\n      minZoom,\n      maxZoom\n    }, {\n      startPanPosition,\n      startRotatePos,\n      startRotationX,\n      startRotationOrbit,\n      startZoomPosition,\n      startZoom\n    });\n\n    _defineProperty(this, \"makeViewport\", void 0);\n\n    this.makeViewport = options.makeViewport;\n  }\n\n  panStart(_ref) {\n    let {\n      pos\n    } = _ref;\n    return this._getUpdatedState({\n      startPanPosition: this._unproject(pos)\n    });\n  }\n\n  pan(_ref2) {\n    let {\n      pos,\n      startPosition\n    } = _ref2;\n    const startPanPosition = this.getState().startPanPosition || startPosition;\n\n    if (!startPanPosition) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this.getViewportProps());\n    const newProps = viewport.panByPosition(startPanPosition, pos);\n    return this._getUpdatedState(newProps);\n  }\n\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null\n    });\n  }\n\n  rotateStart(_ref3) {\n    let {\n      pos\n    } = _ref3;\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startRotationX: this.getViewportProps().rotationX,\n      startRotationOrbit: this.getViewportProps().rotationOrbit\n    });\n  }\n\n  rotate(_ref4) {\n    let {\n      pos,\n      deltaAngleX = 0,\n      deltaAngleY = 0\n    } = _ref4;\n    const {\n      startRotatePos,\n      startRotationX,\n      startRotationOrbit\n    } = this.getState();\n    const {\n      width,\n      height\n    } = this.getViewportProps();\n\n    if (!startRotatePos || startRotationX === undefined || startRotationOrbit === undefined) {\n      return this;\n    }\n\n    let newRotation;\n\n    if (pos) {\n      let deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n\n      if (startRotationX < -90 || startRotationX > 90) {\n        deltaScaleX *= -1;\n      }\n\n      newRotation = {\n        rotationX: startRotationX + deltaScaleY * 180,\n        rotationOrbit: startRotationOrbit + deltaScaleX * 180\n      };\n    } else {\n      newRotation = {\n        rotationX: startRotationX + deltaAngleY,\n        rotationOrbit: startRotationOrbit + deltaAngleX\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotationX: null,\n      startRotationOrbit: null\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = { ...this.getViewportProps()\n    };\n    const {\n      rotationOrbit\n    } = props;\n\n    if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n      props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n    }\n\n    return props;\n  }\n\n  zoomStart(_ref5) {\n    let {\n      pos\n    } = _ref5;\n    return this._getUpdatedState({\n      startZoomPosition: this._unproject(pos),\n      startZoom: this.getViewportProps().zoom\n    });\n  }\n\n  zoom(_ref6) {\n    let {\n      pos,\n      startPos,\n      scale\n    } = _ref6;\n    let {\n      startZoom,\n      startZoomPosition\n    } = this.getState();\n\n    if (!startZoomPosition) {\n      startZoom = this.getViewportProps().zoom;\n      startZoomPosition = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    if (!startZoomPosition) {\n      return this;\n    }\n\n    const newZoom = this._calculateNewZoom({\n      scale,\n      startZoom\n    });\n\n    const zoomedViewport = this.makeViewport({ ...this.getViewportProps(),\n      zoom: newZoom\n    });\n    return this._getUpdatedState({\n      zoom: newZoom,\n      ...zoomedViewport.panByPosition(startZoomPosition, pos)\n    });\n  }\n\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({\n        scale: speed\n      })\n    });\n  }\n\n  zoomOut() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({\n        scale: 1 / speed\n      })\n    });\n  }\n\n  moveLeft() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveRight() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveUp() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n    return this._panFromCenter([0, -speed]);\n  }\n\n  moveDown() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n    return this._panFromCenter([0, speed]);\n  }\n\n  rotateLeft() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n    return this._getUpdatedState({\n      rotationOrbit: this.getViewportProps().rotationOrbit - speed\n    });\n  }\n\n  rotateRight() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n    return this._getUpdatedState({\n      rotationOrbit: this.getViewportProps().rotationOrbit + speed\n    });\n  }\n\n  rotateUp() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return this._getUpdatedState({\n      rotationX: this.getViewportProps().rotationX - speed\n    });\n  }\n\n  rotateDown() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return this._getUpdatedState({\n      rotationX: this.getViewportProps().rotationX + speed\n    });\n  }\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this.getViewportProps());\n    return pos && viewport.unproject(pos);\n  }\n\n  _calculateNewZoom(_ref7) {\n    let {\n      scale,\n      startZoom\n    } = _ref7;\n    const {\n      maxZoom,\n      minZoom\n    } = this.getViewportProps();\n\n    if (startZoom === undefined) {\n      startZoom = this.getViewportProps().zoom;\n    }\n\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _panFromCenter(offset) {\n    const {\n      width,\n      height,\n      target\n    } = this.getViewportProps();\n    return this.pan({\n      startPosition: target,\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this.getViewportProps(),\n      ...this.getState(),\n      ...newProps\n    });\n  }\n\n  applyConstraints(props) {\n    const {\n      maxZoom,\n      minZoom,\n      zoom,\n      maxRotationX,\n      minRotationX,\n      rotationOrbit\n    } = props;\n    props.zoom = Array.isArray(zoom) ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)] : clamp(zoom, minZoom, maxZoom);\n    props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n\n    if (rotationOrbit < -180 || rotationOrbit > 180) {\n      props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n    }\n\n    return props;\n  }\n\n}\nexport default class OrbitController extends Controller {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"ControllerState\", OrbitState);\n\n    _defineProperty(this, \"transition\", {\n      transitionDuration: 300,\n      transitionInterpolator: new LinearInterpolator({\n        transitionProps: {\n          compare: ['target', 'zoom', 'rotationX', 'rotationOrbit'],\n          required: ['target', 'zoom']\n        }\n      })\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["clamp","Controller","ViewState","mod","LinearInterpolator","OrbitState","constructor","options","width","height","rotationX","rotationOrbit","target","zoom","minRotationX","maxRotationX","minZoom","Infinity","maxZoom","startPanPosition","startRotatePos","startRotationX","startRotationOrbit","startZoomPosition","startZoom","_defineProperty","makeViewport","panStart","pos","_getUpdatedState","_unproject","pan","startPosition","getState","viewport","getViewportProps","newProps","panByPosition","panEnd","rotateStart","rotate","deltaAngleX","deltaAngleY","undefined","newRotation","deltaScaleX","deltaScaleY","rotateEnd","shortestPathFrom","viewState","fromProps","props","Math","abs","zoomStart","startPos","scale","newZoom","_calculateNewZoom","zoomedViewport","zoomEnd","zoomIn","speed","zoomOut","moveLeft","_panFromCenter","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","unproject","log2","offset","applyConstraints","Array","isArray","OrbitController","transitionDuration","transitionInterpolator","transitionProps","compare","required"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@deck.gl\\core\\src\\controllers\\orbit-controller.ts"],"sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\n\nimport type Viewport from '../viewports/viewport';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nexport type OrbitStateProps = {\n  width: number;\n  height: number;\n  target?: number[];\n  zoom?: number | number[];\n  rotationX?: number;\n  rotationOrbit?: number;\n\n  /** Viewport constraints */\n  maxZoom?: number;\n  minZoom?: number;\n  minRotationX?: number;\n  maxRotationX?: number;\n};\n\ntype OrbitStateInternal = {\n  startPanPosition?: number[];\n  startRotatePos?: number[];\n  startRotationX?: number;\n  startRotationOrbit?: number;\n  startZoomPosition?: number[];\n  startZoom?: number | number[];\n};\n\nexport class OrbitState extends ViewState<OrbitState, OrbitStateProps, OrbitStateInternal> {\n  makeViewport: (props: Record<string, any>) => Viewport;\n\n  constructor(\n    options: OrbitStateProps &\n      OrbitStateInternal & {\n        makeViewport: (props: Record<string, any>) => Viewport;\n      }\n  ) {\n    const {\n      /* Viewport arguments */\n      width, // Width of viewport\n      height, // Height of viewport\n      rotationX = 0, // Rotation around x axis\n      rotationOrbit = 0, // Rotation around orbit axis\n      target = [0, 0, 0],\n      zoom = 0,\n\n      /* Viewport constraints */\n      minRotationX = -90,\n      maxRotationX = 90,\n      minZoom = -Infinity,\n      maxZoom = Infinity,\n\n      /** Interaction states, required to calculate change during transform */\n      // Model state when the pan operation first started\n      startPanPosition,\n      // Model state when the rotate operation first started\n      startRotatePos,\n      startRotationX,\n      startRotationOrbit,\n      // Model state when the zoom operation first started\n      startZoomPosition,\n      startZoom\n    } = options;\n\n    super(\n      {\n        width,\n        height,\n        rotationX,\n        rotationOrbit,\n        target,\n        zoom,\n        minRotationX,\n        maxRotationX,\n        minZoom,\n        maxZoom\n      },\n      {\n        startPanPosition,\n        startRotatePos,\n        startRotationX,\n        startRotationOrbit,\n        startZoomPosition,\n        startZoom\n      }\n    );\n\n    this.makeViewport = options.makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}: {pos: [number, number]}): OrbitState {\n    return this._getUpdatedState({\n      startPanPosition: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPosition}: {pos: [number, number]; startPosition?: number[]}): OrbitState {\n    const startPanPosition = this.getState().startPanPosition || startPosition;\n\n    if (!startPanPosition) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this.getViewportProps());\n    const newProps = viewport.panByPosition(startPanPosition, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd(): OrbitState {\n    return this._getUpdatedState({\n      startPanPosition: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}: {pos: [number, number]}): OrbitState {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startRotationX: this.getViewportProps().rotationX,\n      startRotationOrbit: this.getViewportProps().rotationOrbit\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({\n    pos,\n    deltaAngleX = 0,\n    deltaAngleY = 0\n  }: {\n    pos?: [number, number];\n    deltaAngleX?: number;\n    deltaAngleY?: number;\n  }): OrbitState {\n    const {startRotatePos, startRotationX, startRotationOrbit} = this.getState();\n    const {width, height} = this.getViewportProps();\n\n    if (!startRotatePos || startRotationX === undefined || startRotationOrbit === undefined) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      let deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n\n      if (startRotationX < -90 || startRotationX > 90) {\n        // When looking at the \"back\" side of the scene, invert horizontal drag\n        // so that the camera movement follows user input\n        deltaScaleX *= -1;\n      }\n      newRotation = {\n        rotationX: startRotationX + deltaScaleY * 180,\n        rotationOrbit: startRotationOrbit + deltaScaleX * 180\n      };\n    } else {\n      newRotation = {\n        rotationX: startRotationX + deltaAngleY,\n        rotationOrbit: startRotationOrbit + deltaAngleX\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd(): OrbitState {\n    return this._getUpdatedState({\n      startRotationX: null,\n      startRotationOrbit: null\n    });\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState: OrbitState): OrbitStateProps {\n    const fromProps = viewState.getViewportProps();\n    const props = {...this.getViewportProps()};\n    const {rotationOrbit} = props;\n\n    if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n      props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n    }\n\n    return props;\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}: {pos: [number, number]}): OrbitState {\n    return this._getUpdatedState({\n      startZoomPosition: this._unproject(pos),\n      startZoom: this.getViewportProps().zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current target is\n   * @param {[Number, Number]} startPos - the target position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({\n    pos,\n    startPos,\n    scale\n  }: {\n    pos: [number, number];\n    startPos?: [number, number];\n    scale: number;\n  }): OrbitState {\n    let {startZoom, startZoomPosition} = this.getState();\n    if (!startZoomPosition) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this.getViewportProps().zoom;\n      startZoomPosition = this._unproject(startPos) || this._unproject(pos);\n    }\n    if (!startZoomPosition) {\n      return this;\n    }\n    const newZoom = this._calculateNewZoom({scale, startZoom});\n    const zoomedViewport = this.makeViewport({...this.getViewportProps(), zoom: newZoom});\n\n    return this._getUpdatedState({\n      zoom: newZoom,\n      ...zoomedViewport.panByPosition(startZoomPosition, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd(): OrbitState {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed: number = 2): OrbitState {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: speed})\n    });\n  }\n\n  zoomOut(speed: number = 2): OrbitState {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 1 / speed})\n    });\n  }\n\n  moveLeft(speed: number = 50): OrbitState {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveRight(speed: number = 50): OrbitState {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveUp(speed: number = 50): OrbitState {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  moveDown(speed: number = 50): OrbitState {\n    return this._panFromCenter([0, speed]);\n  }\n\n  rotateLeft(speed: number = 15): OrbitState {\n    return this._getUpdatedState({\n      rotationOrbit: this.getViewportProps().rotationOrbit - speed\n    });\n  }\n\n  rotateRight(speed: number = 15): OrbitState {\n    return this._getUpdatedState({\n      rotationOrbit: this.getViewportProps().rotationOrbit + speed\n    });\n  }\n\n  rotateUp(speed: number = 10): OrbitState {\n    return this._getUpdatedState({\n      rotationX: this.getViewportProps().rotationX - speed\n    });\n  }\n\n  rotateDown(speed: number = 10): OrbitState {\n    return this._getUpdatedState({\n      rotationX: this.getViewportProps().rotationX + speed\n    });\n  }\n\n  /* Private methods */\n\n  _unproject(pos?: number[]): number[] | undefined {\n    const viewport = this.makeViewport(this.getViewportProps());\n    // @ts-ignore\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({\n    scale,\n    startZoom\n  }: {\n    scale: number;\n    startZoom?: number | number[];\n  }): number | number[] {\n    const {maxZoom, minZoom} = this.getViewportProps();\n    if (startZoom === undefined) {\n      startZoom = this.getViewportProps().zoom;\n    }\n    const zoom = (startZoom as number) + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _panFromCenter(offset) {\n    const {width, height, target} = this.getViewportProps();\n    return this.pan({\n      startPosition: target,\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps): OrbitState {\n    // @ts-ignore\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this.getViewportProps(),\n      ...this.getState(),\n      ...newProps\n    });\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  applyConstraints(props: Required<OrbitStateProps>): Required<OrbitStateProps> {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom, maxRotationX, minRotationX, rotationOrbit} = props;\n\n    props.zoom = Array.isArray(zoom)\n      ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)]\n      : clamp(zoom, minZoom, maxZoom);\n\n    props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n    if (rotationOrbit < -180 || rotationOrbit > 180) {\n      props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller<OrbitState> {\n  ControllerState = OrbitState;\n\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator({\n      transitionProps: {\n        compare: ['target', 'zoom', 'rotationX', 'rotationOrbit'],\n        required: ['target', 'zoom']\n      }\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}