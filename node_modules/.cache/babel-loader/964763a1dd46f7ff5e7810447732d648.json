{"ast":null,"code":"import { assertWebGL2Context, withParameters } from '@luma.gl/gltools';\nimport { assert } from '../utils/assert';\nconst GL_DEPTH_BUFFER_BIT = 0x00000100;\nconst GL_STENCIL_BUFFER_BIT = 0x00000400;\nconst GL_COLOR_BUFFER_BIT = 0x00004000;\nconst GL_COLOR = 0x1800;\nconst GL_DEPTH = 0x1801;\nconst GL_STENCIL = 0x1802;\nconst GL_DEPTH_STENCIL = 0x84f9;\nconst ERR_ARGUMENTS = 'clear: bad arguments';\nexport function clear(gl) {\n  let {\n    framebuffer = null,\n    color = null,\n    depth = null,\n    stencil = null\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const parameters = {};\n\n  if (framebuffer) {\n    parameters.framebuffer = framebuffer;\n  }\n\n  let clearFlags = 0;\n\n  if (color) {\n    clearFlags |= GL_COLOR_BUFFER_BIT;\n\n    if (color !== true) {\n      parameters.clearColor = color;\n    }\n  }\n\n  if (depth) {\n    clearFlags |= GL_DEPTH_BUFFER_BIT;\n\n    if (depth !== true) {\n      parameters.clearDepth = depth;\n    }\n  }\n\n  if (stencil) {\n    clearFlags |= GL_STENCIL_BUFFER_BIT;\n\n    if (depth !== true) {\n      parameters.clearStencil = depth;\n    }\n  }\n\n  assert(clearFlags !== 0, ERR_ARGUMENTS);\n  withParameters(gl, parameters, () => {\n    gl.clear(clearFlags);\n  });\n}\nexport function clearBuffer(gl) {\n  let {\n    framebuffer = null,\n    buffer = GL_COLOR,\n    drawBuffer = 0,\n    value = [0, 0, 0, 0]\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  assertWebGL2Context(gl);\n  withParameters(gl, {\n    framebuffer\n  }, () => {\n    switch (buffer) {\n      case GL_COLOR:\n        switch (value.constructor) {\n          case Int32Array:\n            gl.clearBufferiv(buffer, drawBuffer, value);\n            break;\n\n          case Uint32Array:\n            gl.clearBufferuiv(buffer, drawBuffer, value);\n            break;\n\n          case Float32Array:\n          default:\n            gl.clearBufferfv(buffer, drawBuffer, value);\n        }\n\n        break;\n\n      case GL_DEPTH:\n        gl.clearBufferfv(GL_DEPTH, 0, [value]);\n        break;\n\n      case GL_STENCIL:\n        gl.clearBufferiv(GL_STENCIL, 0, [value]);\n        break;\n\n      case GL_DEPTH_STENCIL:\n        const [depth, stencil] = value;\n        gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);\n        break;\n\n      default:\n        assert(false, ERR_ARGUMENTS);\n    }\n  });\n}","map":{"version":3,"mappings":"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","names":["assertWebGL2Context","withParameters","assert","GL_DEPTH_BUFFER_BIT","GL_STENCIL_BUFFER_BIT","GL_COLOR_BUFFER_BIT","GL_COLOR","GL_DEPTH","GL_STENCIL","GL_DEPTH_STENCIL","ERR_ARGUMENTS","clear","gl","framebuffer","color","depth","stencil","arguments","parameters","clearFlags","clearColor","clearDepth","clearStencil","clearBuffer","buffer","drawBuffer","value","constructor","Int32Array","clearBufferiv","Uint32Array","clearBufferuiv","Float32Array","clearBufferfv","clearBufferfi"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@luma.gl\\webgl\\src\\classes\\clear.js"],"sourcesContent":["import {assertWebGL2Context, withParameters} from '@luma.gl/gltools';\nimport {assert} from '../utils/assert';\n\n// Should collapse during minification\nconst GL_DEPTH_BUFFER_BIT = 0x00000100;\nconst GL_STENCIL_BUFFER_BIT = 0x00000400;\nconst GL_COLOR_BUFFER_BIT = 0x00004000;\n\nconst GL_COLOR = 0x1800;\nconst GL_DEPTH = 0x1801;\nconst GL_STENCIL = 0x1802;\nconst GL_DEPTH_STENCIL = 0x84f9;\n\n// Should disappear if asserts are removed\nconst ERR_ARGUMENTS = 'clear: bad arguments';\n\n// Optionally clears depth, color and stencil buffers\n/** @type {import('./clear').clear} */\nexport function clear(gl, {framebuffer = null, color = null, depth = null, stencil = null} = {}) {\n  const parameters = {};\n\n  if (framebuffer) {\n    parameters.framebuffer = framebuffer;\n  }\n\n  let clearFlags = 0;\n\n  if (color) {\n    clearFlags |= GL_COLOR_BUFFER_BIT;\n    if (color !== true) {\n      parameters.clearColor = color;\n    }\n  }\n\n  if (depth) {\n    clearFlags |= GL_DEPTH_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearDepth = depth;\n    }\n  }\n\n  if (stencil) {\n    clearFlags |= GL_STENCIL_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearStencil = depth;\n    }\n  }\n\n  assert(clearFlags !== 0, ERR_ARGUMENTS);\n\n  // Temporarily set any clear \"colors\" and call clear\n  withParameters(gl, parameters, () => {\n    gl.clear(clearFlags);\n  });\n}\n\n// WebGL2 - clear a specific drawing buffer\n/** @type {import('./clear').clearBuffer} */\nexport function clearBuffer(\n  gl,\n  {framebuffer = null, buffer = GL_COLOR, drawBuffer = 0, value = [0, 0, 0, 0]} = {}\n) {\n  assertWebGL2Context(gl);\n\n  withParameters(gl, {framebuffer}, () => {\n    // Method selection per OpenGL ES 3 docs\n    switch (buffer) {\n      case GL_COLOR:\n        switch (value.constructor) {\n          case Int32Array:\n            gl.clearBufferiv(buffer, drawBuffer, value);\n            break;\n          case Uint32Array:\n            gl.clearBufferuiv(buffer, drawBuffer, value);\n            break;\n          case Float32Array:\n          default:\n            gl.clearBufferfv(buffer, drawBuffer, value);\n        }\n        break;\n\n      case GL_DEPTH:\n        gl.clearBufferfv(GL_DEPTH, 0, [value]);\n        break;\n\n      case GL_STENCIL:\n        gl.clearBufferiv(GL_STENCIL, 0, [value]);\n        break;\n\n      case GL_DEPTH_STENCIL:\n        const [depth, stencil] = value;\n        gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);\n        break;\n\n      default:\n        assert(false, ERR_ARGUMENTS);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}