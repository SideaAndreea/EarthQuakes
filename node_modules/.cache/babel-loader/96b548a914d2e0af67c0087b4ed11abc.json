{"ast":null,"code":"import Resource from './resource';\nimport Accessor from './accessor';\nimport { getGLTypeFromTypedArray, getTypedArrayFromGLType } from '../webgl-utils/typed-array-utils';\nimport { assertWebGL2Context, log } from '@luma.gl/gltools';\nimport { assert } from '../utils/assert';\nimport { checkProps } from '../utils/check-props';\nconst DEBUG_DATA_LENGTH = 10;\nconst DEPRECATED_PROPS = {\n  offset: 'accessor.offset',\n  stride: 'accessor.stride',\n  type: 'accessor.type',\n  size: 'accessor.size',\n  divisor: 'accessor.divisor',\n  normalized: 'accessor.normalized',\n  integer: 'accessor.integer',\n  instanced: 'accessor.divisor',\n  isInstanced: 'accessor.divisor'\n};\nconst PROP_CHECKS_INITIALIZE = {\n  removedProps: {},\n  replacedProps: {\n    bytes: 'byteLength'\n  },\n  deprecatedProps: DEPRECATED_PROPS\n};\nconst PROP_CHECKS_SET_PROPS = {\n  removedProps: DEPRECATED_PROPS\n};\nexport default class Buffer extends Resource {\n  get [Symbol.toStringTag]() {\n    return 'Buffer';\n  }\n\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(gl, props);\n    this.stubRemovedMethods('Buffer', 'v6.0', ['layout', 'setLayout', 'getIndexedParameter']);\n    this.target = props.target || (this.gl.webgl2 ? 36662 : 34962);\n    this.initialize(props);\n    Object.seal(this);\n  }\n\n  getElementCount() {\n    let accessor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.accessor;\n    return Math.round(this.byteLength / Accessor.getBytesPerElement(accessor));\n  }\n\n  getVertexCount() {\n    let accessor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.accessor;\n    return Math.round(this.byteLength / Accessor.getBytesPerVertex(accessor));\n  }\n\n  initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (ArrayBuffer.isView(props)) {\n      props = {\n        data: props\n      };\n    }\n\n    if (Number.isFinite(props)) {\n      props = {\n        byteLength: props\n      };\n    }\n\n    props = checkProps('Buffer', props, PROP_CHECKS_INITIALIZE);\n    this.usage = props.usage || 35044;\n    this.debugData = null;\n    this.setAccessor(Object.assign({}, props, props.accessor));\n\n    if (props.data) {\n      this._setData(props.data, props.offset, props.byteLength);\n    } else {\n      this._setByteLength(props.byteLength || 0);\n    }\n\n    return this;\n  }\n\n  setProps(props) {\n    props = checkProps('Buffer', props, PROP_CHECKS_SET_PROPS);\n\n    if ('accessor' in props) {\n      this.setAccessor(props.accessor);\n    }\n\n    return this;\n  }\n\n  setAccessor(accessor) {\n    accessor = Object.assign({}, accessor);\n    delete accessor.buffer;\n    this.accessor = new Accessor(accessor);\n    return this;\n  }\n\n  reallocate(byteLength) {\n    if (byteLength > this.byteLength) {\n      this._setByteLength(byteLength);\n\n      return true;\n    }\n\n    this.bytesUsed = byteLength;\n    return false;\n  }\n\n  setData(props) {\n    return this.initialize(props);\n  }\n\n  subData(props) {\n    if (ArrayBuffer.isView(props)) {\n      props = {\n        data: props\n      };\n    }\n\n    const {\n      data,\n      offset = 0,\n      srcOffset = 0\n    } = props;\n    const byteLength = props.byteLength || props.length;\n    assert(data);\n    const target = this.gl.webgl2 ? 36663 : this.target;\n    this.gl.bindBuffer(target, this.handle);\n\n    if (srcOffset !== 0 || byteLength !== undefined) {\n      assertWebGL2Context(this.gl);\n      this.gl.bufferSubData(this.target, offset, data, srcOffset, byteLength);\n    } else {\n      this.gl.bufferSubData(target, offset, data);\n    }\n\n    this.gl.bindBuffer(target, null);\n    this.debugData = null;\n\n    this._inferType(data);\n\n    return this;\n  }\n\n  copyData(_ref) {\n    let {\n      sourceBuffer,\n      readOffset = 0,\n      writeOffset = 0,\n      size\n    } = _ref;\n    const {\n      gl\n    } = this;\n    assertWebGL2Context(gl);\n    gl.bindBuffer(36662, sourceBuffer.handle);\n    gl.bindBuffer(36663, this.handle);\n    gl.copyBufferSubData(36662, 36663, readOffset, writeOffset, size);\n    gl.bindBuffer(36662, null);\n    gl.bindBuffer(36663, null);\n    this.debugData = null;\n    return this;\n  }\n\n  getData() {\n    let {\n      dstData = null,\n      srcByteOffset = 0,\n      dstOffset = 0,\n      length = 0\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    assertWebGL2Context(this.gl);\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || 5126, {\n      clamped: false\n    });\n\n    const sourceAvailableElementCount = this._getAvailableElementCount(srcByteOffset);\n\n    const dstElementOffset = dstOffset;\n    let dstAvailableElementCount;\n    let dstElementCount;\n\n    if (dstData) {\n      dstElementCount = dstData.length;\n      dstAvailableElementCount = dstElementCount - dstElementOffset;\n    } else {\n      dstAvailableElementCount = Math.min(sourceAvailableElementCount, length || sourceAvailableElementCount);\n      dstElementCount = dstElementOffset + dstAvailableElementCount;\n    }\n\n    const copyElementCount = Math.min(sourceAvailableElementCount, dstAvailableElementCount);\n    length = length || copyElementCount;\n    assert(length <= copyElementCount);\n    dstData = dstData || new ArrayType(dstElementCount);\n    this.gl.bindBuffer(36662, this.handle);\n    this.gl.getBufferSubData(36662, srcByteOffset, dstData, dstOffset, length);\n    this.gl.bindBuffer(36662, null);\n    return dstData;\n  }\n\n  bind() {\n    let {\n      target = this.target,\n      index = this.accessor && this.accessor.index,\n      offset = 0,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (target === 35345 || target === 35982) {\n      if (size !== undefined) {\n        this.gl.bindBufferRange(target, index, this.handle, offset, size);\n      } else {\n        assert(offset === 0);\n        this.gl.bindBufferBase(target, index, this.handle);\n      }\n    } else {\n      this.gl.bindBuffer(target, this.handle);\n    }\n\n    return this;\n  }\n\n  unbind() {\n    let {\n      target = this.target,\n      index = this.accessor && this.accessor.index\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const isIndexedBuffer = target === 35345 || target === 35982;\n\n    if (isIndexedBuffer) {\n      this.gl.bindBufferBase(target, index, null);\n    } else {\n      this.gl.bindBuffer(target, null);\n    }\n\n    return this;\n  }\n\n  getDebugData() {\n    if (!this.debugData) {\n      this.debugData = this.getData({\n        length: Math.min(DEBUG_DATA_LENGTH, this.byteLength)\n      });\n      return {\n        data: this.debugData,\n        changed: true\n      };\n    }\n\n    return {\n      data: this.debugData,\n      changed: false\n    };\n  }\n\n  invalidateDebugData() {\n    this.debugData = null;\n  }\n\n  _setData(data) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let byteLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : data.byteLength + offset;\n    assert(ArrayBuffer.isView(data));\n\n    this._trackDeallocatedMemory();\n\n    const target = this._getTarget();\n\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, byteLength, this.usage);\n    this.gl.bufferSubData(target, offset, data);\n    this.gl.bindBuffer(target, null);\n    this.debugData = data.slice(0, DEBUG_DATA_LENGTH);\n    this.bytesUsed = byteLength;\n\n    this._trackAllocatedMemory(byteLength);\n\n    const type = getGLTypeFromTypedArray(data);\n    assert(type);\n    this.setAccessor(new Accessor(this.accessor, {\n      type\n    }));\n    return this;\n  }\n\n  _setByteLength(byteLength) {\n    let usage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.usage;\n    assert(byteLength >= 0);\n\n    this._trackDeallocatedMemory();\n\n    let data = byteLength;\n\n    if (byteLength === 0) {\n      data = new Float32Array(0);\n    }\n\n    const target = this._getTarget();\n\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, data, usage);\n    this.gl.bindBuffer(target, null);\n    this.usage = usage;\n    this.debugData = null;\n    this.bytesUsed = byteLength;\n\n    this._trackAllocatedMemory(byteLength);\n\n    return this;\n  }\n\n  _getTarget() {\n    return this.gl.webgl2 ? 36663 : this.target;\n  }\n\n  _getAvailableElementCount(srcByteOffset) {\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || 5126, {\n      clamped: false\n    });\n    const sourceElementOffset = srcByteOffset / ArrayType.BYTES_PER_ELEMENT;\n    return this.getElementCount() - sourceElementOffset;\n  }\n\n  _inferType(data) {\n    if (!this.accessor.type) {\n      this.setAccessor(new Accessor(this.accessor, {\n        type: getGLTypeFromTypedArray(data)\n      }));\n    }\n  }\n\n  _createHandle() {\n    return this.gl.createBuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteBuffer(this.handle);\n\n    this._trackDeallocatedMemory();\n  }\n\n  _getParameter(pname) {\n    this.gl.bindBuffer(this.target, this.handle);\n    const value = this.gl.getBufferParameter(this.target, pname);\n    this.gl.bindBuffer(this.target, null);\n    return value;\n  }\n\n  get type() {\n    log.deprecated('Buffer.type', 'Buffer.accessor.type')();\n    return this.accessor.type;\n  }\n\n  get bytes() {\n    log.deprecated('Buffer.bytes', 'Buffer.byteLength')();\n    return this.byteLength;\n  }\n\n  setByteLength(byteLength) {\n    log.deprecated('setByteLength', 'reallocate')();\n    return this.reallocate(byteLength);\n  }\n\n  updateAccessor(opts) {\n    log.deprecated('updateAccessor(...)', 'setAccessor(new Accessor(buffer.accessor, ...)')();\n    this.accessor = new Accessor(this.accessor, opts);\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Resource","Accessor","getGLTypeFromTypedArray","getTypedArrayFromGLType","assertWebGL2Context","log","assert","checkProps","DEBUG_DATA_LENGTH","DEPRECATED_PROPS","offset","stride","type","size","divisor","normalized","integer","instanced","isInstanced","PROP_CHECKS_INITIALIZE","removedProps","replacedProps","bytes","deprecatedProps","PROP_CHECKS_SET_PROPS","Buffer","Symbol","toStringTag","constructor","gl","props","stubRemovedMethods","target","webgl2","initialize","Object","seal","getElementCount","accessor","Math","round","byteLength","getBytesPerElement","getVertexCount","getBytesPerVertex","ArrayBuffer","isView","data","Number","isFinite","usage","debugData","setAccessor","assign","_setData","_setByteLength","setProps","buffer","reallocate","bytesUsed","setData","subData","srcOffset","length","bindBuffer","handle","undefined","bufferSubData","_inferType","copyData","sourceBuffer","readOffset","writeOffset","_ref","copyBufferSubData","getData","dstData","srcByteOffset","dstOffset","arguments","ArrayType","clamped","sourceAvailableElementCount","_getAvailableElementCount","dstElementOffset","dstAvailableElementCount","dstElementCount","min","copyElementCount","getBufferSubData","bind","index","bindBufferRange","bindBufferBase","unbind","isIndexedBuffer","getDebugData","changed","invalidateDebugData","_trackDeallocatedMemory","_getTarget","bufferData","slice","_trackAllocatedMemory","Float32Array","sourceElementOffset","BYTES_PER_ELEMENT","_createHandle","createBuffer","_deleteHandle","deleteBuffer","_getParameter","pname","value","getBufferParameter","deprecated","setByteLength","updateAccessor","opts"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplicații\\earthquakes\\node_modules\\@luma.gl\\webgl\\src\\classes\\buffer.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Accessor from './accessor';\nimport {getGLTypeFromTypedArray, getTypedArrayFromGLType} from '../webgl-utils/typed-array-utils';\nimport {assertWebGL2Context, log} from '@luma.gl/gltools';\nimport {assert} from '../utils/assert';\nimport {checkProps} from '../utils/check-props';\n\nconst DEBUG_DATA_LENGTH = 10;\n\n// Shared prop checks for constructor and setProps\nconst DEPRECATED_PROPS = {\n  offset: 'accessor.offset',\n  stride: 'accessor.stride',\n  type: 'accessor.type',\n  size: 'accessor.size',\n  divisor: 'accessor.divisor',\n  normalized: 'accessor.normalized',\n  integer: 'accessor.integer',\n  instanced: 'accessor.divisor',\n  isInstanced: 'accessor.divisor'\n};\n\n// Prop checks for constructor\nconst PROP_CHECKS_INITIALIZE = {\n  removedProps: {},\n  replacedProps: {\n    bytes: 'byteLength'\n  },\n  // new Buffer() with individual accessor props is still used in apps, emit warnings\n  deprecatedProps: DEPRECATED_PROPS\n};\n\n// Prop checks for setProps\nconst PROP_CHECKS_SET_PROPS = {\n  // Buffer.setProps() with individual accessor props is rare => emit errors\n  removedProps: DEPRECATED_PROPS\n};\n\nexport default class Buffer extends Resource {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'Buffer';\n  }\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Buffer', 'v6.0', ['layout', 'setLayout', 'getIndexedParameter']);\n    // this.stubRemovedMethods('Buffer', 'v7.0', ['updateAccessor']);\n\n    // In WebGL1, need to make sure we use GL.ELEMENT_ARRAY_BUFFER when initializing element buffers\n    // otherwise buffer type will lock to generic (non-element) buffer\n    // In WebGL2, we can use GL.COPY_READ_BUFFER which avoids locking the type here\n    this.target = props.target || (this.gl.webgl2 ? GL.COPY_READ_BUFFER : GL.ARRAY_BUFFER);\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  // returns number of elements in the buffer (assuming that the full buffer is used)\n  getElementCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerElement(accessor));\n  }\n\n  // returns number of vertices in the buffer (assuming that the full buffer is used)\n  getVertexCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerVertex(accessor));\n  }\n\n  // Creates and initializes the buffer object's data store.\n  // Signature: `new Buffer(gl, {data: new Float32Array(...)})`\n  // Signature: `new Buffer(gl, new Float32Array(...))`\n  // Signature: `new Buffer(gl, 100)`\n  initialize(props = {}) {\n    // Signature `new Buffer(gl, new Float32Array(...)`\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    // Signature: `new Buffer(gl, 100)`\n    if (Number.isFinite(props)) {\n      props = {byteLength: props};\n    }\n\n    props = checkProps('Buffer', props, PROP_CHECKS_INITIALIZE);\n\n    // Initialize member fields\n    this.usage = props.usage || GL.STATIC_DRAW;\n    this.debugData = null;\n\n    // Deprecated: Merge main props and accessor\n    this.setAccessor(Object.assign({}, props, props.accessor));\n\n    // Set data: (re)initializes the buffer\n    if (props.data) {\n      this._setData(props.data, props.offset, props.byteLength);\n    } else {\n      this._setByteLength(props.byteLength || 0);\n    }\n\n    return this;\n  }\n\n  setProps(props) {\n    props = checkProps('Buffer', props, PROP_CHECKS_SET_PROPS);\n\n    if ('accessor' in props) {\n      this.setAccessor(props.accessor);\n    }\n\n    return this;\n  }\n\n  // Optionally stores an accessor with the buffer, makes it easier to use it as an attribute later\n  // {type, size = 1, offset = 0, stride = 0, normalized = false, integer = false, divisor = 0}\n  setAccessor(accessor) {\n    // NOTE: From luma.gl v7.0, Accessors have an optional `buffer `field\n    // (mainly to support \"interleaving\")\n    // To avoid confusion, ensure `buffer.accessor` does not have a `buffer.accessor.buffer` field:\n    accessor = Object.assign({}, accessor);\n    delete accessor.buffer;\n\n    // This new statement ensures that an \"accessor object\" is re-packaged as an Accessor instance\n    this.accessor = new Accessor(accessor);\n    return this;\n  }\n\n  // Allocate a bigger GPU buffer (if the current buffer is not big enough).\n  // If a reallocation is triggered it clears the buffer\n  // Returns:\n  //  `true`: buffer was reallocated, data was cleared\n  //  `false`: buffer was big enough, data is intact\n  reallocate(byteLength) {\n    if (byteLength > this.byteLength) {\n      this._setByteLength(byteLength);\n      return true;\n    }\n    this.bytesUsed = byteLength;\n    return false;\n  }\n\n  // Update with new data. Reinitializes the buffer\n  setData(props) {\n    return this.initialize(props);\n  }\n\n  // Updates a subset of a buffer object's data store.\n  // Data (Typed Array or ArrayBuffer), length is inferred unless provided\n  // Offset into buffer\n  // WebGL2 only: Offset into srcData\n  // WebGL2 only: Number of bytes to be copied\n  subData(props) {\n    // Signature: buffer.subData(new Float32Array([...]))\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    const {data, offset = 0, srcOffset = 0} = props;\n    const byteLength = props.byteLength || props.length;\n\n    assert(data);\n\n    // Create the buffer - binding it here for the first time locks the type\n    // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n    const target = this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n    this.gl.bindBuffer(target, this.handle);\n    // WebGL2: subData supports additional srcOffset and length parameters\n    if (srcOffset !== 0 || byteLength !== undefined) {\n      assertWebGL2Context(this.gl);\n      this.gl.bufferSubData(this.target, offset, data, srcOffset, byteLength);\n    } else {\n      this.gl.bufferSubData(target, offset, data);\n    }\n    this.gl.bindBuffer(target, null);\n\n    // TODO - update local `data` if offsets are right\n    this.debugData = null;\n\n    this._inferType(data);\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Copies part of the data of another buffer into this buffer\n  copyData({sourceBuffer, readOffset = 0, writeOffset = 0, size}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n\n    // Use GL.COPY_READ_BUFFER+GL.COPY_WRITE_BUFFER avoid disturbing other targets and locking type\n    gl.bindBuffer(GL.COPY_READ_BUFFER, sourceBuffer.handle);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, this.handle);\n    gl.copyBufferSubData(GL.COPY_READ_BUFFER, GL.COPY_WRITE_BUFFER, readOffset, writeOffset, size);\n    gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n    this.debugData = null;\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Reads data from buffer into an ArrayBufferView or SharedArrayBuffer.\n  getData({dstData = null, srcByteOffset = 0, dstOffset = 0, length = 0} = {}) {\n    assertWebGL2Context(this.gl);\n\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceAvailableElementCount = this._getAvailableElementCount(srcByteOffset);\n\n    const dstElementOffset = dstOffset;\n\n    let dstAvailableElementCount;\n    let dstElementCount;\n    if (dstData) {\n      dstElementCount = dstData.length;\n      dstAvailableElementCount = dstElementCount - dstElementOffset;\n    } else {\n      // Allocate ArrayBufferView with enough size to copy all eligible data.\n      dstAvailableElementCount = Math.min(\n        sourceAvailableElementCount,\n        length || sourceAvailableElementCount\n      );\n      dstElementCount = dstElementOffset + dstAvailableElementCount;\n    }\n\n    const copyElementCount = Math.min(sourceAvailableElementCount, dstAvailableElementCount);\n    length = length || copyElementCount;\n    assert(length <= copyElementCount);\n    dstData = dstData || new ArrayType(dstElementCount);\n\n    // Use GL.COPY_READ_BUFFER to avoid disturbing other targets and locking type\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, this.handle);\n    this.gl.getBufferSubData(GL.COPY_READ_BUFFER, srcByteOffset, dstData, dstOffset, length);\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n    return dstData;\n  }\n\n  /**\n   * Binds a buffer to a given binding point (target).\n   *   GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER take an index, and optionally a range.\n   *   - GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER need an index to affect state\n   *   - GL.UNIFORM_BUFFER: `offset` must be aligned to GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT.\n   *   - GL.UNIFORM_BUFFER: `size` must be a minimum of GL.UNIFORM_BLOCK_SIZE_DATA.\n   */\n  bind({\n    target = this.target, // target for the bind operation\n    index = this.accessor && this.accessor.index, // index = index of target (indexed bind point)\n    offset = 0,\n    size\n  } = {}) {\n    // NOTE: While GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER could\n    // be used as direct binding points, they will not affect transform feedback or\n    // uniform buffer state. Instead indexed bindings need to be made.\n    if (target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER) {\n      if (size !== undefined) {\n        this.gl.bindBufferRange(target, index, this.handle, offset, size);\n      } else {\n        assert(offset === 0); // Make sure offset wasn't supplied\n        this.gl.bindBufferBase(target, index, this.handle);\n      }\n    } else {\n      this.gl.bindBuffer(target, this.handle);\n    }\n\n    return this;\n  }\n\n  unbind({target = this.target, index = this.accessor && this.accessor.index} = {}) {\n    const isIndexedBuffer = target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER;\n    if (isIndexedBuffer) {\n      this.gl.bindBufferBase(target, index, null);\n    } else {\n      this.gl.bindBuffer(target, null);\n    }\n    return this;\n  }\n\n  // PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)\n\n  // Returns a short initial data array\n  getDebugData() {\n    if (!this.debugData) {\n      this.debugData = this.getData({length: Math.min(DEBUG_DATA_LENGTH, this.byteLength)});\n      return {data: this.debugData, changed: true};\n    }\n    return {data: this.debugData, changed: false};\n  }\n\n  invalidateDebugData() {\n    this.debugData = null;\n  }\n\n  // PRIVATE METHODS\n\n  // Allocate a new buffer and initialize to contents of typed array\n  _setData(data, offset = 0, byteLength = data.byteLength + offset) {\n    assert(ArrayBuffer.isView(data));\n\n    this._trackDeallocatedMemory();\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, byteLength, this.usage);\n    this.gl.bufferSubData(target, offset, data);\n    this.gl.bindBuffer(target, null);\n\n    this.debugData = data.slice(0, DEBUG_DATA_LENGTH);\n    this.bytesUsed = byteLength;\n\n    this._trackAllocatedMemory(byteLength);\n\n    // infer GL type from supplied typed array\n    const type = getGLTypeFromTypedArray(data);\n    assert(type);\n    this.setAccessor(new Accessor(this.accessor, {type}));\n    return this;\n  }\n\n  // Allocate a GPU buffer of specified size.\n  _setByteLength(byteLength, usage = this.usage) {\n    assert(byteLength >= 0);\n\n    this._trackDeallocatedMemory();\n\n    // Workaround needed for Safari (#291):\n    // gl.bufferData with size equal to 0 crashes. Instead create zero sized array.\n    let data = byteLength;\n    if (byteLength === 0) {\n      data = new Float32Array(0);\n    }\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, data, usage);\n    this.gl.bindBuffer(target, null);\n\n    this.usage = usage;\n    this.debugData = null;\n    this.bytesUsed = byteLength;\n\n    this._trackAllocatedMemory(byteLength);\n\n    return this;\n  }\n\n  // Binding a buffer for the first time locks the type\n  // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n  _getTarget() {\n    return this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n  }\n\n  _getAvailableElementCount(srcByteOffset) {\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceElementOffset = srcByteOffset / ArrayType.BYTES_PER_ELEMENT;\n    return this.getElementCount() - sourceElementOffset;\n  }\n\n  // Automatically infers type from typed array passed to setData\n  // Note: No longer that useful, since type is now autodeduced from the compiled shaders\n  _inferType(data) {\n    if (!this.accessor.type) {\n      this.setAccessor(new Accessor(this.accessor, {type: getGLTypeFromTypedArray(data)}));\n    }\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createBuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteBuffer(this.handle);\n    this._trackDeallocatedMemory();\n  }\n\n  _getParameter(pname) {\n    this.gl.bindBuffer(this.target, this.handle);\n    const value = this.gl.getBufferParameter(this.target, pname);\n    this.gl.bindBuffer(this.target, null);\n    return value;\n  }\n\n  // DEPRECATIONS - v7.0\n  get type() {\n    log.deprecated('Buffer.type', 'Buffer.accessor.type')();\n    return this.accessor.type;\n  }\n\n  get bytes() {\n    log.deprecated('Buffer.bytes', 'Buffer.byteLength')();\n    return this.byteLength;\n  }\n\n  // DEPRECATIONS - v6.0\n  // Deprecated in v6.x, but not warnings not properly implemented\n  setByteLength(byteLength) {\n    log.deprecated('setByteLength', 'reallocate')();\n    return this.reallocate(byteLength);\n  }\n\n  // Deprecated in v6.x, but not warnings not properly implemented\n  updateAccessor(opts) {\n    log.deprecated('updateAccessor(...)', 'setAccessor(new Accessor(buffer.accessor, ...)')();\n    this.accessor = new Accessor(this.accessor, opts);\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}