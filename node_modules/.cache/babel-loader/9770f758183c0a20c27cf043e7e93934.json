{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport I3SPendingTilesRegister from './i3s-pending-tiles-register';\nconst STATUS = {\n  REQUESTED: 'REQUESTED',\n  COMPLETED: 'COMPLETED',\n  ERROR: 'ERROR'\n};\nexport default class I3STileManager {\n  constructor() {\n    _defineProperty(this, \"_statusMap\", void 0);\n\n    _defineProperty(this, \"pendingTilesRegister\", new I3SPendingTilesRegister());\n\n    this._statusMap = {};\n  }\n\n  add(request, key, callback, frameState) {\n    if (!this._statusMap[key]) {\n      const {\n        frameNumber,\n        viewport: {\n          id\n        }\n      } = frameState;\n      this._statusMap[key] = {\n        request,\n        callback,\n        key,\n        frameState,\n        status: STATUS.REQUESTED\n      };\n      this.pendingTilesRegister.register(id, frameNumber);\n      request().then(data => {\n        this._statusMap[key].status = STATUS.COMPLETED;\n        const {\n          frameNumber: actualFrameNumber,\n          viewport: {\n            id\n          }\n        } = this._statusMap[key].frameState;\n        this.pendingTilesRegister.deregister(id, actualFrameNumber);\n\n        this._statusMap[key].callback(data, frameState);\n      }).catch(error => {\n        this._statusMap[key].status = STATUS.ERROR;\n        const {\n          frameNumber: actualFrameNumber,\n          viewport: {\n            id\n          }\n        } = this._statusMap[key].frameState;\n        this.pendingTilesRegister.deregister(id, actualFrameNumber);\n        callback(error);\n      });\n    }\n  }\n\n  update(key, frameState) {\n    if (this._statusMap[key]) {\n      const {\n        frameNumber,\n        viewport: {\n          id\n        }\n      } = this._statusMap[key].frameState;\n      this.pendingTilesRegister.deregister(id, frameNumber);\n      const {\n        frameNumber: newFrameNumber,\n        viewport: {\n          id: newViewportId\n        }\n      } = frameState;\n      this.pendingTilesRegister.register(newViewportId, newFrameNumber);\n      this._statusMap[key].frameState = frameState;\n    }\n  }\n\n  find(key) {\n    return this._statusMap[key];\n  }\n\n  hasPendingTiles(viewportId, frameNumber) {\n    return !this.pendingTilesRegister.isZero(viewportId, frameNumber);\n  }\n\n}","map":{"version":3,"mappings":";AACA,OAAOA,uBAAP,MAAoC,8BAApC;AAEA,MAAMC,MAAM,GAAG;EACbC,SAAS,EAAE,WADE;EAEbC,SAAS,EAAE,WAFE;EAGbC,KAAK,EAAE;AAHM,CAAf;AAOA,eAAe,MAAMC,cAAN,CAAqB;EAIlCC,WAAW,GAAG;IAAAC;;IAAAA,8CAFiB,IAAIP,uBAAJ,EAEjB;;IACZ,KAAKQ,UAAL,GAAkB,EAAlB;EACD;;EASDC,GAAG,CAACC,OAAD,EAAUC,GAAV,EAAeC,QAAf,EAAyBC,UAAzB,EAAiD;IAClD,IAAI,CAAC,KAAKL,UAAL,CAAgBG,GAAhB,CAAL,EAA2B;MACzB,MAAM;QACJG,WADI;QAEJC,QAAQ,EAAE;UAACC;QAAD;MAFN,IAGFH,UAHJ;MAIA,KAAKL,UAAL,CAAgBG,GAAhB,IAAuB;QAACD,OAAD;QAAUE,QAAV;QAAoBD,GAApB;QAAyBE,UAAzB;QAAqCI,MAAM,EAAEhB,MAAM,CAACC;MAApD,CAAvB;MAEA,KAAKgB,oBAAL,CAA0BC,QAA1B,CAAmCH,EAAnC,EAAuCF,WAAvC;MACAJ,OAAO,GACJU,IADHV,CACSW,IAAD,IAAU;QACd,KAAKb,UAAL,CAAgBG,GAAhB,EAAqBM,MAArB,GAA8BhB,MAAM,CAACE,SAArC;QACA,MAAM;UACJW,WAAW,EAAEQ,iBADT;UAEJP,QAAQ,EAAE;YAACC;UAAD;QAFN,IAGF,KAAKR,UAAL,CAAgBG,GAAhB,EAAqBE,UAHzB;QAKA,KAAKK,oBAAL,CAA0BK,UAA1B,CAAqCP,EAArC,EAAyCM,iBAAzC;;QACA,KAAKd,UAAL,CAAgBG,GAAhB,EAAqBC,QAArB,CAA8BS,IAA9B,EAAoCR,UAApC;MATJ,GAWGW,KAXHd,CAWUe,KAAD,IAAW;QAChB,KAAKjB,UAAL,CAAgBG,GAAhB,EAAqBM,MAArB,GAA8BhB,MAAM,CAACG,KAArC;QACA,MAAM;UACJU,WAAW,EAAEQ,iBADT;UAEJP,QAAQ,EAAE;YAACC;UAAD;QAFN,IAGF,KAAKR,UAAL,CAAgBG,GAAhB,EAAqBE,UAHzB;QAKA,KAAKK,oBAAL,CAA0BK,UAA1B,CAAqCP,EAArC,EAAyCM,iBAAzC;QACAV,QAAQ,CAACa,KAAD,CAARb;MAnBJ;IAqBD;EACF;;EAODc,MAAM,CAACf,GAAD,EAAME,UAAN,EAA8B;IAClC,IAAI,KAAKL,UAAL,CAAgBG,GAAhB,CAAJ,EAA0B;MAExB,MAAM;QACJG,WADI;QAEJC,QAAQ,EAAE;UAACC;QAAD;MAFN,IAGF,KAAKR,UAAL,CAAgBG,GAAhB,EAAqBE,UAHzB;MAIA,KAAKK,oBAAL,CAA0BK,UAA1B,CAAqCP,EAArC,EAAyCF,WAAzC;MAGA,MAAM;QACJA,WAAW,EAAEa,cADT;QAEJZ,QAAQ,EAAE;UAACC,EAAE,EAAEY;QAAL;MAFN,IAGFf,UAHJ;MAIA,KAAKK,oBAAL,CAA0BC,QAA1B,CAAmCS,aAAnC,EAAkDD,cAAlD;MACA,KAAKnB,UAAL,CAAgBG,GAAhB,EAAqBE,UAArB,GAAkCA,UAAlC;IACD;EACF;;EAODgB,IAAI,CAAClB,GAAD,EAAM;IACR,OAAO,KAAKH,UAAL,CAAgBG,GAAhB,CAAP;EACD;;EAQDmB,eAAe,CAACC,UAAD,EAAqBjB,WAArB,EAAmD;IAChE,OAAO,CAAC,KAAKI,oBAAL,CAA0Bc,MAA1B,CAAiCD,UAAjC,EAA6CjB,WAA7C,CAAR;EACD;;AAzFiC","names":["I3SPendingTilesRegister","STATUS","REQUESTED","COMPLETED","ERROR","I3STileManager","constructor","_defineProperty","_statusMap","add","request","key","callback","frameState","frameNumber","viewport","id","status","pendingTilesRegister","register","then","data","actualFrameNumber","deregister","catch","error","update","newFrameNumber","newViewportId","find","hasPendingTiles","viewportId","isZero"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@loaders.gl\\tiles\\src\\tileset\\traversers\\i3s-tile-manager.ts"],"sourcesContent":["import {FrameState} from '../helpers/frame-state';\nimport I3SPendingTilesRegister from './i3s-pending-tiles-register';\n\nconst STATUS = {\n  REQUESTED: 'REQUESTED',\n  COMPLETED: 'COMPLETED',\n  ERROR: 'ERROR'\n};\n\n// A helper class to manage tile metadata fetching\nexport default class I3STileManager {\n  private _statusMap: object;\n  private pendingTilesRegister = new I3SPendingTilesRegister();\n\n  constructor() {\n    this._statusMap = {};\n  }\n\n  /**\n   * Add request to map\n   * @param request - node metadata request\n   * @param key - unique key\n   * @param callback - callback after request completed\n   * @param frameState - frameState data\n   */\n  add(request, key, callback, frameState: FrameState) {\n    if (!this._statusMap[key]) {\n      const {\n        frameNumber,\n        viewport: {id}\n      } = frameState;\n      this._statusMap[key] = {request, callback, key, frameState, status: STATUS.REQUESTED};\n      // Register pending request for the frameNumber\n      this.pendingTilesRegister.register(id, frameNumber);\n      request()\n        .then((data) => {\n          this._statusMap[key].status = STATUS.COMPLETED;\n          const {\n            frameNumber: actualFrameNumber,\n            viewport: {id}\n          } = this._statusMap[key].frameState;\n          // Deregister pending request for the frameNumber\n          this.pendingTilesRegister.deregister(id, actualFrameNumber);\n          this._statusMap[key].callback(data, frameState);\n        })\n        .catch((error) => {\n          this._statusMap[key].status = STATUS.ERROR;\n          const {\n            frameNumber: actualFrameNumber,\n            viewport: {id}\n          } = this._statusMap[key].frameState;\n          // Deregister pending request for the frameNumber\n          this.pendingTilesRegister.deregister(id, actualFrameNumber);\n          callback(error);\n        });\n    }\n  }\n\n  /**\n   * Update request if it is still actual for the new frameState\n   * @param key - unique key\n   * @param frameState - frameState data\n   */\n  update(key, frameState: FrameState) {\n    if (this._statusMap[key]) {\n      // Deregister pending request for the old frameNumber\n      const {\n        frameNumber,\n        viewport: {id}\n      } = this._statusMap[key].frameState;\n      this.pendingTilesRegister.deregister(id, frameNumber);\n\n      // Register pending request for the new frameNumber\n      const {\n        frameNumber: newFrameNumber,\n        viewport: {id: newViewportId}\n      } = frameState;\n      this.pendingTilesRegister.register(newViewportId, newFrameNumber);\n      this._statusMap[key].frameState = frameState;\n    }\n  }\n\n  /**\n   * Find request in the map\n   * @param key - unique key\n   * @returns\n   */\n  find(key) {\n    return this._statusMap[key];\n  }\n\n  /**\n   * Check it there are pending tile headers for the particular frameNumber\n   * @param viewportId\n   * @param frameNumber\n   * @returns\n   */\n  hasPendingTiles(viewportId: string, frameNumber: number): boolean {\n    return !this.pendingTilesRegister.isZero(viewportId, frameNumber);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}