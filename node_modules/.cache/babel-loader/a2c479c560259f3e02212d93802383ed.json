{"ast":null,"code":"import { COORDINATE_SYSTEM } from '../../lib/constants';\nimport { getOffsetOrigin } from './viewport-uniforms';\nimport WebMercatorViewport from '../../viewports/web-mercator-viewport';\nimport * as vec4 from 'gl-matrix/vec4';\nimport * as vec3 from 'gl-matrix/vec3';\nimport { addMetersToLngLat } from '@math.gl/web-mercator';\n\nfunction lngLatZToWorldPosition(lngLatZ, viewport) {\n  let offsetMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const p = viewport.projectPosition(lngLatZ);\n\n  if (offsetMode && viewport instanceof WebMercatorViewport) {\n    const [longitude, latitude, z = 0] = lngLatZ;\n    const distanceScales = viewport.getDistanceScales([longitude, latitude]);\n    p[2] = z * distanceScales.unitsPerMeter[2];\n  }\n\n  return p;\n}\n\nfunction normalizeParameters(opts) {\n  const {\n    viewport,\n    modelMatrix,\n    coordinateOrigin\n  } = opts;\n  let {\n    coordinateSystem,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  } = opts;\n\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN;\n  }\n\n  if (fromCoordinateSystem === undefined) {\n    fromCoordinateSystem = coordinateSystem;\n  }\n\n  if (fromCoordinateOrigin === undefined) {\n    fromCoordinateOrigin = coordinateOrigin;\n  }\n\n  return {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  };\n}\n\nexport function getWorldPosition(position, _ref) {\n  let {\n    viewport,\n    modelMatrix,\n    coordinateSystem,\n    coordinateOrigin,\n    offsetMode\n  } = _ref;\n  let [x, y, z = 0] = position;\n\n  if (modelMatrix) {\n    [x, y, z] = vec4.transformMat4([], [x, y, z, 1.0], modelMatrix);\n  }\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n      return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return lngLatZToWorldPosition([x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      return lngLatZToWorldPosition(addMetersToLngLat(coordinateOrigin, [x, y, z]), viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.CARTESIAN:\n    default:\n      return viewport.isGeospatial ? [x + coordinateOrigin[0], y + coordinateOrigin[1], z + coordinateOrigin[2]] : viewport.projectPosition([x, y, z]);\n  }\n}\nexport function projectPosition(position, params) {\n  const {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  } = normalizeParameters(params);\n  const {\n    geospatialOrigin,\n    shaderCoordinateOrigin,\n    offsetMode\n  } = getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin);\n  const worldPosition = getWorldPosition(position, {\n    viewport,\n    modelMatrix,\n    coordinateSystem: fromCoordinateSystem,\n    coordinateOrigin: fromCoordinateOrigin,\n    offsetMode\n  });\n\n  if (offsetMode) {\n    const positionCommonSpace = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);\n    vec3.sub(worldPosition, worldPosition, positionCommonSpace);\n  }\n\n  return worldPosition;\n}","map":{"version":3,"mappings":"AAIA,SAAQA,iBAAR,QAAgC,qBAAhC;AACA,SAAQC,eAAR,QAA8B,qBAA9B;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AAEA,OAAO,KAAKC,IAAZ,MAAsB,gBAAtB;AACA,OAAO,KAAKC,IAAZ,MAAsB,gBAAtB;AACA,SAAQC,iBAAR,QAAgC,uBAAhC;;AASA,SAASC,sBAAT,CACEC,OADF,EAEEC,QAFF,EAI4B;EAAA,IAD1BC,UAC0B,uEADJ,KACI;EAC1B,MAAMC,CAAC,GAAGF,QAAQ,CAACG,eAATH,CAAyBD,OAAzBC,CAAV;;EAGA,IAAIC,UAAU,IAAID,QAAQ,YAAYN,mBAAtC,EAA2D;IACzD,MAAM,CAACU,SAAD,EAAYC,QAAZ,EAAsBC,CAAC,GAAG,CAA1B,IAA+BP,OAArC;IACA,MAAMQ,cAAc,GAAGP,QAAQ,CAACQ,iBAATR,CAA2B,CAACI,SAAD,EAAYC,QAAZ,CAA3BL,CAAvB;IACAE,CAAC,CAAC,CAAD,CAADA,GAAOI,CAAC,GAAGC,cAAc,CAACE,aAAfF,CAA6B,CAA7BA,CAAXL;EACD;;EACD,OAAOA,CAAP;AACD;;AAED,SAASQ,mBAAT,CAA6BC,IAA7B,EAcE;EACA,MAAM;IAACX,QAAD;IAAWY,WAAX;IAAwBC;EAAxB,IAA4CF,IAAlD;EACA,IAAI;IAACG,gBAAD;IAAmBC,oBAAnB;IAAyCC;EAAzC,IAAiEL,IAArE;;EAEA,IAAIG,gBAAgB,KAAKtB,iBAAiB,CAACyB,OAA3C,EAAoD;IAClDH,gBAAgB,GAAGd,QAAQ,CAACkB,YAATlB,GACfR,iBAAiB,CAAC2B,MADHnB,GAEfR,iBAAiB,CAAC4B,SAFtBN;EAGD;;EAED,IAAIC,oBAAoB,KAAKM,SAA7B,EAAwC;IACtCN,oBAAoB,GAAGD,gBAAvBC;EACD;;EACD,IAAIC,oBAAoB,KAAKK,SAA7B,EAAwC;IACtCL,oBAAoB,GAAGH,gBAAvBG;EACD;;EAED,OAAO;IACLhB,QADK;IAELc,gBAFK;IAGLD,gBAHK;IAILD,WAJK;IAKLG,oBALK;IAMLC;EANK,CAAP;AAQD;;AAGD,OAAO,SAASM,gBAAT,CACLC,QADK,QAeqB;EAAA,IAb1B;IACEvB,QADF;IAEEY,WAFF;IAGEE,gBAHF;IAIED,gBAJF;IAKEZ;EALF,CAa0B;EAC1B,IAAI,CAACuB,CAAD,EAAIC,CAAJ,EAAOnB,CAAC,GAAG,CAAX,IAAgBiB,QAApB;;EAEA,IAAIX,WAAJ,EAAiB;IACf,CAACY,CAAD,EAAIC,CAAJ,EAAOnB,CAAP,IAAYX,IAAI,CAAC+B,aAAL/B,CAAmB,EAAnBA,EAAuB,CAAC6B,CAAD,EAAIC,CAAJ,EAAOnB,CAAP,EAAU,GAAV,CAAvBX,EAAuCiB,WAAvCjB,CAAZ;EACD;;EAED,QAAQmB,gBAAR;IACE,KAAKtB,iBAAiB,CAAC2B,MAAvB;MACE,OAAOrB,sBAAsB,CAAC,CAAC0B,CAAD,EAAIC,CAAJ,EAAOnB,CAAP,CAAD,EAAYN,QAAZ,EAAsBC,UAAtB,CAA7B;;IAEF,KAAKT,iBAAiB,CAACmC,cAAvB;MACE,OAAO7B,sBAAsB,CAC3B,CAAC0B,CAAC,GAAGX,gBAAgB,CAAC,CAAD,CAArB,EAA0BY,CAAC,GAAGZ,gBAAgB,CAAC,CAAD,CAA9C,EAAmDP,CAAC,IAAIO,gBAAgB,CAAC,CAAD,CAAhBA,IAAuB,CAA3B,CAApD,CAD2B,EAE3Bb,QAF2B,EAG3BC,UAH2B,CAA7B;;IAMF,KAAKT,iBAAiB,CAACoC,aAAvB;MACE,OAAO9B,sBAAsB,CAC3BD,iBAAiB,CAACgB,gBAAD,EAAmB,CAACW,CAAD,EAAIC,CAAJ,EAAOnB,CAAP,CAAnB,CADU,EAE3BN,QAF2B,EAG3BC,UAH2B,CAA7B;;IAMF,KAAKT,iBAAiB,CAAC4B,SAAvB;IACA;MACE,OAAOpB,QAAQ,CAACkB,YAATlB,GACH,CAACwB,CAAC,GAAGX,gBAAgB,CAAC,CAAD,CAArB,EAA0BY,CAAC,GAAGZ,gBAAgB,CAAC,CAAD,CAA9C,EAAmDP,CAAC,GAAGO,gBAAgB,CAAC,CAAD,CAAvE,CADGb,GAEHA,QAAQ,CAACG,eAATH,CAAyB,CAACwB,CAAD,EAAIC,CAAJ,EAAOnB,CAAP,CAAzBN,CAFJ;EApBJ;AAwBD;AAOD,OAAO,SAASG,eAAT,CACLoB,QADK,EAELM,MAFK,EAgBqB;EAC1B,MAAM;IACJ7B,QADI;IAEJc,gBAFI;IAGJD,gBAHI;IAIJD,WAJI;IAKJG,oBALI;IAMJC;EANI,IAOFN,mBAAmB,CAACmB,MAAD,CAPvB;EASA,MAAM;IAACC,gBAAD;IAAmBC,sBAAnB;IAA2C9B;EAA3C,IAAyDR,eAAe,CAC5EO,QAD4E,EAE5Ec,gBAF4E,EAG5ED,gBAH4E,CAA9E;EAMA,MAAMmB,aAAa,GAAGV,gBAAgB,CAACC,QAAD,EAAW;IAC/CvB,QAD+C;IAE/CY,WAF+C;IAG/CE,gBAAgB,EAAEC,oBAH6B;IAI/CF,gBAAgB,EAAEG,oBAJ6B;IAK/Cf;EAL+C,CAAX,CAAtC;;EAQA,IAAIA,UAAJ,EAAgB;IACd,MAAMgC,mBAAmB,GAAGjC,QAAQ,CAACG,eAATH,CAC1B8B,gBAAgB,IAAIC,sBADM/B,CAA5B;IAGAJ,IAAI,CAACsC,GAALtC,CAASoC,aAATpC,EAAwBoC,aAAxBpC,EAAuCqC,mBAAvCrC;EACD;;EAED,OAAOoC,aAAP;AACD","names":["COORDINATE_SYSTEM","getOffsetOrigin","WebMercatorViewport","vec4","vec3","addMetersToLngLat","lngLatZToWorldPosition","lngLatZ","viewport","offsetMode","p","projectPosition","longitude","latitude","z","distanceScales","getDistanceScales","unitsPerMeter","normalizeParameters","opts","modelMatrix","coordinateOrigin","coordinateSystem","fromCoordinateSystem","fromCoordinateOrigin","DEFAULT","isGeospatial","LNGLAT","CARTESIAN","undefined","getWorldPosition","position","x","y","transformMat4","LNGLAT_OFFSETS","METER_OFFSETS","params","geospatialOrigin","shaderCoordinateOrigin","worldPosition","positionCommonSpace","sub"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplica»õii\\earthquakes\\node_modules\\@deck.gl\\core\\src\\shaderlib\\project\\project-functions.ts"],"sourcesContent":["/**\n * Projection utils\n * TODO: move to Viewport class?\n */\nimport {COORDINATE_SYSTEM} from '../../lib/constants';\nimport {getOffsetOrigin} from './viewport-uniforms';\nimport WebMercatorViewport from '../../viewports/web-mercator-viewport';\n\nimport * as vec4 from 'gl-matrix/vec4';\nimport * as vec3 from 'gl-matrix/vec3';\nimport {addMetersToLngLat} from '@math.gl/web-mercator';\n\nimport type {CoordinateSystem} from '../../lib/constants';\nimport type Viewport from '../../viewports/viewport';\nimport type {NumericArray} from '../../types/types';\n\n// In project.glsl, offset modes calculate z differently from LNG_LAT mode.\n// offset modes apply the y adjustment (unitsPerMeter2) when projecting z\n// LNG_LAT mode only use the linear scale.\nfunction lngLatZToWorldPosition(\n  lngLatZ: [number, number, number],\n  viewport: Viewport,\n  offsetMode: boolean = false\n): [number, number, number] {\n  const p = viewport.projectPosition(lngLatZ);\n\n  // TODO - avoid using instanceof\n  if (offsetMode && viewport instanceof WebMercatorViewport) {\n    const [longitude, latitude, z = 0] = lngLatZ;\n    const distanceScales = viewport.getDistanceScales([longitude, latitude]);\n    p[2] = z * distanceScales.unitsPerMeter[2];\n  }\n  return p;\n}\n\nfunction normalizeParameters(opts: {\n  viewport: Viewport;\n  coordinateSystem: CoordinateSystem;\n  coordinateOrigin: [number, number, number];\n  modelMatrix?: NumericArray | null;\n  fromCoordinateSystem?: CoordinateSystem;\n  fromCoordinateOrigin?: [number, number, number];\n}): {\n  viewport: Viewport;\n  coordinateSystem: CoordinateSystem;\n  coordinateOrigin: [number, number, number];\n  modelMatrix?: NumericArray | null;\n  fromCoordinateSystem: CoordinateSystem;\n  fromCoordinateOrigin: [number, number, number];\n} {\n  const {viewport, modelMatrix, coordinateOrigin} = opts;\n  let {coordinateSystem, fromCoordinateSystem, fromCoordinateOrigin} = opts;\n\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial\n      ? COORDINATE_SYSTEM.LNGLAT\n      : COORDINATE_SYSTEM.CARTESIAN;\n  }\n\n  if (fromCoordinateSystem === undefined) {\n    fromCoordinateSystem = coordinateSystem;\n  }\n  if (fromCoordinateOrigin === undefined) {\n    fromCoordinateOrigin = coordinateOrigin;\n  }\n\n  return {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  };\n}\n\n/** Get the common space position from world coordinates in the given coordinate system */\nexport function getWorldPosition(\n  position: number[],\n  {\n    viewport,\n    modelMatrix,\n    coordinateSystem,\n    coordinateOrigin,\n    offsetMode\n  }: {\n    viewport: Viewport;\n    modelMatrix?: NumericArray | null;\n    coordinateSystem: CoordinateSystem;\n    coordinateOrigin: [number, number, number];\n    offsetMode?: boolean;\n  }\n): [number, number, number] {\n  let [x, y, z = 0] = position;\n\n  if (modelMatrix) {\n    [x, y, z] = vec4.transformMat4([], [x, y, z, 1.0], modelMatrix);\n  }\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n      return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return lngLatZToWorldPosition(\n        [x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)],\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      return lngLatZToWorldPosition(\n        addMetersToLngLat(coordinateOrigin, [x, y, z]) as [number, number, number],\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.CARTESIAN:\n    default:\n      return viewport.isGeospatial\n        ? [x + coordinateOrigin[0], y + coordinateOrigin[1], z + coordinateOrigin[2]]\n        : viewport.projectPosition([x, y, z]);\n  }\n}\n\n/**\n * Equivalent to project_position in project.glsl\n * projects a user supplied position to world position directly with or without\n * a reference coordinate system\n */\nexport function projectPosition(\n  position: number[],\n  params: {\n    /** The current viewport */\n    viewport: Viewport;\n    /** The reference coordinate system used to align world position */\n    coordinateSystem: CoordinateSystem;\n    /** The reference coordinate origin used to align world position */\n    coordinateOrigin: [number, number, number];\n    /** The model matrix of the supplied position */\n    modelMatrix?: NumericArray | null;\n    /** The coordinate system that the supplied position is in. Default to the same as `coordinateSystem`. */\n    fromCoordinateSystem?: CoordinateSystem;\n    /** The coordinate origin that the supplied position is in. Default to the same as `coordinateOrigin`. */\n    fromCoordinateOrigin?: [number, number, number];\n  }\n): [number, number, number] {\n  const {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  } = normalizeParameters(params);\n\n  const {geospatialOrigin, shaderCoordinateOrigin, offsetMode} = getOffsetOrigin(\n    viewport,\n    coordinateSystem,\n    coordinateOrigin\n  );\n\n  const worldPosition = getWorldPosition(position, {\n    viewport,\n    modelMatrix,\n    coordinateSystem: fromCoordinateSystem,\n    coordinateOrigin: fromCoordinateOrigin,\n    offsetMode\n  });\n\n  if (offsetMode) {\n    const positionCommonSpace = viewport.projectPosition(\n      geospatialOrigin || shaderCoordinateOrigin\n    );\n    vec3.sub(worldPosition, worldPosition, positionCommonSpace);\n  }\n\n  return worldPosition;\n}\n"]},"metadata":{},"sourceType":"module"}