{"ast":null,"code":"import { log, assertWebGLContext } from '@luma.gl/gltools';\nimport Texture from './texture';\nconst FACES = [34069, 34070, 34071, 34072, 34073, 34074];\nexport default class TextureCube extends Texture {\n  get [Symbol.toStringTag]() {\n    return 'TextureCube';\n  }\n\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assertWebGLContext(gl);\n    super(gl, Object.assign({}, props, {\n      target: 34067\n    }));\n    this.initialize(props);\n    Object.seal(this);\n  }\n\n  initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      mipmaps = true,\n      parameters = {}\n    } = props;\n    this.opts = props;\n    this.setCubeMapImageData(props).then(() => {\n      this.loaded = true;\n\n      if (mipmaps) {\n        this.generateMipmap(props);\n      }\n\n      this.setParameters(parameters);\n    });\n    return this;\n  }\n\n  subImage(_ref) {\n    let {\n      face,\n      data,\n      x = 0,\n      y = 0,\n      mipmapLevel = 0\n    } = _ref;\n    return this._subImage({\n      target: face,\n      data,\n      x,\n      y,\n      mipmapLevel\n    });\n  }\n\n  async setCubeMapImageData(_ref2) {\n    let {\n      width,\n      height,\n      pixels,\n      data,\n      border = 0,\n      format = 6408,\n      type = 5121\n    } = _ref2;\n    const {\n      gl\n    } = this;\n    const imageDataMap = pixels || data;\n    const resolvedFaces = await Promise.all(FACES.map(face => {\n      const facePixels = imageDataMap[face];\n      return Promise.all(Array.isArray(facePixels) ? facePixels : [facePixels]);\n    }));\n    this.bind();\n    FACES.forEach((face, index) => {\n      if (resolvedFaces[index].length > 1 && this.opts.mipmaps !== false) {\n        log.warn(\"\".concat(this.id, \" has mipmap and multiple LODs.\"))();\n      }\n\n      resolvedFaces[index].forEach((image, lodLevel) => {\n        if (width && height) {\n          gl.texImage2D(face, lodLevel, format, width, height, border, format, type, image);\n        } else {\n          gl.texImage2D(face, lodLevel, format, format, type, image);\n        }\n      });\n    });\n    this.unbind();\n  }\n\n  setImageDataForFace(options) {\n    const {\n      face,\n      width,\n      height,\n      pixels,\n      data,\n      border = 0,\n      format = 6408,\n      type = 5121\n    } = options;\n    const {\n      gl\n    } = this;\n    const imageData = pixels || data;\n    this.bind();\n\n    if (imageData instanceof Promise) {\n      imageData.then(resolvedImageData => this.setImageDataForFace(Object.assign({}, options, {\n        face,\n        data: resolvedImageData,\n        pixels: resolvedImageData\n      })));\n    } else if (this.width || this.height) {\n      gl.texImage2D(face, 0, format, width, height, border, format, type, imageData);\n    } else {\n      gl.texImage2D(face, 0, format, format, type, imageData);\n    }\n\n    return this;\n  }\n\n}\nTextureCube.FACES = FACES;","map":{"version":3,"mappings":"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","names":["log","assertWebGLContext","Texture","FACES","TextureCube","Symbol","toStringTag","constructor","gl","props","Object","assign","target","initialize","seal","mipmaps","parameters","opts","setCubeMapImageData","then","loaded","generateMipmap","setParameters","subImage","face","data","x","y","mipmapLevel","_ref","_subImage","width","height","pixels","border","format","type","_ref2","imageDataMap","resolvedFaces","Promise","all","map","facePixels","Array","isArray","bind","forEach","index","length","warn","id","image","lodLevel","texImage2D","unbind","setImageDataForFace","options","imageData","resolvedImageData"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@luma.gl\\webgl\\src\\classes\\texture-cube.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {log, assertWebGLContext} from '@luma.gl/gltools';\nimport Texture from './texture';\n\nconst FACES = [\n  GL.TEXTURE_CUBE_MAP_POSITIVE_X,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_X,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Y,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Z,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Z\n];\n\nexport default class TextureCube extends Texture {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'TextureCube';\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGLContext(gl);\n\n    super(gl, Object.assign({}, props, {target: GL.TEXTURE_CUBE_MAP}));\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  initialize(props = {}) {\n    const {mipmaps = true, parameters = {}} = props;\n\n    // Store props for accessors\n    this.opts = props;\n\n    // @ts-ignore\n    this.setCubeMapImageData(props).then(() => {\n      this.loaded = true;\n\n      // TODO - should genMipmap() be called on the cubemap or on the faces?\n      // TODO - without generateMipmap() cube textures do not work at all!!! Why?\n      if (mipmaps) {\n        this.generateMipmap(props);\n      }\n\n      this.setParameters(parameters);\n    });\n    return this;\n  }\n\n  subImage({face, data, x = 0, y = 0, mipmapLevel = 0}) {\n    // @ts-ignore TODO - is this a bug?\n    return this._subImage({target: face, data, x, y, mipmapLevel});\n  }\n\n  /* eslint-disable max-statements, max-len */\n  async setCubeMapImageData({\n    width,\n    height,\n    pixels,\n    data,\n    border = 0,\n    format = GL.RGBA,\n    type = GL.UNSIGNED_BYTE\n  }) {\n    const {gl} = this;\n    const imageDataMap = pixels || data;\n\n    // pixel data (imageDataMap) is an Object from Face to Image or Promise.\n    // For example:\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : Image-or-Promise,\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : Image-or-Promise,\n    // ... }\n    // To provide multiple level-of-details (LODs) this can be Face to Array\n    // of Image or Promise, like this\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // ... }\n\n    const resolvedFaces = await Promise.all(\n      FACES.map(face => {\n        const facePixels = imageDataMap[face];\n        return Promise.all(Array.isArray(facePixels) ? facePixels : [facePixels]);\n      })\n    );\n\n    this.bind();\n\n    FACES.forEach((face, index) => {\n      if (resolvedFaces[index].length > 1 && this.opts.mipmaps !== false) {\n        // If the user provides multiple LODs, then automatic mipmap\n        // generation generateMipmap() should be disabled to avoid overwritting them.\n        log.warn(`${this.id} has mipmap and multiple LODs.`)();\n      }\n      resolvedFaces[index].forEach((image, lodLevel) => {\n        // TODO: adjust width & height for LOD!\n        if (width && height) {\n          gl.texImage2D(face, lodLevel, format, width, height, border, format, type, image);\n        } else {\n          gl.texImage2D(face, lodLevel, format, format, type, image);\n        }\n      });\n    });\n\n    this.unbind();\n  }\n\n  // TODO: update this method to accept LODs\n  setImageDataForFace(options) {\n    const {\n      face,\n      width,\n      height,\n      pixels,\n      data,\n      border = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE\n      // generateMipmap = false // TODO\n    } = options;\n\n    const {gl} = this;\n\n    const imageData = pixels || data;\n\n    this.bind();\n    if (imageData instanceof Promise) {\n      imageData.then(resolvedImageData =>\n        this.setImageDataForFace(\n          Object.assign({}, options, {\n            face,\n            data: resolvedImageData,\n            pixels: resolvedImageData\n          })\n        )\n      );\n    } else if (this.width || this.height) {\n      gl.texImage2D(face, 0, format, width, height, border, format, type, imageData);\n    } else {\n      gl.texImage2D(face, 0, format, format, type, imageData);\n    }\n\n    return this;\n  }\n}\n\nTextureCube.FACES = FACES;\n"]},"metadata":{},"sourceType":"module"}