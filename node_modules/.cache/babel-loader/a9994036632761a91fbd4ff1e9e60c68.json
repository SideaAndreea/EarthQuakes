{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { assert } from '../env-utils/assert';\nexport default class WorkerJob {\n  constructor(jobName, workerThread) {\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"workerThread\", void 0);\n\n    _defineProperty(this, \"isRunning\", true);\n\n    _defineProperty(this, \"result\", void 0);\n\n    _defineProperty(this, \"_resolve\", () => {});\n\n    _defineProperty(this, \"_reject\", () => {});\n\n    this.name = jobName;\n    this.workerThread = workerThread;\n    this.result = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  postMessage(type, payload) {\n    this.workerThread.postMessage({\n      source: 'loaders.gl',\n      type,\n      payload\n    });\n  }\n\n  done(value) {\n    assert(this.isRunning);\n    this.isRunning = false;\n\n    this._resolve(value);\n  }\n\n  error(error) {\n    assert(this.isRunning);\n    this.isRunning = false;\n\n    this._reject(error);\n  }\n\n}","map":{"version":3,"mappings":";AAEA,SAAQA,MAAR,QAAqB,qBAArB;AAKA,eAAe,MAAMC,SAAN,CAAgB;EAU7BC,WAAW,CAACC,OAAD,EAAkBC,YAAlB,EAA8C;IAAAC;;IAAAA;;IAAAA,mCAPpC,IAOoC;;IAAAA;;IAAAA,kCAHhB,MAAM,CAGU;;IAAAA,iCAFf,MAAM,CAES;;IACvD,KAAKC,IAAL,GAAYH,OAAZ;IACA,KAAKC,YAAL,GAAoBA,YAApB;IACA,KAAKG,MAAL,GAAc,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MAC7C,KAAKC,QAAL,GAAgBF,OAAhB;MACA,KAAKG,OAAL,GAAeF,MAAf;IAFY,EAAd;EAID;;EAMDG,WAAW,CAACC,IAAD,EAA0BC,OAA1B,EAA+D;IACxE,KAAKX,YAAL,CAAkBS,WAAlB,CAA8B;MAC5BG,MAAM,EAAE,YADoB;MAE5BF,IAF4B;MAG5BC;IAH4B,CAA9B;EAKD;;EAKDE,IAAI,CAACC,KAAD,EAAmB;IACrBlB,MAAM,CAAC,KAAKmB,SAAN,CAANnB;IACA,KAAKmB,SAAL,GAAiB,KAAjB;;IACA,KAAKR,QAAL,CAAcO,KAAd;EACD;;EAKDE,KAAK,CAACA,KAAD,EAAqB;IACxBpB,MAAM,CAAC,KAAKmB,SAAN,CAANnB;IACA,KAAKmB,SAAL,GAAiB,KAAjB;;IACA,KAAKP,OAAL,CAAaQ,KAAb;EACD;;AA/C4B","names":["assert","WorkerJob","constructor","jobName","workerThread","_defineProperty","name","result","Promise","resolve","reject","_resolve","_reject","postMessage","type","payload","source","done","value","isRunning","error"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplica»õii\\earthquakes\\node_modules\\@loaders.gl\\worker-utils\\src\\lib\\worker-farm\\worker-job.ts"],"sourcesContent":["import type {WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport WorkerThread from './worker-thread';\nimport {assert} from '../env-utils/assert';\n\n/**\n * Represents one Job handled by a WorkerPool or WorkerFarm\n */\nexport default class WorkerJob {\n  readonly name: string;\n  readonly workerThread: WorkerThread;\n  isRunning: boolean = true;\n  /** Promise that resolves when Job is done */\n  readonly result: Promise<any>;\n\n  private _resolve: (value: any) => void = () => {};\n  private _reject: (reason?: any) => void = () => {};\n\n  constructor(jobName: string, workerThread: WorkerThread) {\n    this.name = jobName;\n    this.workerThread = workerThread;\n    this.result = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  /**\n   * Send a message to the job's worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   */\n  postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    this.workerThread.postMessage({\n      source: 'loaders.gl', // Lets worker ignore unrelated messages\n      type,\n      payload\n    });\n  }\n\n  /**\n   * Call to resolve the `result` Promise with the supplied value\n   */\n  done(value: any): void {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._resolve(value);\n  }\n\n  /**\n   * Call to reject the `result` Promise with the supplied error\n   */\n  error(error: Error): void {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._reject(error);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}