{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { Model, Geometry, hasFeatures, FEATURES } from '@luma.gl/core';\nimport PolygonTesselator from './polygon-tesselator';\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  getPolygon: {\n    type: 'accessor',\n    value: f => f.polygon\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: true\n};\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\nexport default class SolidPolygonLayer extends Layer {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  getShaders(type) {\n    return super.getShaders({\n      vs: type === 'top' ? vsTop : vsSide,\n      fs,\n      defines: {\n        RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n      },\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const {\n      gl,\n      viewport\n    } = this.context;\n    let {\n      coordinateSystem\n    } = this.props;\n\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        preproject: coordinateSystem === COORDINATE_SYSTEM.LNGLAT && viewport.projectFlat.bind(viewport),\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n    attributeManager.remove(['instancePickingColors']);\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        update: this.calculateIndices,\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: 5121,\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: 5121,\n        accessor: (object, _ref) => {\n          let {\n            index,\n            target: value\n          } = _ref;\n          return this.encodePickingColor(object && object.__source ? object.__source.index : index, value);\n        },\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {\n      index\n    } = info;\n    const {\n      data\n    } = this.props;\n\n    if (data[0] && data[0].__source) {\n      info.object = data.find(d => d.__source.index === index);\n    }\n\n    return info;\n  }\n\n  disablePickingIndex(objectIndex) {\n    const {\n      data\n    } = this.props;\n\n    if (data[0] && data[0].__source) {\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw(_ref2) {\n    let {\n      uniforms\n    } = _ref2;\n    const {\n      extruded,\n      filled,\n      wireframe,\n      elevationScale\n    } = this.props;\n    const {\n      topModel,\n      sideModel,\n      polygonTesselator\n    } = this.state;\n    const renderUniforms = { ...uniforms,\n      extruded: Boolean(extruded),\n      elevationScale\n    };\n\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n\n      if (wireframe) {\n        sideModel.setDrawMode(3);\n        sideModel.setUniforms({\n          isWireframe: true\n        }).draw();\n      }\n\n      if (filled) {\n        sideModel.setDrawMode(6);\n        sideModel.setUniforms({\n          isWireframe: false\n        }).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n    this.updateGeometry(updateParams);\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = updateParams;\n    const attributeManager = this.getAttributeManager();\n    const regenerateModels = changeFlags.extensionsChanged || props.filled !== oldProps.filled || props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      var _this$state$models;\n\n      (_this$state$models = this.state.models) === null || _this$state$models === void 0 ? void 0 : _this$state$models.forEach(model => model.delete());\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n\n  updateGeometry(_ref3) {\n    let {\n      props,\n      oldProps,\n      changeFlags\n    } = _ref3;\n    const geometryConfigChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n\n    if (geometryConfigChanged) {\n      const {\n        polygonTesselator\n      } = this.state;\n      const buffers = props.data.attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        resolution: this.context.viewport.resolution,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }\n\n  _getModels(gl) {\n    const {\n      id,\n      filled,\n      extruded\n    } = this.props;\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      const shaders = this.getShaders('top');\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n      topModel = new Model(gl, { ...shaders,\n        id: \"\".concat(id, \"-top\"),\n        drawMode: 4,\n        attributes: {\n          vertexPositions: new Float32Array([0, 1])\n        },\n        uniforms: {\n          isWireframe: false,\n          isSideVertex: false\n        },\n        vertexCount: 0,\n        isIndexed: true\n      });\n    }\n\n    if (extruded) {\n      sideModel = new Model(gl, { ...this.getShaders('side'),\n        id: \"\".concat(id, \"-side\"),\n        geometry: new Geometry({\n          drawMode: 1,\n          vertexCount: 4,\n          attributes: {\n            vertexPositions: {\n              size: 2,\n              value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n            }\n          }\n        }),\n        instanceCount: 0,\n        isInstanced: 1\n      });\n      sideModel.userData.excludeAttributes = {\n        indices: true\n      };\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  calculateIndices(attribute) {\n    const {\n      polygonTesselator\n    } = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  calculatePositions(attribute) {\n    const {\n      polygonTesselator\n    } = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n\n  calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n\n}\n\n_defineProperty(SolidPolygonLayer, \"defaultProps\", defaultProps);\n\n_defineProperty(SolidPolygonLayer, \"layerName\", 'SolidPolygonLayer');","map":{"version":3,"mappings":"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","names":["Layer","project32","gouraudLighting","picking","COORDINATE_SYSTEM","Model","Geometry","hasFeatures","FEATURES","PolygonTesselator","vsTop","vsSide","fs","DEFAULT_COLOR","defaultProps","filled","extruded","wireframe","_normalize","_windingOrder","elevationScale","type","min","value","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","material","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","SolidPolygonLayer","constructor","_defineProperty","getShaders","vs","defines","RING_WINDING_ORDER_CW","props","modules","wrapLongitude","initializeState","gl","viewport","context","coordinateSystem","isGeospatial","DEFAULT","LNGLAT","setState","numInstances","polygonTesselator","preproject","projectFlat","bind","fp64","use64bitPositions","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","remove","add","indices","size","isIndexed","update","calculateIndices","positions","transition","accessor","calculatePositions","shaderAttributes","vertexOffset","divisor","instancePositions","nextPositions","vertexValid","calculateVertexValid","elevations","instanceElevations","fillColors","colorFormat","normalized","defaultValue","instanceFillColors","lineColors","instanceLineColors","pickingColors","object","index","target","encodePickingColor","__source","instancePickingColors","getPickingInfo","params","info","data","find","d","disablePickingIndex","objectIndex","i","_disablePickingIndex","draw","uniforms","topModel","sideModel","state","renderUniforms","Boolean","setInstanceCount","instanceCount","setUniforms","setDrawMode","isWireframe","setVertexCount","vertexCount","updateState","updateParams","updateGeometry","oldProps","changeFlags","regenerateModels","extensionsChanged","models","forEach","model","delete","_getModels","invalidateAll","geometryConfigChanged","dataChanged","updateTriggersChanged","all","buffers","attributes","normalize","geometryBuffer","getGeometry","positionFormat","resolution","startIndices","vertexStarts","id","shaders","NON_INSTANCED_MODEL","drawMode","vertexPositions","Float32Array","isSideVertex","geometry","isInstanced","userData","excludeAttributes","filter","attribute","indexStarts","get"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@deck.gl\\layers\\src\\solid-polygon-layer\\solid-polygon-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, hasFeatures, FEATURES} from '@luma.gl/core';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  Color,\n  Material,\n  Accessor,\n  AccessorFunction,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {PolygonGeometry} from './polygon';\n\ntype _SolidPolygonLayerProps<DataT> = {\n  /** Whether to fill the polygons\n   * @default true\n   */\n  filled?: boolean;\n  /** Whether to extrude the polygons\n   * @default false\n   */\n  extruded?: boolean;\n  /** Whether to generate a line wireframe of the polygon.\n   * @default false\n   */\n  wireframe?: boolean;\n  /**\n   * (Experimental) If `false`, will skip normalizing the coordinates returned by `getPolygon`.\n   * @default true\n   */\n  _normalize?: boolean;\n  /**\n   * (Experimental) This prop is only effective with `_normalize: false`.\n   * It specifies the winding order of rings in the polygon data, one of 'CW' (clockwise) and 'CCW' (counter-clockwise)\n   */\n  _windingOrder?: 'CW' | 'CCW';\n\n  /** Elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /** Polygon geometry accessor. */\n  getPolygon?: AccessorFunction<DataT, PolygonGeometry>;\n  /** Extrusion height accessor.\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n  /** Fill color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n  /** Stroke color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\n/** Render filled and/or extruded polygons. */\nexport type SolidPolygonLayerProps<DataT = any> = _SolidPolygonLayerProps<DataT> &\n  LayerProps<DataT>;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<SolidPolygonLayerProps> = {\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  getElevation: {type: 'accessor', value: 1000},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  material: true\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_SolidPolygonLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'SolidPolygonLayer';\n\n  state!: {\n    topModel?: Model;\n    sideModel?: Model;\n    models?: Model[];\n    numInstances: number;\n    polygonTesselator: PolygonTesselator;\n  };\n\n  getShaders(type) {\n    return super.getShaders({\n      vs: type === 'top' ? vsTop : vsSide,\n      fs,\n      defines: {\n        RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n      },\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  initializeState() {\n    const {gl, viewport} = this.context;\n    let {coordinateSystem} = this.props;\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        // Lnglat coordinates are usually projected non-linearly, which affects tesselation results\n        // Provide a preproject function if the coordinates are in lnglat\n        preproject:\n          coordinateSystem === COORDINATE_SYSTEM.LNGLAT && viewport.projectFlat.bind(viewport),\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager()!;\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateIndices,\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: GL.UNSIGNED_BYTE,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value),\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): PickingInfo {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = (data as any[]).find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  disablePickingIndex(objectIndex: number) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < (data as any[]).length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel, polygonTesselator} = this.state;\n\n    const renderUniforms = {\n      ...uniforms,\n      extruded: Boolean(extruded),\n      elevationScale\n    };\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.setUniforms({isWireframe: true}).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.setUniforms({isWireframe: false}).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams: UpdateParameters<this>) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps, changeFlags} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      changeFlags.extensionsChanged ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      this.state.models?.forEach(model => model.delete());\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager!.invalidateAll();\n    }\n  }\n\n  protected updateGeometry({props, oldProps, changeFlags}: UpdateParameters<this>) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      const buffers = (props.data as any).attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        this.getAttributeManager()!.invalidateAll();\n      }\n    }\n  }\n\n  protected _getModels(gl: WebGLRenderingContext): Model {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      const shaders = this.getShaders('top');\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n\n      topModel = new Model(gl, {\n        ...shaders,\n        id: `${id}-top`,\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          vertexPositions: new Float32Array([0, 1])\n        },\n        uniforms: {\n          isWireframe: false,\n          isSideVertex: false\n        },\n        vertexCount: 0,\n        isIndexed: true\n      });\n    }\n    if (extruded) {\n      sideModel = new Model(gl, {\n        ...this.getShaders('side'),\n        id: `${id}-side`,\n        geometry: new Geometry({\n          drawMode: GL.LINES,\n          vertexCount: 4,\n          attributes: {\n            // top right - top left - bootom left - bottom right\n            vertexPositions: {\n              size: 2,\n              value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n            }\n          }\n        }),\n        instanceCount: 0,\n        isInstanced: 1\n      });\n\n      sideModel.userData.excludeAttributes = {indices: true};\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  protected calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  protected calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n\n  protected calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}