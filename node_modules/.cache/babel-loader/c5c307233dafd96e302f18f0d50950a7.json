{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nexport default class I3SPendingTilesRegister {\n  constructor() {\n    _defineProperty(this, \"frameNumberMap\", new Map());\n  }\n\n  register(viewportId, frameNumber) {\n    const viewportMap = this.frameNumberMap.get(viewportId) || new Map();\n    const oldCount = viewportMap.get(frameNumber) || 0;\n    viewportMap.set(frameNumber, oldCount + 1);\n    this.frameNumberMap.set(viewportId, viewportMap);\n  }\n\n  deregister(viewportId, frameNumber) {\n    const viewportMap = this.frameNumberMap.get(viewportId);\n\n    if (!viewportMap) {\n      return;\n    }\n\n    const oldCount = viewportMap.get(frameNumber) || 1;\n    viewportMap.set(frameNumber, oldCount - 1);\n  }\n\n  isZero(viewportId, frameNumber) {\n    var _this$frameNumberMap$;\n\n    const count = ((_this$frameNumberMap$ = this.frameNumberMap.get(viewportId)) === null || _this$frameNumberMap$ === void 0 ? void 0 : _this$frameNumberMap$.get(frameNumber)) || 0;\n    return count === 0;\n  }\n\n}","map":{"version":3,"mappings":";AAIA,eAAe,MAAMA,uBAAN,CAA8B;EAAAC;IAAAC,wCACgB,IAAIC,GAAJ,EADhB;EAAA;;EAQ3CC,QAAQ,CAACC,UAAD,EAAqBC,WAArB,EAA0C;IAChD,MAAMC,WAAW,GAAG,KAAKC,cAAL,CAAoBC,GAApB,CAAwBJ,UAAxB,KAAuC,IAAIF,GAAJ,EAA3D;IACA,MAAMO,QAAQ,GAAGH,WAAW,CAACE,GAAZF,CAAgBD,WAAhBC,KAAgC,CAAjD;IACAA,WAAW,CAACI,GAAZJ,CAAgBD,WAAhBC,EAA6BG,QAAQ,GAAG,CAAxCH;IACA,KAAKC,cAAL,CAAoBG,GAApB,CAAwBN,UAAxB,EAAoCE,WAApC;EACD;;EAODK,UAAU,CAACP,UAAD,EAAqBC,WAArB,EAA0C;IAClD,MAAMC,WAAW,GAAG,KAAKC,cAAL,CAAoBC,GAApB,CAAwBJ,UAAxB,CAApB;;IACA,IAAI,CAACE,WAAL,EAAkB;MAChB;IACD;;IACD,MAAMG,QAAQ,GAAGH,WAAW,CAACE,GAAZF,CAAgBD,WAAhBC,KAAgC,CAAjD;IACAA,WAAW,CAACI,GAAZJ,CAAgBD,WAAhBC,EAA6BG,QAAQ,GAAG,CAAxCH;EACD;;EAQDM,MAAM,CAACR,UAAD,EAAqBC,WAArB,EAA0C;IAAA;;IAC9C,MAAMQ,KAAK,GAAG,+BAAKN,cAAL,CAAoBC,GAApB,CAAwBJ,UAAxB,iFAAqCI,GAArC,CAAyCH,WAAzC,MAAyD,CAAvE;IACA,OAAOQ,KAAK,KAAK,CAAjB;EACD;;AAtC0C","names":["I3SPendingTilesRegister","constructor","_defineProperty","Map","register","viewportId","frameNumber","viewportMap","frameNumberMap","get","oldCount","set","deregister","isZero","count"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@loaders.gl\\tiles\\src\\tileset\\traversers\\i3s-pending-tiles-register.ts"],"sourcesContent":["/**\n * Counter to register pending tile headers for the particular frameNumber\n * Until all tiles are loaded we won't call `onTraversalEnd` callback\n */\nexport default class I3SPendingTilesRegister {\n  private frameNumberMap: Map<string, Map<number, number>> = new Map();\n\n  /**\n   * Register a new pending tile header for the particular frameNumber\n   * @param viewportId\n   * @param frameNumber\n   */\n  register(viewportId: string, frameNumber: number) {\n    const viewportMap = this.frameNumberMap.get(viewportId) || new Map();\n    const oldCount = viewportMap.get(frameNumber) || 0;\n    viewportMap.set(frameNumber, oldCount + 1);\n    this.frameNumberMap.set(viewportId, viewportMap);\n  }\n\n  /**\n   * Deregister a pending tile header for the particular frameNumber\n   * @param viewportId\n   * @param frameNumber\n   */\n  deregister(viewportId: string, frameNumber: number) {\n    const viewportMap = this.frameNumberMap.get(viewportId);\n    if (!viewportMap) {\n      return;\n    }\n    const oldCount = viewportMap.get(frameNumber) || 1;\n    viewportMap.set(frameNumber, oldCount - 1);\n  }\n\n  /**\n   * Check is there are no pending tile headers registered for the particular frameNumber\n   * @param viewportId\n   * @param frameNumber\n   * @returns\n   */\n  isZero(viewportId: string, frameNumber: number) {\n    const count = this.frameNumberMap.get(viewportId)?.get(frameNumber) || 0;\n    return count === 0;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}