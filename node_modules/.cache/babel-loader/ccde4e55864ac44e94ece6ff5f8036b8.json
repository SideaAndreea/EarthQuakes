{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  getSourcePosition: {\n    type: 'accessor',\n    value: x => x.sourcePosition\n  },\n  getTargetPosition: {\n    type: 'accessor',\n    value: x => x.targetPosition\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  widthUnits: 'pixels',\n  widthScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  widthMinPixels: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    value: Number.MAX_SAFE_INTEGER,\n    min: 0\n  }\n};\nexport default class LineLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking]\n    });\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n\n    if (params.changeFlags.extensionsChanged) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw(_ref) {\n    let {\n      uniforms\n    } = _ref;\n    const {\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      wrapLongitude\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      widthUnits: UNIT[widthUnits],\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      useShortestPath: wrapLongitude ? 1 : 0\n    }).draw();\n\n    if (wrapLongitude) {\n      this.state.model.setUniforms({\n        useShortestPath: -1\n      }).draw();\n    }\n  }\n\n  _getModel(gl) {\n    const positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 5,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n}\n\n_defineProperty(LineLayer, \"layerName\", 'LineLayer');\n\n_defineProperty(LineLayer, \"defaultProps\", defaultProps);","map":{"version":3,"mappings":"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","names":["Layer","project32","picking","UNIT","Model","Geometry","vs","fs","DEFAULT_COLOR","defaultProps","getSourcePosition","type","value","x","sourcePosition","getTargetPosition","targetPosition","getColor","getWidth","widthUnits","widthScale","min","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","LineLayer","getShaders","modules","wrapLongitude","initializeState","attributeManager","getAttributeManager","addInstanced","instanceSourcePositions","size","fp64","use64bitPositions","transition","accessor","instanceTargetPositions","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceWidths","updateState","params","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","draw","uniforms","setUniforms","useShortestPath","positions","id","geometry","drawMode","attributes","Float32Array","isInstanced"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplica»õii\\earthquakes\\node_modules\\@deck.gl\\layers\\src\\line-layer\\line-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  picking,\n  UNIT,\n  LayerProps,\n  Unit,\n  Position,\n  Accessor,\n  Color,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<LineLayerProps> = {\n  getSourcePosition: {type: 'accessor', value: x => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: x => x.targetPosition},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\n/** All properties supported by LineLayer. */\nexport type LineLayerProps<DataT = any> = _LineLayerProps<DataT> & LayerProps<DataT>;\n\n/** Properties added by LineLayer. */\ntype _LineLayerProps<DataT> = {\n  /**\n   * The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'pixels'\n   */\n  widthUnits?: Unit;\n\n  /**\n   * The scaling multiplier for the width of each line.\n   * @default 1\n   */\n  widthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   * @default 0\n   */\n  widthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n\n  /**\n   * Source position of each object.\n   * @default object => object.sourcePosition\n   */\n  getSourcePosition?: Accessor<DataT, Position>;\n\n  /**\n   * Target position of each object.\n   * @default object => object.targetPosition\n   */\n  getTargetPosition?: Accessor<DataT, Position>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n\n  /**\n   * Width of each object\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number>;\n};\n\n/**\n * A layer that renders straight lines joining pairs of source and target coordinates.\n */\nexport default class LineLayer<DataT = any, ExtraProps = {}> extends Layer<\n  ExtraProps & Required<_LineLayerProps<DataT>>\n> {\n  static layerName = 'LineLayer';\n  static defaultProps = defaultProps;\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  // This layer has its own wrapLongitude logic\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(params: UpdateParameters<this>): void {\n    super.updateState(params);\n\n    if (params.changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}): void {\n    const {widthUnits, widthScale, widthMinPixels, widthMaxPixels, wrapLongitude} = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        widthMinPixels,\n        widthMaxPixels,\n        useShortestPath: wrapLongitude ? 1 : 0\n      })\n      .draw();\n\n    if (wrapLongitude) {\n      // Render a second copy for the clipped lines at the 180th meridian\n      this.state.model\n        .setUniforms({\n          useShortestPath: -1\n        })\n        .draw();\n    }\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    const positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_STRIP,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}