{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Desktop\\\\Internship\\\\react-internship-22\\\\Exercices\\\\earthquakes\\\\src\\\\components\\\\MapComponent\\\\MapComponent.jsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useState } from \"react\";\nimport Map, { Source, Layer, Popup, NavigationControl, FullscreenControl, ScaleControl } from \"react-map-gl\";\nimport { getMapBounds } from \"./utils\";\nimport { clusterCountLayer, unclusteredPointLayer, clusterLayer } from \"./Layers\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"./MapComponent.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MapComponent = _ref => {\n  _s();\n\n  let {\n    earthquakes,\n    width,\n    height = 400\n  } = _ref;\n  const mapRef = useRef();\n  const [viewport, setViewport] = useState({});\n  const [selectedEarthquake, setSelectedEarthquake] = useState(null); // focusing the map on the earthquakes\n\n  useEffect(() => {\n    const points = [];\n    earthquakes.features.forEach(feature => {\n      points.push({\n        longitude: feature.geometry.coordinates[0],\n        latitude: feature.geometry.coordinates[1]\n      });\n    });\n    const bounds = getMapBounds(points, {\n      capZoom: 16\n    });\n    setViewport(bounds);\n  }, [earthquakes, mapRef]); // selecting the earthquake or the cluster to zoom in when clicking on it\n\n  const onClick = event => {\n    const feature = event.features[0];\n\n    if (!feature) {\n      setSelectedEarthquake(null);\n      return;\n    }\n\n    const clusterId = feature.properties.cluster_id;\n    const mapboxSource = mapRef.current.getSource(\"earthquakes\"); // if the feature is a cluster, we zoom in on the cluster\n\n    clusterId && mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n      if (err) {\n        return;\n      }\n\n      mapRef.current.easeTo({\n        center: feature === null || feature === void 0 ? void 0 : feature.geometry.coordinates,\n        zoom,\n        duration: 500\n      });\n    }); // if the feature is a single point (earthquake) we save it in the state\n\n    if (feature.properties && feature.properties.type === \"earthquake\") setSelectedEarthquake({ ...feature.properties,\n      lng: feature.geometry.coordinates[0],\n      lat: feature.geometry.coordinates[1]\n    });\n  };\n\n  console.log(\"selectedEarthquake\", selectedEarthquake);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Map, {\n      ref: mapRef,\n      style: {\n        height,\n        width\n      },\n      ...viewport,\n      onMove: evt => setViewport(evt.viewState),\n      dragPan: true,\n      mapStyle: \"mapbox://styles/mapbox/dark-v10\",\n      interactiveLayerIds: [clusterLayer.id, unclusteredPointLayer.id],\n      mapboxAccessToken: process.env.REACT_APP_MAPBOX_API_KEY,\n      onViewportChange: setViewport,\n      onClick: onClick,\n      children: [/*#__PURE__*/_jsxDEV(FullscreenControl, {\n        position: \"top-right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NavigationControl, {\n        position: \"top-right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ScaleControl, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Source, {\n        id: \"earthquakes\",\n        type: \"geojson\",\n        data: earthquakes,\n        cluster: true,\n        clusterMaxZoom: 14,\n        clusterRadius: 50,\n        children: [/*#__PURE__*/_jsxDEV(Layer, { ...clusterLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Layer, { ...clusterCountLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Layer, { ...unclusteredPointLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), selectedEarthquake && /*#__PURE__*/_jsxDEV(Popup, {\n        anchor: \"bottom\",\n        longitude: Number(selectedEarthquake.lng),\n        latitude: Number(selectedEarthquake.lat),\n        onClose: () => setSelectedEarthquake(null),\n        maxWidth: 500,\n        className: \"earthquake-popup\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"label-value\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"label\",\n              children: \"Title:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"value\",\n              children: [\" \", selectedEarthquake.title]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"label-value\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"label\",\n              children: \"Occurred at:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"value\",\n              children: new Date(selectedEarthquake.time).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"label-value\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"label\",\n              children: \"Magnitude:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"value\",\n              children: selectedEarthquake.mag\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MapComponent, \"LpjFiN6H00O7cEuy4LWqltpYrso=\");\n\n_c = MapComponent;\nexport default MapComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["useRef","useEffect","useState","Map","Source","Layer","Popup","NavigationControl","FullscreenControl","ScaleControl","getMapBounds","clusterCountLayer","unclusteredPointLayer","clusterLayer","MapComponent","earthquakes","width","height","mapRef","viewport","setViewport","selectedEarthquake","setSelectedEarthquake","points","features","forEach","feature","push","longitude","geometry","coordinates","latitude","bounds","capZoom","onClick","event","clusterId","properties","cluster_id","mapboxSource","current","getSource","getClusterExpansionZoom","err","zoom","easeTo","center","duration","type","lng","lat","console","log","evt","viewState","id","process","env","REACT_APP_MAPBOX_API_KEY","Number","title","Date","time","toLocaleString","mag"],"sources":["C:/Users/user/OneDrive/Desktop/Internship/react-internship-22/Exercices/earthquakes/src/components/MapComponent/MapComponent.jsx"],"sourcesContent":["import { useRef, useEffect, useState } from \"react\";\r\nimport Map, {\r\n  Source,\r\n  Layer,\r\n  Popup,\r\n  NavigationControl,\r\n  FullscreenControl,\r\n  ScaleControl,\r\n} from \"react-map-gl\";\r\n\r\nimport { getMapBounds } from \"./utils\";\r\nimport {\r\n  clusterCountLayer,\r\n  unclusteredPointLayer,\r\n  clusterLayer,\r\n} from \"./Layers\";\r\n\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport \"./MapComponent.css\";\r\n\r\nconst MapComponent = ({ earthquakes, width, height = 400 }) => {\r\n  const mapRef = useRef();\r\n  const [viewport, setViewport] = useState({});\r\n  const [selectedEarthquake, setSelectedEarthquake] = useState(null);\r\n\r\n  // focusing the map on the earthquakes\r\n  useEffect(() => {\r\n    const points = [];\r\n    earthquakes.features.forEach((feature) => {\r\n      points.push({\r\n        longitude: feature.geometry.coordinates[0],\r\n        latitude: feature.geometry.coordinates[1],\r\n      });\r\n    });\r\n    const bounds = getMapBounds(points, {\r\n      capZoom: 16,\r\n    });\r\n    setViewport(bounds);\r\n  }, [earthquakes, mapRef]);\r\n\r\n  // selecting the earthquake or the cluster to zoom in when clicking on it\r\n  const onClick = (event) => {\r\n    const feature = event.features[0];\r\n\r\n    if (!feature) {\r\n      setSelectedEarthquake(null);\r\n      return;\r\n    }\r\n\r\n    const clusterId = feature.properties.cluster_id;\r\n    const mapboxSource = mapRef.current.getSource(\"earthquakes\");\r\n\r\n    // if the feature is a cluster, we zoom in on the cluster\r\n    clusterId &&\r\n      mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\r\n        if (err) {\r\n          return;\r\n        }\r\n        mapRef.current.easeTo({\r\n          center: feature?.geometry.coordinates,\r\n          zoom,\r\n          duration: 500,\r\n        });\r\n      });\r\n\r\n    // if the feature is a single point (earthquake) we save it in the state\r\n    if (feature.properties && feature.properties.type === \"earthquake\")\r\n      setSelectedEarthquake({\r\n        ...feature.properties,\r\n        lng: feature.geometry.coordinates[0],\r\n        lat: feature.geometry.coordinates[1],\r\n      });\r\n  };\r\n\r\n  console.log(\"selectedEarthquake\", selectedEarthquake);\r\n\r\n  return (\r\n    <div>\r\n      <Map\r\n        ref={mapRef}\r\n        style={{ height, width }}\r\n        {...viewport}\r\n        onMove={(evt) => setViewport(evt.viewState)}\r\n        dragPan\r\n        mapStyle=\"mapbox://styles/mapbox/dark-v10\"\r\n        interactiveLayerIds={[clusterLayer.id, unclusteredPointLayer.id]}\r\n        mapboxAccessToken={process.env.REACT_APP_MAPBOX_API_KEY}\r\n        onViewportChange={setViewport}\r\n        onClick={onClick}\r\n      >\r\n        <FullscreenControl position=\"top-right\" />\r\n        <NavigationControl position=\"top-right\" />\r\n        <ScaleControl />\r\n\r\n        <Source\r\n          id=\"earthquakes\"\r\n          type=\"geojson\"\r\n          data={earthquakes}\r\n          cluster={true}\r\n          clusterMaxZoom={14}\r\n          clusterRadius={50}\r\n        >\r\n          <Layer {...clusterLayer} />\r\n          <Layer {...clusterCountLayer} />\r\n          <Layer {...unclusteredPointLayer} />\r\n        </Source>\r\n\r\n        {selectedEarthquake && (\r\n          <Popup\r\n            anchor=\"bottom\"\r\n            longitude={Number(selectedEarthquake.lng)}\r\n            latitude={Number(selectedEarthquake.lat)}\r\n            onClose={() => setSelectedEarthquake(null)}\r\n            maxWidth={500}\r\n            className=\"earthquake-popup\"\r\n          >\r\n            <div>\r\n              <div className=\"label-value\">\r\n                <div className=\"label\">Title:</div>\r\n                <div className=\"value\"> {selectedEarthquake.title}</div>\r\n              </div>\r\n              <div className=\"label-value\">\r\n                <div className=\"label\">Occurred at:</div>\r\n                <div className=\"value\">\r\n                  {new Date(selectedEarthquake.time).toLocaleString()}\r\n                </div>\r\n              </div>\r\n              <div className=\"label-value\">\r\n                <div className=\"label\">Magnitude:</div>\r\n                <div className=\"value\">{selectedEarthquake.mag}</div>\r\n              </div>\r\n            </div>\r\n          </Popup>\r\n        )}\r\n      </Map>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module"}