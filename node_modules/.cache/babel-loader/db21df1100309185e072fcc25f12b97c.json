{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport TransitionManager from './transition-manager';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nconst DEFAULT_INERTIA = 300;\n\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\nconst pinchEventWorkaround = {};\nexport default class Controller {\n  constructor(opts) {\n    _defineProperty(this, \"props\", void 0);\n\n    _defineProperty(this, \"state\", {});\n\n    _defineProperty(this, \"transitionManager\", void 0);\n\n    _defineProperty(this, \"eventManager\", void 0);\n\n    _defineProperty(this, \"onViewStateChange\", void 0);\n\n    _defineProperty(this, \"onStateChange\", void 0);\n\n    _defineProperty(this, \"makeViewport\", void 0);\n\n    _defineProperty(this, \"_controllerState\", void 0);\n\n    _defineProperty(this, \"_events\", {});\n\n    _defineProperty(this, \"_interactionState\", {\n      isDragging: false\n    });\n\n    _defineProperty(this, \"_customEvents\", []);\n\n    _defineProperty(this, \"_eventStartBlocked\", null);\n\n    _defineProperty(this, \"_panMove\", false);\n\n    _defineProperty(this, \"invertPan\", false);\n\n    _defineProperty(this, \"dragMode\", 'rotate');\n\n    _defineProperty(this, \"inertia\", 0);\n\n    _defineProperty(this, \"scrollZoom\", true);\n\n    _defineProperty(this, \"dragPan\", true);\n\n    _defineProperty(this, \"dragRotate\", true);\n\n    _defineProperty(this, \"doubleClickZoom\", true);\n\n    _defineProperty(this, \"touchZoom\", true);\n\n    _defineProperty(this, \"touchRotate\", false);\n\n    _defineProperty(this, \"keyboard\", true);\n\n    this.transitionManager = new TransitionManager({ ...opts,\n      getControllerState: props => new this.ControllerState(props),\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    });\n    this.handleEvent = this.handleEvent.bind(this);\n    this.eventManager = opts.eventManager;\n\n    this.onViewStateChange = opts.onViewStateChange || (() => {});\n\n    this.onStateChange = opts.onStateChange || (() => {});\n\n    this.makeViewport = opts.makeViewport;\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n\n    if (this.props) {\n      this.setProps(this.props);\n    }\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        var _this$eventManager;\n\n        (_this$eventManager = this.eventManager) === null || _this$eventManager === void 0 ? void 0 : _this$eventManager.off(eventName, this.handleEvent);\n      }\n    }\n\n    this.transitionManager.finalize();\n  }\n\n  handleEvent(event) {\n    this._controllerState = undefined;\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n\n      case 'panmove':\n        return this._onPan(event);\n\n      case 'panend':\n        return this._onPanEnd(event);\n\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n\n      case 'pinchmove':\n        return this._onPinch(event);\n\n      case 'pinchend':\n        return this._onPinchEnd(event);\n\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n\n      case 'tripanmove':\n        return this._onTriplePan(event);\n\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n\n      case 'doubletap':\n        return this._onDoubleTap(event);\n\n      case 'wheel':\n        return this._onWheel(event);\n\n      case 'keydown':\n        return this._onKeyDown(event);\n\n      default:\n        return false;\n    }\n  }\n\n  get controllerState() {\n    this._controllerState = this._controllerState || new this.ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.props,\n      ...this.state\n    });\n    return this._controllerState;\n  }\n\n  getCenter(event) {\n    const {\n      x,\n      y\n    } = this.props;\n    const {\n      offsetCenter\n    } = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos, event) {\n    const {\n      width,\n      height\n    } = this.props;\n\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n\n    if (inside && event) {\n      event.stopPropagation();\n    }\n\n    return inside;\n  }\n\n  isFunctionKeyPressed(event) {\n    const {\n      srcEvent\n    } = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._interactionState.isDragging || false;\n  }\n\n  blockEvents(timeout) {\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  setProps(props) {\n    if (props.dragMode) {\n      this.dragMode = props.dragMode;\n    }\n\n    this.props = props;\n\n    if (!('transitionInterpolator' in props)) {\n      props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n    }\n\n    this.transitionManager.processViewStateChange(props);\n    const {\n      inertia\n    } = props;\n    this.inertia = Number.isFinite(inertia) ? inertia : inertia === true ? DEFAULT_INERTIA : 0;\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  updateViewport(newControllerState) {\n    let extraProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let interactionState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const viewState = { ...newControllerState.getViewportProps(),\n      ...extraProps\n    };\n    const changed = this.controllerState !== newControllerState;\n    this.state = newControllerState.getState();\n\n    this._setInteractionState(interactionState);\n\n    if (changed) {\n      const oldViewState = this.controllerState && this.controllerState.getViewportProps();\n\n      if (this.onViewStateChange) {\n        this.onViewStateChange({\n          viewState,\n          interactionState: this._interactionState,\n          oldViewState\n        });\n      }\n    }\n  }\n\n  _onTransition(params) {\n    this.onViewStateChange({ ...params,\n      interactionState: this._interactionState\n    });\n  }\n\n  _setInteractionState(newStates) {\n    Object.assign(this._interactionState, newStates);\n    this.onStateChange(this._interactionState);\n  }\n\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton || false;\n\n    if (this.invertPan || this.dragMode === 'pan') {\n      alternateMode = !alternateMode;\n    }\n\n    const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n      pos\n    });\n    this._panMove = alternateMode;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true\n    });\n    return true;\n  }\n\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  _onPanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n  }\n\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({\n      pos\n    });\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  _onPanMoveEnd(event) {\n    const {\n      inertia\n    } = this;\n\n    if (this.dragPan && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n      const newControllerState = this.controllerState.pan({\n        pos: endPos\n      }).panEnd();\n      this.updateViewport(newControllerState, { ...this._getTransitionProps(),\n        transitionDuration: inertia,\n        transitionEasing: INERTIA_EASING\n      }, {\n        isDragging: false,\n        isPanning: true\n      });\n    } else {\n      const newControllerState = this.controllerState.panEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n    }\n\n    return true;\n  }\n\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.rotate({\n      pos\n    });\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onPanRotateEnd(event) {\n    const {\n      inertia\n    } = this;\n\n    if (this.dragRotate && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n      const newControllerState = this.controllerState.rotate({\n        pos: endPos\n      }).rotateEnd();\n      this.updateViewport(newControllerState, { ...this._getTransitionProps(),\n        transitionDuration: inertia,\n        transitionEasing: INERTIA_EASING\n      }, {\n        isDragging: false,\n        isRotating: true\n      });\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n\n    return true;\n  }\n\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    event.srcEvent.preventDefault();\n    const pos = this.getCenter(event);\n\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const {\n      speed = 0.01,\n      smooth = false\n    } = this.scrollZoom === true ? {} : this.scrollZoom;\n    const {\n      delta\n    } = event;\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({\n      pos,\n      scale\n    });\n    this.updateViewport(newControllerState, { ...this._getTransitionProps({\n        around: pos\n      }),\n      transitionDuration: smooth ? 250 : 1\n    }, {\n      isZooming: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  _onTriplePanStart(event) {\n    const pos = this.getCenter(event);\n\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.rotateStart({\n      pos\n    });\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true\n    });\n    return true;\n  }\n\n  _onTriplePan(event) {\n    if (!this.touchRotate) {\n      return false;\n    }\n\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n    const newControllerState = this.controllerState.rotate({\n      pos\n    });\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onTriplePanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const {\n      inertia\n    } = this;\n\n    if (this.touchRotate && inertia && event.velocityY) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0], pos[1] += event.velocityY * inertia / 2];\n      const newControllerState = this.controllerState.rotate({\n        pos: endPos\n      });\n      this.updateViewport(newControllerState, { ...this._getTransitionProps(),\n        transitionDuration: inertia,\n        transitionEasing: INERTIA_EASING\n      }, {\n        isDragging: false,\n        isRotating: true\n      });\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n\n    return true;\n  }\n\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({\n      pos\n    }).rotateStart({\n      pos\n    });\n    pinchEventWorkaround._startPinchRotation = event.rotation;\n    pinchEventWorkaround._lastPinchEvent = event;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true\n    });\n    return true;\n  }\n\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n\n    if (this.touchZoom) {\n      const {\n        scale\n      } = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({\n        pos,\n        scale\n      });\n    }\n\n    if (this.touchRotate) {\n      const {\n        rotation\n      } = event;\n      newControllerState = newControllerState.rotate({\n        deltaAngleX: pinchEventWorkaround._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    pinchEventWorkaround._lastPinchEvent = event;\n    return true;\n  }\n\n  _onPinchEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const {\n      inertia\n    } = this;\n    const {\n      _lastPinchEvent\n    } = pinchEventWorkaround;\n\n    if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n      const pos = this.getCenter(event);\n      let newControllerState = this.controllerState.rotateEnd();\n      const z = Math.log2(event.scale);\n\n      const velocityZ = (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n\n      const endScale = Math.pow(2, z + velocityZ * inertia / 2);\n      newControllerState = newControllerState.zoom({\n        pos,\n        scale: endScale\n      }).zoomEnd();\n      this.updateViewport(newControllerState, { ...this._getTransitionProps({\n          around: pos\n        }),\n        transitionDuration: inertia,\n        transitionEasing: INERTIA_EASING\n      }, {\n        isDragging: false,\n        isPanning: this.touchZoom,\n        isZooming: this.touchZoom,\n        isRotating: false\n      });\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n    }\n\n    pinchEventWorkaround._startPinchRotation = null;\n    pinchEventWorkaround._lastPinchEvent = null;\n    return true;\n  }\n\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n    const newControllerState = this.controllerState.zoom({\n      pos,\n      scale: isZoomOut ? 0.5 : 2\n    });\n    this.updateViewport(newControllerState, this._getTransitionProps({\n      around: pos\n    }), {\n      isZooming: true,\n      isPanning: true\n    });\n    this.blockEvents(100);\n    return true;\n  }\n\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {\n      zoomSpeed,\n      moveSpeed,\n      rotateSpeedX,\n      rotateSpeedY\n    } = this.keyboard === true ? {} : this.keyboard;\n    const {\n      controllerState\n    } = this;\n    let newControllerState;\n    const interactionState = {};\n\n    switch (event.srcEvent.code) {\n      case 'Minus':\n        newControllerState = funcKey ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed) : controllerState.zoomOut(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n\n      case 'Equal':\n        newControllerState = funcKey ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed) : controllerState.zoomIn(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n\n      case 'ArrowLeft':\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft(moveSpeed);\n          interactionState.isPanning = true;\n        }\n\n        break;\n\n      case 'ArrowRight':\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight(moveSpeed);\n          interactionState.isPanning = true;\n        }\n\n        break;\n\n      case 'ArrowUp':\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp(moveSpeed);\n          interactionState.isPanning = true;\n        }\n\n        break;\n\n      case 'ArrowDown':\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown(moveSpeed);\n          interactionState.isPanning = true;\n        }\n\n        break;\n\n      default:\n        return false;\n    }\n\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n\n  _getTransitionProps(opts) {\n    const {\n      transition\n    } = this;\n\n    if (!transition || !transition.transitionInterpolator) {\n      return NO_TRANSITION_PROPS;\n    }\n\n    return opts ? { ...transition,\n      transitionInterpolator: new LinearInterpolator({ ...opts,\n        ...transition.transitionInterpolator.opts,\n        makeViewport: this.controllerState.makeViewport\n      })\n    } : transition;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["TransitionManager","LinearInterpolator","NO_TRANSITION_PROPS","transitionDuration","DEFAULT_INERTIA","INERTIA_EASING","t","EVENT_TYPES","WHEEL","PAN","PINCH","TRIPLE_PAN","DOUBLE_TAP","KEYBOARD","pinchEventWorkaround","Controller","constructor","opts","_defineProperty","isDragging","transitionManager","getControllerState","props","ControllerState","onViewStateChange","_onTransition","bind","onStateChange","_setInteractionState","handleEvent","eventManager","makeViewport","events","customEvents","toggleEvents","_customEvents","setProps","finalize","eventName","_events","off","event","_controllerState","undefined","eventStartBlocked","_eventStartBlocked","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onTriplePanStart","_onTriplePan","_onTriplePanEnd","_onDoubleTap","_onWheel","_onKeyDown","controllerState","state","getCenter","x","y","offsetCenter","isPointInBounds","pos","width","height","handled","inside","stopPropagation","isFunctionKeyPressed","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","_interactionState","blockEvents","timeout","timer","setTimeout","dragMode","transitionInterpolator","_getTransitionProps","processViewStateChange","inertia","Number","isFinite","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","updateTransition","eventNames","enabled","forEach","on","updateViewport","newControllerState","extraProps","interactionState","viewState","getViewportProps","changed","getState","oldViewState","params","newStates","Object","assign","alternateMode","rightButton","invertPan","_panMove","_onPanMove","_onPanRotate","_onPanMoveEnd","_onPanRotateEnd","pan","isPanning","velocity","endPos","velocityX","velocityY","panEnd","transitionEasing","rotate","isRotating","rotateEnd","preventDefault","speed","smooth","delta","scale","Math","exp","abs","zoom","around","isZooming","rotateStart","deltaX","zoomStart","_startPinchRotation","rotation","_lastPinchEvent","deltaAngleX","z","log2","velocityZ","deltaTime","endScale","pow","zoomEnd","isZoomOut","funcKey","zoomSpeed","moveSpeed","rotateSpeedX","rotateSpeedY","code","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown","transition"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplicații\\earthquakes\\node_modules\\@deck.gl\\core\\src\\controllers\\controller.ts"],"sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-statements, complexity */\nimport TransitionManager, {TransitionProps} from './transition-manager';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {IViewState} from './view-state';\nimport {ConstructorOf} from '../types/types';\n\nimport type Viewport from '../viewports/viewport';\n\nimport type {EventManager, MjolnirEvent, MjolnirGestureEvent, MjolnirWheelEvent, MjolnirKeyEvent} from 'mjolnir.js';\nimport type {Timeline} from '@luma.gl/core';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n} as const;\n\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n} as const;\n\n/** Configuration of how user input is handled */\nexport type ControllerOptions = {\n  /** Enable zooming with mouse wheel. Default `true`. */\n  scrollZoom?: boolean | {\n    /** Scaler that translates wheel delta to the change of viewport scale. Default `0.01`. */\n    speed?: number;\n    /** Smoothly transition to the new zoom. If enabled, will provide a slightly lagged but smoother experience. Default `false`. */\n    smooth?: boolean\n  };\n  /** Enable panning with pointer drag. Default `true` */\n  dragPan?: boolean;\n  /** Enable rotating with pointer drag. Default `true` */\n  dragRotate?: boolean;\n  /** Enable zooming with double click. Default `true` */\n  doubleClickZoom?: boolean;\n  /** Enable zooming with multi-touch. Default `true` */\n  touchZoom?: boolean;\n  /** Enable rotating with multi-touch. Use two-finger rotating gesture for horizontal and three-finger swiping gesture for vertical rotation. Default `false` */\n  touchRotate?: boolean;\n  /** Enable interaction with keyboard. Default `true`. */\n  keyboard?:\n    | boolean\n    | {\n        /** Speed of zoom using +/- keys. Default `2` */\n        zoomSpeed?: number;\n        /** Speed of movement using arrow keys, in pixels. */\n        moveSpeed?: number;\n        /** Speed of rotation using shift + left/right arrow keys, in degrees. Default 15. */\n        rotateSpeedX?: number;\n        /** Speed of rotation using shift + up/down arrow keys, in degrees. Default 10. */\n        rotateSpeedY?: number;\n      };\n  /** Drag behavior without pressing function keys, one of `pan` and `rotate`. */\n  dragMode?: 'pan' | 'rotate';\n  /** Enable inertia after panning/pinching. If a number is provided, indicates the duration of time over which the velocity reduces to zero, in milliseconds. Default `false`. */\n  inertia?: boolean | number;\n};\n\nexport type ControllerProps = {\n  /** Identifier of the controller */\n  id: string;\n  /** Viewport x position */\n  x: number;\n  /** Viewport y position */\n  y: number;\n  /** Viewport width */\n  width: number;\n  /** Viewport height */\n  height: number;\n} & ControllerOptions & TransitionProps;\n\n/** The state of a controller */\nexport type InteractionState = {\n  /** If the view state is in transition */\n  inTransition?: boolean;\n  /** If the user is dragging */\n  isDragging?: boolean;\n  /** If the view is being panned, either from user input or transition */\n  isPanning?: boolean;\n  /** If the view is being rotated, either from user input or transition */\n  isRotating?: boolean;\n  /** If the view is being zoomed, either from user input or transition */\n  isZooming?: boolean;\n}\n\n/** Parameters passed to the onViewStateChange callback */\nexport type ViewStateChangeParameters = {\n  /** The next view state, either from user input or transition */\n  viewState: Record<string, any>;\n  /** Object describing the nature of the view state change */\n  interactionState: InteractionState;\n  /** The current view state */\n  oldViewState?: Record<string, any>;\n}\n\nconst pinchEventWorkaround: any = {};\n\nexport default abstract class Controller<ControllerState extends IViewState<ControllerState>> {\n  abstract get ControllerState(): ConstructorOf<ControllerState>;\n  abstract get transition(): TransitionProps;\n\n  // @ts-expect-error (2564) - not assigned in the constructor\n  protected props: ControllerProps;\n  protected state: Record<string, any> = {};\n\n  protected transitionManager: TransitionManager<ControllerState>;\n  protected eventManager: EventManager;\n  protected onViewStateChange: (params: ViewStateChangeParameters) => void;\n  protected onStateChange: (state: InteractionState) => void;\n  protected makeViewport: (opts: Record<string, any>) => Viewport\n\n  private _controllerState?: ControllerState;\n  private _events: Record<string, boolean> = {};\n  private _interactionState: InteractionState = {\n    isDragging: false\n  };\n  private _customEvents: string[] = [];\n  private _eventStartBlocked: any = null;\n  private _panMove: boolean = false;\n\n  protected invertPan: boolean = false;\n  protected dragMode: 'pan' | 'rotate' = 'rotate';\n  protected inertia: number = 0;\n  protected scrollZoom: boolean | {speed?: number; smooth?: boolean} = true;\n  protected dragPan: boolean = true;\n  protected dragRotate: boolean = true;\n  protected doubleClickZoom: boolean = true;\n  protected touchZoom: boolean = true;\n  protected touchRotate: boolean = false;\n  protected keyboard:\n    | boolean\n    | {\n        zoomSpeed?: number; //  speed of zoom using +/- keys. Default 2.\n        moveSpeed?: number; //  speed of movement using arrow keys, in pixels.\n        rotateSpeedX?: number; //  speed of rotation using shift + left/right arrow keys, in degrees. Default 15.\n        rotateSpeedY?: number; //  speed of rotation using shift + up/down arrow keys, in degrees. Default 10.\n      } = true;\n\n  constructor(opts: {\n    timeline: Timeline,\n    eventManager: EventManager;\n    makeViewport: (opts: Record<string, any>) => Viewport;\n    onViewStateChange: (params: ViewStateChangeParameters) => void;\n    onStateChange: (state: InteractionState) => void;\n  }) {\n    this.transitionManager = new TransitionManager<ControllerState>({\n      ...opts,\n      getControllerState: props => new this.ControllerState(props),\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    });\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.eventManager = opts.eventManager;\n    this.onViewStateChange = opts.onViewStateChange || (() => {});\n    this.onStateChange = opts.onStateChange || (() => {});\n    this.makeViewport = opts.makeViewport;\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    // Make sure default events are not overwritten\n    if (this.props) {\n      this.setProps(this.props);\n    }\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        // @ts-ignore (2345) event type string cannot be assifned to enum\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.eventManager?.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   */\n  handleEvent(event: MjolnirEvent) {\n    // Force recalculate controller state\n    this._controllerState = undefined;\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n      case 'tripanmove':\n        return this._onTriplePan(event);\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  get controllerState(): ControllerState {\n    this._controllerState = this._controllerState || new this.ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.props,\n      ...this.state\n    });\n    return this._controllerState ;\n  }\n\n  getCenter(event: MjolnirGestureEvent | MjolnirWheelEvent) : [number, number] {\n    const {x, y} = this.props;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos: [number, number], event: MjolnirEvent): boolean {\n    const {width, height} = this.props;\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    if (inside && event) {\n      event.stopPropagation();\n    }\n    return inside;\n  }\n\n  isFunctionKeyPressed(event: MjolnirEvent): boolean {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging(): boolean {\n    return this._interactionState.isDragging || false;\n  }\n\n  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n  // This triggers a brief `pan` event.\n  // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n  blockEvents(timeout: number): void {\n    /* global setTimeout */\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setProps(props: ControllerProps) {\n    if (props.dragMode) {\n      this.dragMode = props.dragMode;\n    }\n    this.props = props;\n\n    if (!('transitionInterpolator' in props)) {\n      // Add default transition interpolator\n      props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n    }\n\n    this.transitionManager.processViewStateChange(props);\n\n    const {inertia} = props;\n    this.inertia = Number.isFinite(inertia) ? (inertia as number) : (inertia === true ? DEFAULT_INERTIA : 0);\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  protected updateViewport(newControllerState: ControllerState, extraProps: Record<string, any> | null = null, interactionState: InteractionState = {}) {\n    const viewState = {...newControllerState.getViewportProps(), ...extraProps};\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    this.state = newControllerState.getState();\n    this._setInteractionState(interactionState);\n\n    if (changed) {\n      const oldViewState = this.controllerState && this.controllerState.getViewportProps();\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState: this._interactionState, oldViewState});\n      }\n    }\n  }\n\n  private _onTransition(params: {viewState: Record<string, any>, oldViewState: Record<string, any>}) {\n    this.onViewStateChange({...params, interactionState: this._interactionState});\n  }\n\n  private _setInteractionState(newStates: InteractionState) {\n    Object.assign(this._interactionState, newStates);\n    this.onStateChange(this._interactionState);\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  protected _onPanStart(event: MjolnirGestureEvent): boolean {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton || false;\n    if (this.invertPan || this.dragMode === 'pan') {\n      // invertPan is replaced by props.dragMode, keeping for backward compatibility\n      alternateMode = !alternateMode;\n    }\n    const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n      pos\n    });\n    this._panMove = alternateMode;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` and `panend` event.\n  protected _onPan(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  protected _onPanEnd(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  protected _onPanMove(event: MjolnirGestureEvent): boolean {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  protected _onPanMoveEnd(event: MjolnirGestureEvent): boolean {\n    const {inertia} = this;\n    if (this.dragPan && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos: [number, number] = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.pan({pos: endPos}).panEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.panEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  protected _onPanRotate(event: MjolnirGestureEvent): boolean {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  protected _onPanRotateEnd(event): boolean {\n    const {inertia} = this;\n    if (this.dragRotate && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos: [number, number] = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.rotate({pos: endPos}).rotateEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  protected _onWheel(event: MjolnirWheelEvent): boolean {\n    if (!this.scrollZoom) {\n      return false;\n    }\n    event.srcEvent.preventDefault();\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const {speed = 0.01, smooth = false} = this.scrollZoom === true ? {} : this.scrollZoom;\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    this.updateViewport(\n      newControllerState,\n      {...this._getTransitionProps({around: pos}), transitionDuration: smooth ? 250 : 1},\n      {\n        isZooming: true,\n        isPanning: true\n      }\n    );\n    return true;\n  }\n\n  protected _onTriplePanStart(event: MjolnirGestureEvent): boolean {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.rotateStart({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  protected _onTriplePan(event: MjolnirGestureEvent): boolean {\n    if (!this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  protected _onTriplePanEnd(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia} = this;\n    if (this.touchRotate && inertia && event.velocityY) {\n      const pos = this.getCenter(event);\n      const endPos: [number, number] = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];\n      const newControllerState = this.controllerState.rotate({pos: endPos});\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  protected _onPinchStart(event: MjolnirGestureEvent): boolean {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    pinchEventWorkaround._startPinchRotation = event.rotation;\n    pinchEventWorkaround._lastPinchEvent = event;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinchmove` and `pinchend` events.\n  protected _onPinch(event: MjolnirGestureEvent): boolean {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      newControllerState = newControllerState.rotate({\n        deltaAngleX: pinchEventWorkaround._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    pinchEventWorkaround._lastPinchEvent = event;\n    return true;\n  }\n\n  protected _onPinchEnd(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia} = this;\n    const {_lastPinchEvent} = pinchEventWorkaround;\n    if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n      const pos = this.getCenter(event);\n      let newControllerState = this.controllerState.rotateEnd();\n      const z = Math.log2(event.scale);\n      const velocityZ =\n        (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n      const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);\n      newControllerState = newControllerState.zoom({pos, scale: endScale}).zoomEnd();\n\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps({around: pos}),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: this.touchZoom,\n          isZooming: this.touchZoom,\n          isRotating: false\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n    }\n    pinchEventWorkaround._startPinchRotation = null;\n    pinchEventWorkaround._lastPinchEvent = null;\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  protected _onDoubleTap(event: MjolnirGestureEvent): boolean {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(newControllerState, this._getTransitionProps({around: pos}), {\n      isZooming: true,\n      isPanning: true\n    });\n    this.blockEvents(100);\n    return true;\n  }\n\n  // Default handler for the `keydown` event\n  protected _onKeyDown(event: MjolnirKeyEvent): boolean {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    // @ts-ignore\n    const {zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY} = this.keyboard === true ? {} : this.keyboard;\n    const {controllerState} = this;\n    let newControllerState;\n    const interactionState: InteractionState = {};\n\n    switch (event.srcEvent.code) {\n      case 'Minus':\n        newControllerState = funcKey\n          ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed)\n          : controllerState.zoomOut(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'Equal':\n        newControllerState = funcKey\n          ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed)\n          : controllerState.zoomIn(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'ArrowLeft':\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowRight':\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowUp':\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowDown':\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      default:\n        return false;\n    }\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n\n  protected _getTransitionProps(opts?: any): TransitionProps {\n    const {transition} = this;\n\n    if (!transition || !transition.transitionInterpolator) {\n      return NO_TRANSITION_PROPS;\n    }\n\n    // Enables Transitions on double-tap and key-down events.\n    return opts\n      ? {\n        ...transition,\n        transitionInterpolator: new LinearInterpolator({\n          ...opts,\n          ...(transition.transitionInterpolator as LinearInterpolator).opts,\n          makeViewport: this.controllerState.makeViewport\n        })\n      }\n      : transition;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}