{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { CompositeLayer, createIterable } from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, { DEFAULT_FONT_SETTINGS, setFontAtlasCacheLimit } from './font-atlas-manager';\nimport { transformParagraph, getTextFromBuffer } from './utils';\nimport TextBackgroundLayer from './text-background-layer/text-background-layer';\nconst TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n};\nconst ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n};\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_LINE_HEIGHT = 1.0;\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n  background: false,\n  getBackgroundColor: {\n    type: 'accessor',\n    value: [255, 255, 255, 255]\n  },\n  getBorderColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getBorderWidth: {\n    type: 'accessor',\n    value: 0\n  },\n  backgroundPadding: {\n    type: 'array',\n    value: [0, 0, 0, 0]\n  },\n  characterSet: {\n    type: 'object',\n    value: DEFAULT_FONT_SETTINGS.characterSet\n  },\n  fontFamily: DEFAULT_FONT_SETTINGS.fontFamily,\n  fontWeight: DEFAULT_FONT_SETTINGS.fontWeight,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  outlineWidth: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  outlineColor: {\n    type: 'color',\n    value: DEFAULT_COLOR\n  },\n  fontSettings: {},\n  wordBreak: 'break-word',\n  maxWidth: {\n    type: 'number',\n    value: -1\n  },\n  getText: {\n    type: 'accessor',\n    value: x => x.text\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getSize: {\n    type: 'accessor',\n    value: 32\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getTextAnchor: {\n    type: 'accessor',\n    value: 'middle'\n  },\n  getAlignmentBaseline: {\n    type: 'accessor',\n    value: 'center'\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  backgroundColor: {\n    deprecatedFor: ['background', 'getBackgroundColor']\n  }\n};\nexport default class TextLayer extends CompositeLayer {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"state\", void 0);\n\n    _defineProperty(this, \"getBoundingRect\", (object, objectInfo) => {\n      const iconMapping = this.state.fontAtlasManager.mapping;\n      const getText = this.state.getText;\n      const {\n        wordBreak,\n        maxWidth,\n        lineHeight,\n        getTextAnchor,\n        getAlignmentBaseline\n      } = this.props;\n      const paragraph = getText(object, objectInfo) || '';\n      const {\n        size: [width, height]\n      } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n      const anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];\n      const anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];\n      return [(anchorX - 1) * width / 2, (anchorY - 1) * height / 2, width, height];\n    });\n\n    _defineProperty(this, \"getIconOffsets\", (object, objectInfo) => {\n      const iconMapping = this.state.fontAtlasManager.mapping;\n      const getText = this.state.getText;\n      const {\n        wordBreak,\n        maxWidth,\n        lineHeight,\n        getTextAnchor,\n        getAlignmentBaseline\n      } = this.props;\n      const paragraph = getText(object, objectInfo) || '';\n      const {\n        x,\n        y,\n        rowWidth,\n        size: [width, height]\n      } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n      const anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];\n      const anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];\n      const numCharacters = x.length;\n      const offsets = new Array(numCharacters * 2);\n      let index = 0;\n\n      for (let i = 0; i < numCharacters; i++) {\n        const rowOffset = (1 - anchorX) * (width - rowWidth[i]) / 2;\n        offsets[index++] = (anchorX - 1) * width / 2 + rowOffset + x[i];\n        offsets[index++] = (anchorY - 1) * height / 2 + y[i];\n      }\n\n      return offsets;\n    });\n  }\n\n  initializeState() {\n    this.state = {\n      styleVersion: 0,\n      fontAtlasManager: new FontAtlasManager()\n    };\n  }\n\n  updateState(params) {\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = params;\n    const textChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText);\n\n    if (textChanged) {\n      this._updateText();\n    }\n\n    const fontChanged = this._updateFontAtlas();\n\n    const styleChanged = fontChanged || props.lineHeight !== oldProps.lineHeight || props.wordBreak !== oldProps.wordBreak || props.maxWidth !== oldProps.maxWidth;\n\n    if (styleChanged) {\n      this.setState({\n        styleVersion: this.state.styleVersion + 1\n      });\n    }\n  }\n\n  getPickingInfo(_ref) {\n    let {\n      info\n    } = _ref;\n    info.object = info.index >= 0 ? this.props.data[info.index] : null;\n    return info;\n  }\n\n  _updateFontAtlas() {\n    const {\n      fontSettings,\n      fontFamily,\n      fontWeight\n    } = this.props;\n    const {\n      fontAtlasManager,\n      characterSet\n    } = this.state;\n    const fontProps = { ...fontSettings,\n      characterSet,\n      fontFamily,\n      fontWeight\n    };\n\n    if (!fontAtlasManager.mapping) {\n      fontAtlasManager.setProps(fontProps);\n      return true;\n    }\n\n    for (const key in fontProps) {\n      if (fontProps[key] !== fontAtlasManager.props[key]) {\n        fontAtlasManager.setProps(fontProps);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _updateText() {\n    var _attributes;\n\n    const {\n      data,\n      characterSet\n    } = this.props;\n    const textBuffer = (_attributes = data.attributes) === null || _attributes === void 0 ? void 0 : _attributes.getText;\n    let {\n      getText\n    } = this.props;\n    let startIndices = data.startIndices;\n    let numInstances;\n    const autoCharacterSet = characterSet === 'auto' && new Set();\n\n    if (textBuffer && startIndices) {\n      const {\n        texts,\n        characterCount\n      } = getTextFromBuffer({ ...(ArrayBuffer.isView(textBuffer) ? {\n          value: textBuffer\n        } : textBuffer),\n        length: data.length,\n        startIndices,\n        characterSet: autoCharacterSet\n      });\n      numInstances = characterCount;\n\n      getText = (_, _ref2) => {\n        let {\n          index\n        } = _ref2;\n        return texts[index];\n      };\n    } else {\n      const {\n        iterable,\n        objectInfo\n      } = createIterable(data);\n      startIndices = [0];\n      numInstances = 0;\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        const text = Array.from(getText(object, objectInfo) || '');\n\n        if (autoCharacterSet) {\n          text.forEach(autoCharacterSet.add, autoCharacterSet);\n        }\n\n        numInstances += text.length;\n        startIndices.push(numInstances);\n      }\n    }\n\n    this.setState({\n      getText,\n      startIndices,\n      numInstances,\n      characterSet: autoCharacterSet || characterSet\n    });\n  }\n\n  renderLayers() {\n    const {\n      startIndices,\n      numInstances,\n      getText,\n      fontAtlasManager: {\n        scale,\n        texture,\n        mapping\n      },\n      styleVersion\n    } = this.state;\n    const {\n      data,\n      _dataDiff,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      getBackgroundColor,\n      getBorderColor,\n      getBorderWidth,\n      backgroundPadding,\n      background,\n      billboard,\n      fontSettings,\n      outlineWidth,\n      outlineColor,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions,\n      updateTriggers\n    } = this.props;\n    const CharactersLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n    const BackgroundLayerClass = this.getSubLayerClass('background', TextBackgroundLayer);\n    return [background && new BackgroundLayerClass({\n      getFillColor: getBackgroundColor,\n      getLineColor: getBorderColor,\n      getLineWidth: getBorderWidth,\n      padding: backgroundPadding,\n      getPosition,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      billboard,\n      sizeScale: sizeScale / this.state.fontAtlasManager.props.fontSize,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions: transitions && {\n        getPosition: transitions.getPosition,\n        getAngle: transitions.getAngle,\n        getSize: transitions.getSize,\n        getFillColor: transitions.getBackgroundColor,\n        getLineColor: transitions.getBorderColor,\n        getLineWidth: transitions.getBorderWidth,\n        getPixelOffset: transitions.getPixelOffset\n      }\n    }, this.getSubLayerProps({\n      id: 'background',\n      updateTriggers: {\n        getPosition: updateTriggers.getPosition,\n        getAngle: updateTriggers.getAngle,\n        getSize: updateTriggers.getSize,\n        getFillColor: updateTriggers.getBackgroundColor,\n        getLineColor: updateTriggers.getBorderColor,\n        getLineWidth: updateTriggers.getBorderWidth,\n        getPixelOffset: updateTriggers.getPixelOffset,\n        getBoundingRect: {\n          getText: updateTriggers.getText,\n          getTextAnchor: updateTriggers.getTextAnchor,\n          getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n          styleVersion\n        }\n      }\n    }), {\n      data: data.attributes && data.attributes.background ? {\n        length: data.length,\n        attributes: data.attributes.background\n      } : data,\n      _dataDiff,\n      autoHighlight: false,\n      getBoundingRect: this.getBoundingRect\n    }), new CharactersLayerClass({\n      sdf: fontSettings.sdf,\n      smoothing: Number.isFinite(fontSettings.smoothing) ? fontSettings.smoothing : DEFAULT_FONT_SETTINGS.smoothing,\n      outlineWidth,\n      outlineColor,\n      iconAtlas: texture,\n      iconMapping: mapping,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      billboard,\n      sizeScale: sizeScale * scale,\n      sizeUnits,\n      sizeMinPixels: sizeMinPixels * scale,\n      sizeMaxPixels: sizeMaxPixels * scale,\n      transitions: transitions && {\n        getPosition: transitions.getPosition,\n        getAngle: transitions.getAngle,\n        getColor: transitions.getColor,\n        getSize: transitions.getSize,\n        getPixelOffset: transitions.getPixelOffset\n      }\n    }, this.getSubLayerProps({\n      id: 'characters',\n      updateTriggers: {\n        getIcon: updateTriggers.getText,\n        getPosition: updateTriggers.getPosition,\n        getAngle: updateTriggers.getAngle,\n        getColor: updateTriggers.getColor,\n        getSize: updateTriggers.getSize,\n        getPixelOffset: updateTriggers.getPixelOffset,\n        getIconOffsets: {\n          getText: updateTriggers.getText,\n          getTextAnchor: updateTriggers.getTextAnchor,\n          getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n          styleVersion\n        }\n      }\n    }), {\n      data,\n      _dataDiff,\n      startIndices,\n      numInstances,\n      getIconOffsets: this.getIconOffsets,\n      getIcon: getText\n    })];\n  }\n\n  static set fontAtlasCacheLimit(limit) {\n    setFontAtlasCacheLimit(limit);\n  }\n\n}\n\n_defineProperty(TextLayer, \"defaultProps\", defaultProps);\n\n_defineProperty(TextLayer, \"layerName\", 'TextLayer');","map":{"version":3,"mappings":"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","names":["CompositeLayer","createIterable","MultiIconLayer","FontAtlasManager","DEFAULT_FONT_SETTINGS","setFontAtlasCacheLimit","transformParagraph","getTextFromBuffer","TextBackgroundLayer","TEXT_ANCHOR","start","middle","end","ALIGNMENT_BASELINE","top","center","bottom","DEFAULT_COLOR","DEFAULT_LINE_HEIGHT","defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","background","getBackgroundColor","type","value","getBorderColor","getBorderWidth","backgroundPadding","characterSet","fontFamily","fontWeight","lineHeight","outlineWidth","min","outlineColor","fontSettings","wordBreak","maxWidth","getText","x","text","getPosition","position","getColor","getSize","getAngle","getTextAnchor","getAlignmentBaseline","getPixelOffset","backgroundColor","deprecatedFor","TextLayer","constructor","_defineProperty","object","objectInfo","iconMapping","state","fontAtlasManager","mapping","props","paragraph","size","width","height","anchorX","anchorY","y","rowWidth","numCharacters","length","offsets","Array","index","i","rowOffset","initializeState","styleVersion","updateState","params","oldProps","changeFlags","textChanged","dataChanged","updateTriggersChanged","all","_updateText","fontChanged","_updateFontAtlas","styleChanged","setState","getPickingInfo","info","data","fontProps","setProps","key","textBuffer","attributes","_attributes","startIndices","numInstances","autoCharacterSet","Set","texts","characterCount","ArrayBuffer","isView","_","iterable","from","forEach","add","push","renderLayers","scale","texture","_dataDiff","transitions","updateTriggers","CharactersLayerClass","getSubLayerClass","BackgroundLayerClass","getFillColor","getLineColor","getLineWidth","padding","fontSize","getSubLayerProps","id","getBoundingRect","autoHighlight","sdf","smoothing","isFinite","iconAtlas","getIcon","getIconOffsets","fontAtlasCacheLimit","limit"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplicații\\earthquakes\\node_modules\\@deck.gl\\layers\\src\\text-layer\\text-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, {\n  DEFAULT_FONT_SETTINGS,\n  setFontAtlasCacheLimit\n} from './font-atlas-manager';\nimport {transformParagraph, getTextFromBuffer} from './utils';\n\nimport TextBackgroundLayer from './text-background-layer/text-background-layer';\n\nimport type {FontSettings} from './font-atlas-manager';\nimport type {\n  LayerProps,\n  Accessor,\n  AccessorFunction,\n  Unit,\n  Position,\n  Color,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\n\nconst TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n} as const;\n\nconst ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n} as const;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst DEFAULT_LINE_HEIGHT = 1.0;\n\ntype _TextLayerProps<DataT> = {\n  /** If `true`, the text always faces camera. Otherwise the text faces up (z).\n   * @default true\n   */\n  billboard?: boolean;\n  /**\n   * Text size multiplier.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * The units of the size, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'pixels'\n   */\n  sizeUnits?: Unit;\n  /**\n   * The minimum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too small when zoomed out.\n   * @default 0\n   */\n  sizeMinPixels?: number;\n  /**\n   * The maximum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too big when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  sizeMaxPixels?: number;\n\n  /** Whether to render background for the text blocks.\n   * @default false\n   */\n  background?: boolean;\n  /** Background color accessor.\n   * @default [255, 255, 255, 255]\n   */\n  getBackgroundColor?: Accessor<DataT, Color>;\n  /** Border color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getBorderColor?: Accessor<DataT, Color>;\n  /** Border width accessor.\n   * @default 0\n   */\n  getBorderWidth?: Accessor<DataT, number>;\n  /**\n   * The padding of the background..\n   * If an array of 2 is supplied, it is interpreted as `[padding_x, padding_y]` in pixels.\n   * If an array of 4 is supplied, it is interpreted as `[padding_left, padding_top, padding_right, padding_bottom]` in pixels.\n   * @default [0, 0, 0, 0]\n   */\n  backgroundPadding?: [number, number] | [number, number, number, number];\n  /**\n   * Specifies a list of characters to include in the font. If set to 'auto', will be automatically generated from the data set.\n   * @default (ASCII characters 32-128)\n   */\n  characterSet?: FontSettings['characterSet'] | 'auto';\n  /** CSS font family\n   * @default 'Monaco, monospace'\n   */\n  fontFamily?: FontSettings['fontFamily'];\n  /** CSS font weight\n   * @default 'normal'\n   */\n  fontWeight?: FontSettings['fontWeight'];\n  /** A unitless number that will be multiplied with the current font size to set the line height.\n   * @default 'normal'\n   */\n  lineHeight?: number;\n  /**\n   * Width of outline around the text, relative to the font size. Only effective if `fontSettings.sdf` is `true`.\n   * @default 0\n   */\n  outlineWidth?: number;\n  /**\n   * Color of outline around the text, in `[r, g, b, [a]]`. Each channel is a number between 0-255 and `a` is 255 if not supplied.\n   * @default [0, 0, 0, 255]\n   */\n  outlineColor?: Color;\n  /**\n   * Advance options for fine tuning the appearance and performance of the generated shared `fontAtlas`.\n   */\n  fontSettings?: FontSettings;\n  /**\n   * Available options are `break-all` and `break-word`. A valid `maxWidth` has to be provided to use `wordBreak`.\n   * @default 'break-word'\n   */\n  wordBreak?: 'break-word' | 'break-all';\n  /**\n   * `maxWidth` is used together with `break-word` for wrapping text. The value of `maxWidth` specifies the width limit to break the text into multiple lines.\n   * @default -1\n   */\n  maxWidth?: number;\n  /**\n   * Label text accessor\n   */\n  getText?: AccessorFunction<DataT, string>;\n  /**\n   * Anchor position accessor\n   */\n  getPosition?: Accessor<DataT, Position>;\n  /**\n   * Label color accessor\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /**\n   * Label size accessor\n   * @default 32\n   */\n  getSize?: Accessor<DataT, number>;\n  /**\n   * Label rotation accessor, in degrees\n   * @default 0\n   */\n  getAngle?: Accessor<DataT, number>;\n  /**\n   * Horizontal alignment accessor\n   * @default 'middle'\n   */\n  getTextAnchor?: Accessor<DataT, 'start' | 'middle' | 'end'>;\n  /**\n   * Vertical alignment accessor\n   * @default 'center'\n   */\n  getAlignmentBaseline?: Accessor<DataT, 'top' | 'center' | 'bottom'>;\n  /**\n   * Label offset from the anchor position, [x, y] in pixels\n   * @default [0, 0]\n   */\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  /**\n   * @deprecated Use `background` and `getBackgroundColor` instead\n   */\n  backgroundColor?: Color;\n};\n\nexport type TextLayerProps<DataT = any> = _TextLayerProps<DataT> & LayerProps<DataT>;\n\nconst defaultProps: DefaultProps<TextLayerProps> = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  background: false,\n  getBackgroundColor: {type: 'accessor', value: [255, 255, 255, 255]},\n  getBorderColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getBorderWidth: {type: 'accessor', value: 0},\n  backgroundPadding: {type: 'array', value: [0, 0, 0, 0]},\n\n  characterSet: {type: 'object', value: DEFAULT_FONT_SETTINGS.characterSet},\n  fontFamily: DEFAULT_FONT_SETTINGS.fontFamily,\n  fontWeight: DEFAULT_FONT_SETTINGS.fontWeight,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  outlineWidth: {type: 'number', value: 0, min: 0},\n  outlineColor: {type: 'color', value: DEFAULT_COLOR},\n  fontSettings: {},\n\n  // auto wrapping options\n  wordBreak: 'break-word',\n  maxWidth: {type: 'number', value: -1},\n\n  getText: {type: 'accessor', value: x => x.text},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 32},\n  getAngle: {type: 'accessor', value: 0},\n  getTextAnchor: {type: 'accessor', value: 'middle'},\n  getAlignmentBaseline: {type: 'accessor', value: 'center'},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  // deprecated\n  backgroundColor: {deprecatedFor: ['background', 'getBackgroundColor']}\n};\n\n/** Render text labels at given coordinates. */\nexport default class TextLayer<DataT = any, ExtraPropsT = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_TextLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TextLayer';\n\n  state!: {\n    styleVersion: number;\n    fontAtlasManager: FontAtlasManager;\n    characterSet?: Set<string>;\n    startIndices?: number[];\n    numInstances?: number;\n    getText?: AccessorFunction<DataT, string>;\n  };\n\n  initializeState() {\n    this.state = {\n      styleVersion: 0,\n      fontAtlasManager: new FontAtlasManager()\n    };\n  }\n\n  // eslint-disable-next-line complexity\n  updateState(params: UpdateParameters<this>) {\n    const {props, oldProps, changeFlags} = params;\n    const textChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText));\n\n    if (textChanged) {\n      this._updateText();\n    }\n\n    const fontChanged = this._updateFontAtlas();\n\n    const styleChanged =\n      fontChanged ||\n      props.lineHeight !== oldProps.lineHeight ||\n      props.wordBreak !== oldProps.wordBreak ||\n      props.maxWidth !== oldProps.maxWidth;\n\n    if (styleChanged) {\n      this.setState({\n        styleVersion: this.state.styleVersion + 1\n      });\n    }\n  }\n\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    // because `TextLayer` assign the same pickingInfoIndex for one text label,\n    // here info.index refers the index of text label in props.data\n    info.object = info.index >= 0 ? this.props.data[info.index] : null;\n    return info;\n  }\n\n  /** Returns true if font has changed */\n  private _updateFontAtlas(): boolean {\n    const {fontSettings, fontFamily, fontWeight} = this.props;\n    const {fontAtlasManager, characterSet} = this.state;\n\n    const fontProps = {\n      ...fontSettings,\n      characterSet,\n      fontFamily,\n      fontWeight\n    };\n\n    if (!fontAtlasManager.mapping) {\n      // This is the first update\n      fontAtlasManager.setProps(fontProps);\n      return true;\n    }\n\n    for (const key in fontProps) {\n      if (fontProps[key] !== fontAtlasManager.props[key]) {\n        fontAtlasManager.setProps(fontProps);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // Text strings are variable width objects\n  // Count characters and start offsets\n  private _updateText() {\n    const {data, characterSet} = this.props;\n    const textBuffer = (data as any).attributes?.getText;\n    let {getText} = this.props;\n    let startIndices: number[] = (data as any).startIndices;\n    let numInstances: number;\n\n    const autoCharacterSet = characterSet === 'auto' && new Set();\n\n    if (textBuffer && startIndices) {\n      const {texts, characterCount} = getTextFromBuffer({\n        ...(ArrayBuffer.isView(textBuffer) ? {value: textBuffer} : textBuffer),\n        // @ts-ignore if data.attribute is defined then length is expected\n        length: data.length,\n        startIndices,\n        characterSet: autoCharacterSet\n      });\n      numInstances = characterCount;\n      getText = (_, {index}) => texts[index];\n    } else {\n      const {iterable, objectInfo} = createIterable(data);\n      startIndices = [0];\n      numInstances = 0;\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        // Break into an array of characters\n        // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work\n        const text = Array.from(getText(object, objectInfo) || '');\n        if (autoCharacterSet) {\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          text.forEach(autoCharacterSet.add, autoCharacterSet);\n        }\n        numInstances += text.length;\n        startIndices.push(numInstances);\n      }\n    }\n\n    this.setState({\n      getText,\n      startIndices,\n      numInstances,\n      characterSet: autoCharacterSet || characterSet\n    });\n  }\n\n  // Returns the x, y offsets of each character in a text string\n  private getBoundingRect: AccessorFunction<DataT, [number, number, number, number]> = (\n    object,\n    objectInfo\n  ) => {\n    const iconMapping = this.state.fontAtlasManager.mapping!;\n    const getText = this.state.getText!;\n    const {wordBreak, maxWidth, lineHeight, getTextAnchor, getAlignmentBaseline} = this.props;\n\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    return [((anchorX - 1) * width) / 2, ((anchorY - 1) * height) / 2, width, height];\n  };\n\n  // Returns the x, y, w, h of each text object\n  private getIconOffsets: AccessorFunction<DataT, number[]> = (object, objectInfo) => {\n    const iconMapping = this.state.fontAtlasManager.mapping!;\n    const getText = this.state.getText!;\n    const {wordBreak, maxWidth, lineHeight, getTextAnchor, getAlignmentBaseline} = this.props;\n\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      x,\n      y,\n      rowWidth,\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    const numCharacters = x.length;\n    const offsets = new Array(numCharacters * 2);\n    let index = 0;\n\n    for (let i = 0; i < numCharacters; i++) {\n      // For a multi-line object, offset in x-direction needs consider\n      // the row offset in the paragraph and the object offset in the row\n      const rowOffset = ((1 - anchorX) * (width - rowWidth[i])) / 2;\n      offsets[index++] = ((anchorX - 1) * width) / 2 + rowOffset + x[i];\n      offsets[index++] = ((anchorY - 1) * height) / 2 + y[i];\n    }\n    return offsets;\n  };\n\n  renderLayers() {\n    const {\n      startIndices,\n      numInstances,\n      getText,\n      fontAtlasManager: {scale, texture, mapping},\n      styleVersion\n    } = this.state;\n\n    const {\n      data,\n      _dataDiff,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      getBackgroundColor,\n      getBorderColor,\n      getBorderWidth,\n      backgroundPadding,\n      background,\n      billboard,\n      fontSettings,\n      outlineWidth,\n      outlineColor,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    const CharactersLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n    const BackgroundLayerClass = this.getSubLayerClass('background', TextBackgroundLayer);\n\n    return [\n      background &&\n        new BackgroundLayerClass(\n          {\n            // background props\n            getFillColor: getBackgroundColor,\n            getLineColor: getBorderColor,\n            getLineWidth: getBorderWidth,\n            padding: backgroundPadding,\n\n            // props shared with characters layer\n            getPosition,\n            getSize,\n            getAngle,\n            getPixelOffset,\n            billboard,\n            sizeScale: sizeScale / this.state.fontAtlasManager.props.fontSize,\n            sizeUnits,\n            sizeMinPixels,\n            sizeMaxPixels,\n\n            transitions: transitions && {\n              getPosition: transitions.getPosition,\n              getAngle: transitions.getAngle,\n              getSize: transitions.getSize,\n              getFillColor: transitions.getBackgroundColor,\n              getLineColor: transitions.getBorderColor,\n              getLineWidth: transitions.getBorderWidth,\n              getPixelOffset: transitions.getPixelOffset\n            }\n          },\n          this.getSubLayerProps({\n            id: 'background',\n            updateTriggers: {\n              getPosition: updateTriggers.getPosition,\n              getAngle: updateTriggers.getAngle,\n              getSize: updateTriggers.getSize,\n              getFillColor: updateTriggers.getBackgroundColor,\n              getLineColor: updateTriggers.getBorderColor,\n              getLineWidth: updateTriggers.getBorderWidth,\n              getPixelOffset: updateTriggers.getPixelOffset,\n              getBoundingRect: {\n                getText: updateTriggers.getText,\n                getTextAnchor: updateTriggers.getTextAnchor,\n                getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n                styleVersion\n              }\n            }\n          }),\n          {\n            data:\n              // @ts-ignore (2339) attribute is not defined on all data types\n              data.attributes && data.attributes.background\n                ? // @ts-ignore (2339) attribute is not defined on all data types\n                  {length: data.length, attributes: data.attributes.background}\n                : data,\n            _dataDiff,\n            // Maintain the same background behavior as <=8.3. Remove in v9?\n            autoHighlight: false,\n            getBoundingRect: this.getBoundingRect\n          }\n        ),\n      new CharactersLayerClass(\n        {\n          sdf: fontSettings.sdf,\n          smoothing: Number.isFinite(fontSettings.smoothing)\n            ? fontSettings.smoothing\n            : DEFAULT_FONT_SETTINGS.smoothing,\n          outlineWidth,\n          outlineColor,\n          iconAtlas: texture,\n          iconMapping: mapping,\n\n          getPosition,\n          getColor,\n          getSize,\n          getAngle,\n          getPixelOffset,\n\n          billboard,\n          sizeScale: sizeScale * scale,\n          sizeUnits,\n          sizeMinPixels: sizeMinPixels * scale,\n          sizeMaxPixels: sizeMaxPixels * scale,\n\n          transitions: transitions && {\n            getPosition: transitions.getPosition,\n            getAngle: transitions.getAngle,\n            getColor: transitions.getColor,\n            getSize: transitions.getSize,\n            getPixelOffset: transitions.getPixelOffset\n          }\n        },\n        this.getSubLayerProps({\n          id: 'characters',\n          updateTriggers: {\n            getIcon: updateTriggers.getText,\n            getPosition: updateTriggers.getPosition,\n            getAngle: updateTriggers.getAngle,\n            getColor: updateTriggers.getColor,\n            getSize: updateTriggers.getSize,\n            getPixelOffset: updateTriggers.getPixelOffset,\n            getIconOffsets: {\n              getText: updateTriggers.getText,\n              getTextAnchor: updateTriggers.getTextAnchor,\n              getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n              styleVersion\n            }\n          }\n        }),\n        {\n          data,\n          _dataDiff,\n          startIndices,\n          numInstances,\n          getIconOffsets: this.getIconOffsets,\n          getIcon: getText\n        }\n      )\n    ];\n  }\n\n  static set fontAtlasCacheLimit(limit: number) {\n    setFontAtlasCacheLimit(limit);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}