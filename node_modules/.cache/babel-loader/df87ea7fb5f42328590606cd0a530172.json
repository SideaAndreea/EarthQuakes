{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport ScreenPass from '../passes/screen-pass';\nimport { normalizeShaderModule } from '@luma.gl/core';\nexport default class PostProcessEffect {\n  constructor(module) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"props\", void 0);\n\n    _defineProperty(this, \"module\", void 0);\n\n    _defineProperty(this, \"passes\", void 0);\n\n    this.id = \"\".concat(module.name, \"-pass\");\n    this.props = props;\n    normalizeShaderModule(module);\n    this.module = module;\n  }\n\n  preRender() {}\n\n  postRender(gl, params) {\n    const passes = this.passes || createPasses(gl, this.module, this.id, this.props);\n    this.passes = passes;\n    const {\n      target\n    } = params;\n    let inputBuffer = params.inputBuffer;\n    let outputBuffer = params.swapBuffer;\n\n    for (let index = 0; index < this.passes.length; index++) {\n      if (target && index === this.passes.length - 1) {\n        outputBuffer = target;\n      }\n\n      this.passes[index].render({\n        inputBuffer,\n        outputBuffer\n      });\n      const switchBuffer = outputBuffer;\n      outputBuffer = inputBuffer;\n      inputBuffer = switchBuffer;\n    }\n\n    return inputBuffer;\n  }\n\n  cleanup() {\n    if (this.passes) {\n      for (const pass of this.passes) {\n        pass.delete();\n      }\n\n      this.passes = undefined;\n    }\n  }\n\n}\n\nfunction createPasses(gl, module, id, moduleSettings) {\n  if (!module.passes) {\n    const fs = getFragmentShaderForRenderPass(module);\n    const pass = new ScreenPass(gl, {\n      id,\n      module,\n      fs,\n      moduleSettings\n    });\n    return [pass];\n  }\n\n  return module.passes.map((pass, index) => {\n    const fs = getFragmentShaderForRenderPass(module, pass);\n    const idn = \"\".concat(id, \"-\").concat(index);\n    return new ScreenPass(gl, {\n      id: idn,\n      module,\n      fs,\n      moduleSettings\n    });\n  });\n}\n\nconst FILTER_FS_TEMPLATE = func => \"uniform sampler2D texture;\\nuniform vec2 texSize;\\n\\nvarying vec2 position;\\nvarying vec2 coordinate;\\nvarying vec2 uv;\\n\\nvoid main() {\\n  vec2 texCoord = coordinate;\\n\\n  gl_FragColor = texture2D(texture, texCoord);\\n  gl_FragColor = \".concat(func, \"(gl_FragColor, texSize, texCoord);\\n}\\n\");\n\nconst SAMPLER_FS_TEMPLATE = func => \"uniform sampler2D texture;\\nuniform vec2 texSize;\\n\\nvarying vec2 position;\\nvarying vec2 coordinate;\\nvarying vec2 uv;\\n\\nvoid main() {\\n  vec2 texCoord = coordinate;\\n\\n  gl_FragColor = \".concat(func, \"(texture, texSize, texCoord);\\n}\\n\");\n\nfunction getFragmentShaderForRenderPass(module) {\n  let pass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : module;\n\n  if (pass.filter) {\n    const func = typeof pass.filter === 'string' ? pass.filter : \"\".concat(module.name, \"_filterColor\");\n    return FILTER_FS_TEMPLATE(func);\n  }\n\n  if (pass.sampler) {\n    const func = typeof pass.sampler === 'string' ? pass.sampler : \"\".concat(module.name, \"_sampleColor\");\n    return SAMPLER_FS_TEMPLATE(func);\n  }\n\n  return null;\n}","map":{"version":3,"mappings":"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","names":["ScreenPass","normalizeShaderModule","PostProcessEffect","constructor","module","props","_defineProperty","id","name","preRender","postRender","gl","params","passes","createPasses","target","inputBuffer","outputBuffer","swapBuffer","index","length","render","switchBuffer","cleanup","pass","delete","undefined","moduleSettings","fs","getFragmentShaderForRenderPass","map","idn","FILTER_FS_TEMPLATE","func","SAMPLER_FS_TEMPLATE","filter","sampler"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplica»õii\\earthquakes\\node_modules\\@deck.gl\\core\\src\\effects\\post-process-effect.ts"],"sourcesContent":["import ScreenPass from '../passes/screen-pass';\nimport {normalizeShaderModule} from '@luma.gl/core';\n\nimport type {Effect, PostRenderOptions} from '../lib/effect';\nimport type {Framebuffer} from '@luma.gl/webgl';\nimport type {ShaderModule} from '../types/types';\n\nexport default class PostProcessEffect implements Effect {\n  id: string;\n  props: any;\n  module: ShaderModule;\n  passes?: ScreenPass[];\n\n  constructor(module: ShaderModule, props: any = {}) {\n    this.id = `${module.name}-pass`;\n    this.props = props;\n    normalizeShaderModule(module);\n    this.module = module;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  preRender(): void {}\n\n  postRender(gl: WebGLRenderingContext, params: PostRenderOptions): Framebuffer {\n    const passes = this.passes || createPasses(gl, this.module, this.id, this.props);\n    this.passes = passes;\n\n    const {target} = params;\n    let inputBuffer = params.inputBuffer;\n    let outputBuffer = params.swapBuffer;\n\n    for (let index = 0; index < this.passes.length; index++) {\n      if (target && index === this.passes.length - 1) {\n        outputBuffer = target;\n      }\n      this.passes[index].render({inputBuffer, outputBuffer});\n      const switchBuffer = outputBuffer;\n      outputBuffer = inputBuffer;\n      inputBuffer = switchBuffer;\n    }\n    return inputBuffer;\n  }\n\n  cleanup(): void {\n    if (this.passes) {\n      for (const pass of this.passes) {\n        pass.delete();\n      }\n      this.passes = undefined;\n    }\n  }\n}\n\nfunction createPasses(\n  gl: WebGLRenderingContext,\n  module: ShaderModule,\n  id: string,\n  moduleSettings: any\n): ScreenPass[] {\n  if (!module.passes) {\n    const fs = getFragmentShaderForRenderPass(module);\n    const pass = new ScreenPass(gl, {\n      id,\n      module,\n      fs,\n      moduleSettings\n    });\n    return [pass];\n  }\n\n  return module.passes.map((pass, index) => {\n    const fs = getFragmentShaderForRenderPass(module, pass);\n    const idn = `${id}-${index}`;\n\n    return new ScreenPass(gl, {\n      id: idn,\n      module,\n      fs,\n      moduleSettings\n    });\n  });\n}\n\nconst FILTER_FS_TEMPLATE = func => `\\\nuniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = texture2D(texture, texCoord);\n  gl_FragColor = ${func}(gl_FragColor, texSize, texCoord);\n}\n`;\n\nconst SAMPLER_FS_TEMPLATE = func => `\\\nuniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = ${func}(texture, texSize, texCoord);\n}\n`;\n\nfunction getFragmentShaderForRenderPass(module, pass = module) {\n  if (pass.filter) {\n    const func = typeof pass.filter === 'string' ? pass.filter : `${module.name}_filterColor`;\n    return FILTER_FS_TEMPLATE(func);\n  }\n\n  if (pass.sampler) {\n    const func = typeof pass.sampler === 'string' ? pass.sampler : `${module.name}_sampleColor`;\n    return SAMPLER_FS_TEMPLATE(func);\n  }\n\n  // console.error(`${module.name} no fragment shader generated`);\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}