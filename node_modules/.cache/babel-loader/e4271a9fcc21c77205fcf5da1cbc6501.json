{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Framebuffer, Texture2D, isWebGL2, readPixelsToArray, cssToDeviceRatio, cssToDevicePixels } from '@luma.gl/core';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport { getClosestObject, getUniqueObjects } from './picking/query-object';\nimport { processPickInfo, getLayerPickingInfo, getEmptyPickingInfo } from './picking/pick-info';\nexport default class DeckPicker {\n  constructor(gl) {\n    _defineProperty(this, \"gl\", void 0);\n\n    _defineProperty(this, \"pickingFBO\", void 0);\n\n    _defineProperty(this, \"depthFBO\", void 0);\n\n    _defineProperty(this, \"pickLayersPass\", void 0);\n\n    _defineProperty(this, \"layerFilter\", void 0);\n\n    _defineProperty(this, \"lastPickedInfo\", void 0);\n\n    _defineProperty(this, \"_pickable\", true);\n\n    this.gl = gl;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.lastPickedInfo = {\n      index: -1,\n      layerId: null,\n      info: null\n    };\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n\n    if ('_pickable' in props) {\n      this._pickable = props._pickable;\n    }\n  }\n\n  finalize() {\n    if (this.pickingFBO) {\n      this.pickingFBO.delete();\n    }\n\n    if (this.depthFBO) {\n      this.depthFBO.color.delete();\n      this.depthFBO.delete();\n    }\n  }\n\n  pickObject(opts) {\n    return this._pickClosestObject(opts);\n  }\n\n  pickObjects(opts) {\n    return this._pickVisibleObjects(opts);\n  }\n\n  getLastPickedObject(_ref) {\n    let {\n      x,\n      y,\n      layers,\n      viewports\n    } = _ref;\n    let lastPickedInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.lastPickedInfo.info;\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const lastPickedViewportId = lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;\n    const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n    const viewport = lastPickedViewportId && viewports.find(v => v.id === lastPickedViewportId) || viewports[0];\n    const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y]);\n    const info = {\n      x,\n      y,\n      viewport,\n      coordinate,\n      layer\n    };\n    return { ...lastPickedInfo,\n      ...info\n    };\n  }\n\n  _resizeBuffer() {\n    var _this$pickingFBO, _this$depthFBO;\n\n    const {\n      gl\n    } = this;\n\n    if (!this.pickingFBO) {\n      this.pickingFBO = new Framebuffer(gl);\n\n      if (Framebuffer.isSupported(gl, {\n        colorBufferFloat: true\n      })) {\n        const depthFBO = new Framebuffer(gl);\n        depthFBO.attach({\n          [36064]: new Texture2D(gl, {\n            format: isWebGL2(gl) ? 34836 : 6408,\n            type: 5126\n          })\n        });\n        this.depthFBO = depthFBO;\n      }\n    }\n\n    (_this$pickingFBO = this.pickingFBO) === null || _this$pickingFBO === void 0 ? void 0 : _this$pickingFBO.resize({\n      width: gl.canvas.width,\n      height: gl.canvas.height\n    });\n    (_this$depthFBO = this.depthFBO) === null || _this$depthFBO === void 0 ? void 0 : _this$depthFBO.resize({\n      width: gl.canvas.width,\n      height: gl.canvas.height\n    });\n  }\n\n  _getPickable(layers) {\n    if (this._pickable === false) {\n      return null;\n    }\n\n    const pickableLayers = layers.filter(layer => layer.isPickable() && !layer.isComposite);\n    return pickableLayers.length ? pickableLayers : null;\n  }\n\n  _pickClosestObject(_ref2) {\n    let {\n      layers,\n      views,\n      viewports,\n      x,\n      y,\n      radius = 0,\n      depth = 1,\n      mode = 'query',\n      unproject3D,\n      onViewportActive,\n      effects\n    } = _ref2;\n\n    const pickableLayers = this._getPickable(layers);\n\n    const pixelRatio = cssToDeviceRatio(this.gl);\n\n    if (!pickableLayers) {\n      return {\n        result: [],\n        emptyInfo: getEmptyPickingInfo({\n          viewports,\n          x,\n          y,\n          pixelRatio\n        })\n      };\n    }\n\n    this._resizeBuffer();\n\n    const devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n    const devicePixel = [devicePixelRange.x + Math.floor(devicePixelRange.width / 2), devicePixelRange.y + Math.floor(devicePixelRange.height / 2)];\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {\n      width,\n      height\n    } = this.pickingFBO;\n\n    const deviceRect = this._getPickingRect({\n      deviceX: devicePixel[0],\n      deviceY: devicePixel[1],\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    const cullRect = {\n      x: x - radius,\n      y: y - radius,\n      width: radius * 2 + 1,\n      height: radius * 2 + 1\n    };\n    let infos;\n    const result = [];\n    const affectedLayers = new Set();\n\n    for (let i = 0; i < depth; i++) {\n      let pickInfo;\n\n      if (deviceRect) {\n        const pickedResult = this._drawAndSample({\n          layers: pickableLayers,\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect,\n          cullRect,\n          effects,\n          pass: \"picking:\".concat(mode)\n        });\n\n        pickInfo = getClosestObject({ ...pickedResult,\n          deviceX: devicePixel[0],\n          deviceY: devicePixel[1],\n          deviceRadius,\n          deviceRect\n        });\n      } else {\n        pickInfo = {\n          pickedColor: null,\n          pickedObjectIndex: -1\n        };\n      }\n\n      let z;\n\n      if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n        const pickedResultPass2 = this._drawAndSample({\n          layers: [pickInfo.pickedLayer],\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect: {\n            x: pickInfo.pickedX,\n            y: pickInfo.pickedY,\n            width: 1,\n            height: 1\n          },\n          cullRect,\n          effects,\n          pass: \"picking:\".concat(mode, \":z\")\n        }, true);\n\n        z = pickedResultPass2.pickedColors[0];\n      }\n\n      if (pickInfo.pickedLayer && i + 1 < depth) {\n        affectedLayers.add(pickInfo.pickedLayer);\n        pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);\n      }\n\n      infos = processPickInfo({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers: pickableLayers,\n        viewports,\n        x,\n        y,\n        z,\n        pixelRatio\n      });\n\n      for (const info of infos.values()) {\n        if (info.layer) {\n          result.push(info);\n        }\n      }\n\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    for (const layer of affectedLayers) {\n      layer.restorePickingColors();\n    }\n\n    return {\n      result,\n      emptyInfo: infos.get(null)\n    };\n  }\n\n  _pickVisibleObjects(_ref3) {\n    let {\n      layers,\n      views,\n      viewports,\n      x,\n      y,\n      width = 1,\n      height = 1,\n      mode = 'query',\n      maxObjects = null,\n      onViewportActive,\n      effects\n    } = _ref3;\n\n    const pickableLayers = this._getPickable(layers);\n\n    if (!pickableLayers) {\n      return [];\n    }\n\n    this._resizeBuffer();\n\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const leftTop = cssToDevicePixels(this.gl, [x, y], true);\n    const deviceLeft = leftTop.x;\n    const deviceTop = leftTop.y + leftTop.height;\n    const rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n    const deviceRight = rightBottom.x + rightBottom.width;\n    const deviceBottom = rightBottom.y;\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceBottom,\n      width: deviceRight - deviceLeft,\n      height: deviceTop - deviceBottom\n    };\n\n    const pickedResult = this._drawAndSample({\n      layers: pickableLayers,\n      views,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      cullRect: {\n        x,\n        y,\n        width,\n        height\n      },\n      effects,\n      pass: \"picking:\".concat(mode)\n    });\n\n    const pickInfos = getUniqueObjects(pickedResult);\n    const uniqueInfos = new Map();\n    const isMaxObjects = Number.isFinite(maxObjects);\n\n    for (let i = 0; i < pickInfos.length; i++) {\n      if (isMaxObjects && maxObjects && uniqueInfos.size >= maxObjects) {\n        break;\n      }\n\n      const pickInfo = pickInfos[i];\n      let info = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        pixelRatio\n      };\n      info = getLayerPickingInfo({\n        layer: pickInfo.pickedLayer,\n        info,\n        mode\n      });\n\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    }\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  _drawAndSample(_ref4) {\n    let {\n      layers,\n      views,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      cullRect,\n      effects,\n      pass\n    } = _ref4;\n    let pickZ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n    const {\n      decodePickingColor\n    } = this.pickLayersPass.render({\n      layers,\n      layerFilter: this.layerFilter,\n      views,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      cullRect,\n      effects,\n      pass,\n      pickZ\n    });\n    const {\n      x,\n      y,\n      width,\n      height\n    } = deviceRect;\n    const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n    readPixelsToArray(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n    return {\n      pickedColors,\n      decodePickingColor\n    };\n  }\n\n  _getPickingRect(_ref5) {\n    let {\n      deviceX,\n      deviceY,\n      deviceRadius,\n      deviceWidth,\n      deviceHeight\n    } = _ref5;\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n    if (width <= 0 || height <= 0) {\n      return null;\n    }\n\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Framebuffer","Texture2D","isWebGL2","readPixelsToArray","cssToDeviceRatio","cssToDevicePixels","PickLayersPass","getClosestObject","getUniqueObjects","processPickInfo","getLayerPickingInfo","getEmptyPickingInfo","DeckPicker","constructor","gl","_defineProperty","pickLayersPass","lastPickedInfo","index","layerId","info","setProps","props","layerFilter","_pickable","finalize","pickingFBO","delete","depthFBO","color","pickObject","opts","_pickClosestObject","pickObjects","_pickVisibleObjects","getLastPickedObject","x","y","layers","viewports","lastPickedLayerId","layer","id","lastPickedViewportId","viewport","find","l","v","coordinate","unproject","_resizeBuffer","isSupported","colorBufferFloat","attach","format","type","resize","width","canvas","height","_getPickable","pickableLayers","filter","isPickable","isComposite","length","views","radius","depth","mode","unproject3D","onViewportActive","effects","pixelRatio","result","emptyInfo","devicePixelRange","devicePixel","Math","floor","deviceRadius","round","deviceRect","_getPickingRect","deviceX","deviceY","deviceWidth","deviceHeight","cullRect","infos","affectedLayers","Set","i","pickInfo","pickedResult","_drawAndSample","pass","pickedColor","pickedObjectIndex","z","pickedLayer","pickedResultPass2","pickedX","pickedY","pickedColors","add","disablePickingIndex","values","push","restorePickingColors","get","maxObjects","leftTop","deviceLeft","deviceTop","rightBottom","deviceRight","deviceBottom","pickInfos","uniqueInfos","Map","isMaxObjects","Number","isFinite","size","picked","has","object","set","Array","from","pickZ","decodePickingColor","render","Float32Array","Uint8Array","sourceX","sourceY","sourceWidth","sourceHeight","target","max","min"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplicații\\earthquakes\\node_modules\\@deck.gl\\core\\src\\lib\\deck-picker.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Framebuffer,\n  Texture2D,\n  isWebGL2,\n  readPixelsToArray,\n  cssToDeviceRatio,\n  cssToDevicePixels\n} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport PickLayersPass, {PickingColorDecoder} from '../passes/pick-layers-pass';\nimport {getClosestObject, getUniqueObjects, PickedPixel} from './picking/query-object';\nimport {\n  processPickInfo,\n  getLayerPickingInfo,\n  getEmptyPickingInfo,\n  PickingInfo\n} from './picking/pick-info';\n\nimport type {Framebuffer as LumaFramebuffer} from '@luma.gl/webgl';\nimport type {FilterContext, Rect} from '../passes/layers-pass';\nimport type Layer from './layer';\nimport type {Effect} from './effect';\nimport type View from '../views/view';\nimport type Viewport from '../viewports/viewport';\n\nexport type PickByPointOptions = {\n  x: number;\n  y: number;\n  radius?: number;\n  depth?: number;\n  mode?: string;\n  unproject3D?: boolean;\n};\n\nexport type PickByRectOptions = {\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  mode?: string;\n  maxObjects?: number | null;\n};\n\ntype PickOperationContext = {\n  layers: Layer[];\n  views: Record<string, View>;\n  viewports: Viewport[];\n  onViewportActive: (viewport: Viewport) => void;\n  effects: Effect[];\n};\n\n/** Manages picking in a Deck context */\nexport default class DeckPicker {\n  gl: WebGLRenderingContext;\n  pickingFBO?: LumaFramebuffer;\n  depthFBO?: LumaFramebuffer;\n  pickLayersPass: PickLayersPass;\n  layerFilter?: (context: FilterContext) => boolean;\n\n  /** Identifiers of the previously picked object, for callback tracking and auto highlight */\n  lastPickedInfo: {\n    index: number;\n    layerId: string | null;\n    info: PickingInfo | null;\n  };\n\n  _pickable: boolean = true;\n\n  constructor(gl: WebGLRenderingContext) {\n    this.gl = gl;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.lastPickedInfo = {\n      index: -1,\n      layerId: null,\n      info: null\n    };\n  }\n\n  setProps(props: any): void {\n    if ('layerFilter' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n\n    if ('_pickable' in props) {\n      this._pickable = props._pickable;\n    }\n  }\n\n  finalize() {\n    if (this.pickingFBO) {\n      this.pickingFBO.delete();\n    }\n    if (this.depthFBO) {\n      this.depthFBO.color.delete();\n      this.depthFBO.delete();\n    }\n  }\n\n  /** Pick the closest info at given coordinate */\n  pickObject(opts: PickByPointOptions & PickOperationContext) {\n    return this._pickClosestObject(opts);\n  }\n\n  /** Get all unique infos within a bounding box */\n  pickObjects(opts: PickByRectOptions & PickOperationContext) {\n    return this._pickVisibleObjects(opts);\n  }\n\n  // Returns a new picking info object by assuming the last picked object is still picked\n  getLastPickedObject({x, y, layers, viewports}, lastPickedInfo = this.lastPickedInfo.info) {\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const lastPickedViewportId =\n      lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;\n    const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n    const viewport =\n      (lastPickedViewportId && viewports.find(v => v.id === lastPickedViewportId)) || viewports[0];\n    const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y]);\n\n    const info = {\n      x,\n      y,\n      viewport,\n      coordinate,\n      layer\n    };\n\n    return {...lastPickedInfo, ...info};\n  }\n\n  // Private\n\n  /** Ensures that picking framebuffer exists and matches the canvas size */\n  _resizeBuffer() {\n    const {gl} = this;\n\n    // Create a frame buffer if not already available\n    if (!this.pickingFBO) {\n      this.pickingFBO = new Framebuffer(gl);\n\n      if (Framebuffer.isSupported(gl, {colorBufferFloat: true})) {\n        const depthFBO = new Framebuffer(gl);\n        depthFBO.attach({\n          [GL.COLOR_ATTACHMENT0]: new Texture2D(gl, {\n            format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n            type: GL.FLOAT\n          })\n        });\n        this.depthFBO = depthFBO;\n      }\n    }\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.pickingFBO?.resize({width: gl.canvas.width, height: gl.canvas.height});\n    this.depthFBO?.resize({width: gl.canvas.width, height: gl.canvas.height});\n  }\n\n  /** Preliminary filtering of the layers list. Skid picking pass if no layer is pickable. */\n  _getPickable(layers: Layer[]): Layer[] | null {\n    if (this._pickable === false) {\n      return null;\n    }\n    const pickableLayers = layers.filter(layer => layer.isPickable() && !layer.isComposite);\n    return pickableLayers.length ? pickableLayers : null;\n  }\n\n  // eslint-disable-next-line max-statements,complexity\n  /** Pick the closest object at the given coordinate */\n  _pickClosestObject({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    radius = 0,\n    depth = 1,\n    mode = 'query',\n    unproject3D,\n    onViewportActive,\n    effects\n  }: PickByPointOptions & PickOperationContext): {\n    result: PickingInfo[];\n    emptyInfo: PickingInfo;\n  } {\n    const pickableLayers = this._getPickable(layers);\n    const pixelRatio = cssToDeviceRatio(this.gl);\n\n    if (!pickableLayers) {\n      return {\n        result: [],\n        emptyInfo: getEmptyPickingInfo({viewports, x, y, pixelRatio})\n      };\n    }\n\n    this._resizeBuffer();\n\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // Top-left coordinates [x, y] to bottom-left coordinates [deviceX, deviceY]\n    // And compensate for pixelRatio\n    const devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n    const devicePixel = [\n      devicePixelRange.x + Math.floor(devicePixelRange.width / 2),\n      devicePixelRange.y + Math.floor(devicePixelRange.height / 2)\n    ];\n\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {width, height} = this.pickingFBO as LumaFramebuffer;\n    const deviceRect = this._getPickingRect({\n      deviceX: devicePixel[0],\n      deviceY: devicePixel[1],\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    const cullRect: Rect = {\n      x: x - radius,\n      y: y - radius,\n      width: radius * 2 + 1,\n      height: radius * 2 + 1\n    };\n\n    let infos: Map<string | null, PickingInfo>;\n    const result: PickingInfo[] = [];\n    const affectedLayers = new Set<Layer>();\n\n    for (let i = 0; i < depth; i++) {\n      let pickInfo: PickedPixel;\n\n      if (deviceRect) {\n        const pickedResult = this._drawAndSample({\n          layers: pickableLayers,\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect,\n          cullRect,\n          effects,\n          pass: `picking:${mode}`\n        });\n\n        pickInfo = getClosestObject({\n          ...pickedResult,\n          deviceX: devicePixel[0],\n          deviceY: devicePixel[1],\n          deviceRadius,\n          deviceRect\n        });\n      } else {\n        pickInfo = {\n          pickedColor: null,\n          pickedObjectIndex: -1\n        };\n      }\n\n      let z;\n      if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n        const pickedResultPass2 = this._drawAndSample(\n          {\n            layers: [pickInfo.pickedLayer],\n            views,\n            viewports,\n            onViewportActive,\n            deviceRect: {\n              x: pickInfo.pickedX as number,\n              y: pickInfo.pickedY as number,\n              width: 1,\n              height: 1\n            },\n            cullRect,\n            effects,\n            pass: `picking:${mode}:z`\n          },\n          true\n        );\n        // picked value is in common space (pixels) from the camera target (viewport.position)\n        // convert it to meters from the ground\n        z = pickedResultPass2.pickedColors[0];\n      }\n\n      // Only exclude if we need to run picking again.\n      // We need to run picking again if an object is detected AND\n      // we have not exhausted the requested depth.\n      if (pickInfo.pickedLayer && i + 1 < depth) {\n        affectedLayers.add(pickInfo.pickedLayer);\n        pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);\n      }\n\n      // This logic needs to run even if no object is picked.\n      infos = processPickInfo({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers: pickableLayers,\n        viewports,\n        x,\n        y,\n        z,\n        pixelRatio\n      });\n\n      for (const info of infos.values()) {\n        if (info.layer) {\n          result.push(info);\n        }\n      }\n\n      // If no object is picked stop.\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    // reset only affected buffers\n    for (const layer of affectedLayers) {\n      layer.restorePickingColors();\n    }\n\n    return {result, emptyInfo: infos!.get(null) as PickingInfo};\n  }\n\n  /** Pick all objects within the given bounding box */\n  _pickVisibleObjects({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    width = 1,\n    height = 1,\n    mode = 'query',\n    maxObjects = null,\n    onViewportActive,\n    effects\n  }: PickByRectOptions & PickOperationContext): PickingInfo[] {\n    const pickableLayers = this._getPickable(layers);\n\n    if (!pickableLayers) {\n      return [];\n    }\n\n    this._resizeBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const leftTop = cssToDevicePixels(this.gl, [x, y], true);\n\n    // take left and top (y inverted in device pixels) from start location\n    const deviceLeft = leftTop.x;\n    const deviceTop = leftTop.y + leftTop.height;\n\n    // take right and bottom (y inverted in device pixels) from end location\n    const rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n    const deviceRight = rightBottom.x + rightBottom.width;\n    const deviceBottom = rightBottom.y;\n\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceBottom,\n      // deviceTop and deviceRight represent the first pixel outside the desired rect\n      width: deviceRight - deviceLeft,\n      height: deviceTop - deviceBottom\n    };\n\n    const pickedResult = this._drawAndSample({\n      layers: pickableLayers,\n      views,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      cullRect: {x, y, width, height},\n      effects,\n      pass: `picking:${mode}`\n    });\n\n    const pickInfos = getUniqueObjects(pickedResult);\n\n    // Only return unique infos, identified by info.object\n    const uniqueInfos = new Map();\n\n    const isMaxObjects = Number.isFinite(maxObjects);\n\n    for (let i = 0; i < pickInfos.length; i++) {\n      if (isMaxObjects && maxObjects && uniqueInfos.size >= maxObjects) {\n        break;\n      }\n      const pickInfo = pickInfos[i];\n      let info: PickingInfo = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        pixelRatio\n      };\n\n      info = getLayerPickingInfo({layer: pickInfo.pickedLayer as Layer, info, mode});\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    }\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  /** Renders layers into the picking buffer with picking colors and read the pixels. */\n  _drawAndSample(params: {\n    deviceRect: Rect;\n    pass: string;\n    layers: Layer[];\n    views: Record<string, View>;\n    viewports: Viewport[];\n    onViewportActive: (viewport: Viewport) => void;\n    cullRect?: Rect;\n    effects: Effect[];\n  }): {\n    pickedColors: Uint8Array;\n    decodePickingColor: PickingColorDecoder;\n  };\n\n  /** Renders layers into the picking buffer with encoded z values and read the pixels. */\n  _drawAndSample(\n    params: {\n      deviceRect: Rect;\n      pass: string;\n      layers: Layer[];\n      views: Record<string, View>;\n      viewports: Viewport[];\n      onViewportActive: (viewport: Viewport) => void;\n      cullRect?: Rect;\n      effects: Effect[];\n    },\n    pickZ: true\n  ): {\n    pickedColors: Float32Array;\n    decodePickingColor: null;\n  };\n\n  _drawAndSample(\n    {\n      layers,\n      views,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      cullRect,\n      effects,\n      pass\n    }: {\n      deviceRect: Rect;\n      pass: string;\n      layers: Layer[];\n      views: Record<string, View>;\n      viewports: Viewport[];\n      onViewportActive: (viewport: Viewport) => void;\n      cullRect?: Rect;\n      effects: Effect[];\n    },\n    pickZ: boolean = false\n  ): {\n    pickedColors: Uint8Array | Float32Array;\n    decodePickingColor: PickingColorDecoder | null;\n  } {\n    const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n\n    const {decodePickingColor} = this.pickLayersPass.render({\n      layers,\n      layerFilter: this.layerFilter,\n      views,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      cullRect,\n      effects,\n      pass,\n      pickZ\n    });\n\n    // Read from an already rendered picking buffer\n    // Returns an Uint8ClampedArray of picked pixels\n    const {x, y, width, height} = deviceRect;\n    const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n    readPixelsToArray(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n\n    return {pickedColors, decodePickingColor};\n  }\n\n  // Calculate a picking rect centered on deviceX and deviceY and clipped to device\n  // Returns null if pixel is outside of device\n  _getPickingRect({\n    deviceX,\n    deviceY,\n    deviceRadius,\n    deviceWidth,\n    deviceHeight\n  }: {\n    deviceX: number;\n    deviceY: number;\n    deviceRadius: number;\n    deviceWidth: number;\n    deviceHeight: number;\n  }): Rect | null {\n    // Create a box of size `radius * 2 + 1` centered at [deviceX, deviceY]\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n    // x, y out of bounds.\n    if (width <= 0 || height <= 0) {\n      return null;\n    }\n\n    return {x, y, width, height};\n  }\n}\n"]},"metadata":{},"sourceType":"module"}