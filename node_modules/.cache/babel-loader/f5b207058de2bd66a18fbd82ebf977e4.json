{"ast":null,"code":"import GLTFScenegraph from '../api/gltf-scenegraph';\nimport { meshoptDecodeGltfBuffer } from '../../meshopt/meshopt-decoder';\nconst DEFAULT_MESHOPT_OPTIONS = {\n  byteOffset: 0,\n  filter: 'NONE'\n};\nconst EXT_MESHOPT_COMPRESSION = 'EXT_meshopt_compression';\nexport const name = EXT_MESHOPT_COMPRESSION;\nexport async function decode(gltfData, options) {\n  var _options$gltf;\n\n  const scenegraph = new GLTFScenegraph(gltfData);\n\n  if (!(options !== null && options !== void 0 && (_options$gltf = options.gltf) !== null && _options$gltf !== void 0 && _options$gltf.decompressMeshes)) {\n    return;\n  }\n\n  const promises = [];\n\n  for (const bufferViewIndex of gltfData.json.bufferViews || []) {\n    promises.push(decodeMeshoptBufferView(scenegraph, bufferViewIndex));\n  }\n\n  await Promise.all(promises);\n  scenegraph.removeExtension(EXT_MESHOPT_COMPRESSION);\n}\n\nasync function decodeMeshoptBufferView(scenegraph, bufferView) {\n  const meshoptExtension = scenegraph.getObjectExtension(bufferView, EXT_MESHOPT_COMPRESSION);\n\n  if (meshoptExtension) {\n    const {\n      byteOffset = 0,\n      byteLength = 0,\n      byteStride,\n      count,\n      mode,\n      filter = 'NONE',\n      buffer: bufferIndex\n    } = meshoptExtension;\n    const buffer = scenegraph.gltf.buffers[bufferIndex];\n    const source = new Uint8Array(buffer.arrayBuffer, buffer.byteOffset + byteOffset, byteLength);\n    const result = new Uint8Array(scenegraph.gltf.buffers[bufferView.buffer].arrayBuffer, bufferView.byteOffset, bufferView.byteLength);\n    await meshoptDecodeGltfBuffer(result, count, byteStride, source, mode, filter);\n    return result;\n  }\n\n  return null;\n}","map":{"version":3,"mappings":"AAGA,OAAOA,cAAP,MAA2B,wBAA3B;AACA,SAAQC,uBAAR,QAAsC,+BAAtC;AAIA,MAAMC,uBAAuB,GAAG;EAC9BC,UAAU,EAAE,CADkB;EAE9BC,MAAM,EAAE;AAFsB,CAAhC;AAMA,MAAMC,uBAAuB,GAAG,yBAAhC;AAEA,OAAO,MAAMC,IAAI,GAAGD,uBAAb;AAEP,OAAO,eAAeE,MAAf,CAAsBC,QAAtB,EAA8CC,OAA9C,EAA0E;EAAA;;EAC/E,MAAMC,UAAU,GAAG,IAAIV,cAAJ,CAAmBQ,QAAnB,CAAnB;;EAEA,IAAI,EAACC,OAAD,SAACA,WAAD,WAACA,IAAD,iBAACA,OAAO,CAAEE,IAAV,UAACF,IAADG,wBAACH,kBAAeI,gBAAhB,CAAJ,EAAsC;IACpC;EACD;;EAED,MAAMC,QAAwB,GAAG,EAAjC;;EACA,KAAK,MAAMC,eAAX,IAA8BP,QAAQ,CAACQ,IAATR,CAAcS,WAAdT,IAA6B,EAA3D,EAA+D;IAC7DM,QAAQ,CAACI,IAATJ,CAAcK,uBAAuB,CAACT,UAAD,EAAaK,eAAb,CAArCD;EACD;;EAGD,MAAMM,OAAO,CAACC,GAARD,CAAYN,QAAZM,CAAN;EAGAV,UAAU,CAACY,eAAXZ,CAA2BL,uBAA3BK;AACD;;AAGD,eAAeS,uBAAf,CACET,UADF,EAEEa,UAFF,EAG+B;EAC7B,MAAMC,gBAAgB,GAAGd,UAAU,CAACe,kBAAXf,CACvBa,UADuBb,EAEvBL,uBAFuBK,CAAzB;;EAIA,IAAIc,gBAAJ,EAAsB;IACpB,MAAM;MACJrB,UAAU,GAAG,CADT;MAEJuB,UAAU,GAAG,CAFT;MAGJC,UAHI;MAIJC,KAJI;MAKJC,IALI;MAMJzB,MAAM,GAAG,MANL;MAOJ0B,MAAM,EAAEC;IAPJ,IAQFP,gBARJ;IASA,MAAMM,MAAM,GAAGpB,UAAU,CAACC,IAAXD,CAAgBsB,OAAhBtB,CAAwBqB,WAAxBrB,CAAf;IAEA,MAAMuB,MAAM,GAAG,IAAIC,UAAJ,CAAeJ,MAAM,CAACK,WAAtB,EAAmCL,MAAM,CAAC3B,UAAP2B,GAAoB3B,UAAvD,EAAmEuB,UAAnE,CAAf;IACA,MAAMU,MAAM,GAAG,IAAIF,UAAJ,CACbxB,UAAU,CAACC,IAAXD,CAAgBsB,OAAhBtB,CAAwBa,UAAU,CAACO,MAAnCpB,EAA2CyB,WAD9B,EAEbZ,UAAU,CAACpB,UAFE,EAGboB,UAAU,CAACG,UAHE,CAAf;IAKA,MAAMzB,uBAAuB,CAACmC,MAAD,EAASR,KAAT,EAAgBD,UAAhB,EAA4BM,MAA5B,EAAoCJ,IAApC,EAA0CzB,MAA1C,CAA7B;IACA,OAAOgC,MAAP;EACD;;EAED,OAAO,IAAP;AACD","names":["GLTFScenegraph","meshoptDecodeGltfBuffer","DEFAULT_MESHOPT_OPTIONS","byteOffset","filter","EXT_MESHOPT_COMPRESSION","name","decode","gltfData","options","scenegraph","gltf","_options$gltf","decompressMeshes","promises","bufferViewIndex","json","bufferViews","push","decodeMeshoptBufferView","Promise","all","removeExtension","bufferView","meshoptExtension","getObjectExtension","byteLength","byteStride","count","mode","buffer","bufferIndex","buffers","source","Uint8Array","arrayBuffer","result"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplica»õii\\earthquakes\\node_modules\\@loaders.gl\\gltf\\src\\lib\\extensions\\EXT_meshopt_compression.ts"],"sourcesContent":["/* eslint-disable camelcase */\nimport type {GLTF, GLTFBufferView, GLTF_EXT_meshopt_compression} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\nimport GLTFScenegraph from '../api/gltf-scenegraph';\nimport {meshoptDecodeGltfBuffer} from '../../meshopt/meshopt-decoder';\n\n// @ts-ignore\n// eslint-disable-next-line\nconst DEFAULT_MESHOPT_OPTIONS = {\n  byteOffset: 0,\n  filter: 'NONE'\n};\n\n/** Extension name */\nconst EXT_MESHOPT_COMPRESSION = 'EXT_meshopt_compression';\n\nexport const name = EXT_MESHOPT_COMPRESSION;\n\nexport async function decode(gltfData: {json: GLTF}, options: GLTFLoaderOptions) {\n  const scenegraph = new GLTFScenegraph(gltfData);\n\n  if (!options?.gltf?.decompressMeshes) {\n    return;\n  }\n\n  const promises: Promise<any>[] = [];\n  for (const bufferViewIndex of gltfData.json.bufferViews || []) {\n    promises.push(decodeMeshoptBufferView(scenegraph, bufferViewIndex));\n  }\n\n  // Decompress meshes in parallel\n  await Promise.all(promises);\n\n  // We have now decompressed all primitives, so remove the top-level extensions\n  scenegraph.removeExtension(EXT_MESHOPT_COMPRESSION);\n}\n\n/** Decode one meshopt buffer view */\nasync function decodeMeshoptBufferView(\n  scenegraph: GLTFScenegraph,\n  bufferView: GLTFBufferView\n): Promise<ArrayBuffer | null> {\n  const meshoptExtension = scenegraph.getObjectExtension<GLTF_EXT_meshopt_compression>(\n    bufferView,\n    EXT_MESHOPT_COMPRESSION\n  );\n  if (meshoptExtension) {\n    const {\n      byteOffset = 0,\n      byteLength = 0,\n      byteStride,\n      count,\n      mode,\n      filter = 'NONE',\n      buffer: bufferIndex\n    } = meshoptExtension;\n    const buffer = scenegraph.gltf.buffers[bufferIndex];\n\n    const source = new Uint8Array(buffer.arrayBuffer, buffer.byteOffset + byteOffset, byteLength);\n    const result = new Uint8Array(\n      scenegraph.gltf.buffers[bufferView.buffer].arrayBuffer,\n      bufferView.byteOffset,\n      bufferView.byteLength\n    );\n    await meshoptDecodeGltfBuffer(result, count, byteStride, source, mode, filter);\n    return result;\n  }\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}