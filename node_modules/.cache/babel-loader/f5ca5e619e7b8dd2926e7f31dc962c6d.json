{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { deepEqual } from '../utils/deep-equal';\nexport default class LayerExtension {\n  constructor(opts) {\n    _defineProperty(this, \"opts\", void 0);\n\n    if (opts) {\n      this.opts = opts;\n    }\n  }\n\n  equals(extension) {\n    if (this === extension) {\n      return true;\n    }\n\n    return this.constructor === extension.constructor && deepEqual(this.opts, extension.opts);\n  }\n\n  getShaders(extension) {\n    return null;\n  }\n\n  getSubLayerProps(extension) {\n    const {\n      defaultProps\n    } = extension.constructor;\n    const newProps = {\n      updateTriggers: {}\n    };\n\n    for (const key in defaultProps) {\n      if (key in this.props) {\n        const propDef = defaultProps[key];\n        const propValue = this.props[key];\n        newProps[key] = propValue;\n\n        if (propDef && propDef.type === 'accessor') {\n          newProps.updateTriggers[key] = this.props.updateTriggers[key];\n\n          if (typeof propValue === 'function') {\n            newProps[key] = this.getSubLayerAccessor(propValue);\n          }\n        }\n      }\n    }\n\n    return newProps;\n  }\n\n  initializeState(context, extension) {}\n\n  updateState(params, extension) {}\n\n  draw(params, extension) {}\n\n  finalizeState(context, extension) {}\n\n}\n\n_defineProperty(LayerExtension, \"defaultProps\", {});","map":{"version":3,"mappings":";AAmBA,SAAQA,SAAR,QAAwB,qBAAxB;AAMA,eAAe,MAAeC,cAAf,CAAoD;EAWjEC,WAAW,CAACC,IAAD,EAAkB;IAAAC;;IAC3B,IAAID,IAAJ,EAAU;MACR,KAAKA,IAAL,GAAYA,IAAZ;IACD;EACF;;EAGDE,MAAM,CAACC,SAAD,EAA+C;IACnD,IAAI,SAASA,SAAb,EAAwB;MACtB,OAAO,IAAP;IACD;;IAED,OAAO,KAAKJ,WAAL,KAAqBI,SAAS,CAACJ,WAA/B,IAA8CF,SAAS,CAAC,KAAKG,IAAN,EAAYG,SAAS,CAACH,IAAtB,CAA9D;EACD;;EAGDI,UAAU,CAAcD,SAAd,EAAoC;IAC5C,OAAO,IAAP;EACD;;EAGDE,gBAAgB,CAAuBF,SAAvB,EAA6C;IAC3D,MAAM;MAACG;IAAD,IAAiBH,SAAS,CAACJ,WAAjC;IACA,MAAMQ,QAAQ,GAAG;MACfC,cAAc,EAAE;IADD,CAAjB;;IAKA,KAAK,MAAMC,GAAX,IAAkBH,YAAlB,EAAgC;MAC9B,IAAIG,GAAG,IAAI,KAAKC,KAAhB,EAAuB;QACrB,MAAMC,OAAO,GAAGL,YAAY,CAACG,GAAD,CAA5B;QACA,MAAMG,SAAS,GAAG,KAAKF,KAAL,CAAWD,GAAX,CAAlB;QACAF,QAAQ,CAACE,GAAD,CAARF,GAAgBK,SAAhBL;;QACA,IAAII,OAAO,IAAIA,OAAO,CAACE,IAARF,KAAiB,UAAhC,EAA4C;UAC1CJ,QAAQ,CAACC,cAATD,CAAwBE,GAAxBF,IAA+B,KAAKG,KAAL,CAAWF,cAAX,CAA0BC,GAA1B,CAA/BF;;UACA,IAAI,OAAOK,SAAP,KAAqB,UAAzB,EAAqC;YACnCL,QAAQ,CAACE,GAAD,CAARF,GAAgB,KAAKO,mBAAL,CAAyBF,SAAzB,CAAhBL;UACD;QACF;MACF;IACF;;IAED,OAAOA,QAAP;EACD;;EAGDQ,eAAe,CAAcC,OAAd,EAAqCb,SAArC,EAA4D,CAAE;;EAE7Ec,WAAW,CAAcC,MAAd,EAA+Cf,SAA/C,EAAsE,CAAE;;EAEnFgB,IAAI,CAAcD,MAAd,EAA2Bf,SAA3B,EAAkD,CAAE;;EAExDiB,aAAa,CAAcJ,OAAd,EAAqCb,SAArC,EAA4D,CAAE;;AA/DV;;gBAArCL,gB,gBAQD","names":["deepEqual","LayerExtension","constructor","opts","_defineProperty","equals","extension","getShaders","getSubLayerProps","defaultProps","newProps","updateTriggers","key","props","propDef","propValue","type","getSubLayerAccessor","initializeState","context","updateState","params","draw","finalizeState"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@deck.gl\\core\\src\\lib\\layer-extension.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {deepEqual} from '../utils/deep-equal';\nimport type Layer from './layer';\nimport type CompositeLayer from './composite-layer';\nimport type {UpdateParameters} from './layer';\nimport type {LayerContext} from './layer-manager';\n\nexport default abstract class LayerExtension<OptionsT = undefined> {\n  /**\n   * Note that defaultProps of a LayerExtension does not behave like defaultProps of a Layer:\n      - The default values are not automatically merged with user-supplied props when the layer is constructed\n      - The types are not used during props diff\n   * Currently they are only used in getSubLayerProps\n   * TODO: find a more consistent solution\n   */\n  static defaultProps: any = {};\n  opts!: OptionsT;\n\n  constructor(opts?: OptionsT) {\n    if (opts) {\n      this.opts = opts;\n    }\n  }\n\n  /** Returns true if two extensions are equivalent */\n  equals(extension: LayerExtension<OptionsT>): boolean {\n    if (this === extension) {\n      return true;\n    }\n\n    return this.constructor === extension.constructor && deepEqual(this.opts, extension.opts);\n  }\n\n  /** Only called if attached to a primitive layer */\n  getShaders(this: Layer, extension: this): any {\n    return null;\n  }\n\n  /** Only called if attached to a CompositeLayer */\n  getSubLayerProps(this: CompositeLayer, extension: this): any {\n    const {defaultProps} = extension.constructor as typeof LayerExtension;\n    const newProps = {\n      updateTriggers: {}\n    };\n\n    /* eslint-disable max-depth */\n    for (const key in defaultProps) {\n      if (key in this.props) {\n        const propDef = defaultProps[key];\n        const propValue = this.props[key];\n        newProps[key] = propValue;\n        if (propDef && propDef.type === 'accessor') {\n          newProps.updateTriggers[key] = this.props.updateTriggers[key];\n          if (typeof propValue === 'function') {\n            newProps[key] = this.getSubLayerAccessor(propValue);\n          }\n        }\n      }\n    }\n    /* eslint-enable max-depth */\n    return newProps;\n  }\n\n  /* eslint-disable @typescript-eslint/no-empty-function */\n  initializeState(this: Layer, context: LayerContext, extension: this): void {}\n\n  updateState(this: Layer, params: UpdateParameters<Layer>, extension: this): void {}\n\n  draw(this: Layer, params: any, extension: this): void {}\n\n  finalizeState(this: Layer, context: LayerContext, extension: this): void {}\n}\n"]},"metadata":{},"sourceType":"module"}