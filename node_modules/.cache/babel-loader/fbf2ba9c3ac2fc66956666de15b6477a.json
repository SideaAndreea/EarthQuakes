{"ast":null,"code":"import earcut from 'earcut';\nimport { modifyPolygonWindingDirection, WINDING } from '@math.gl/polygon';\nconst OUTER_POLYGON_WINDING = WINDING.CLOCKWISE;\nconst HOLE_POLYGON_WINDING = WINDING.COUNTER_CLOCKWISE;\nconst windingOptions = {\n  isClosed: true\n};\n\nfunction validate(polygon) {\n  polygon = polygon && polygon.positions || polygon;\n\n  if (!Array.isArray(polygon) && !ArrayBuffer.isView(polygon)) {\n    throw new Error('invalid polygon');\n  }\n}\n\nexport function getPositions(polygon) {\n  return 'positions' in polygon ? polygon.positions : polygon;\n}\nexport function getHoleIndices(polygon) {\n  return 'holeIndices' in polygon ? polygon.holeIndices : null;\n}\n\nfunction isNested(polygon) {\n  return Array.isArray(polygon[0]);\n}\n\nfunction isSimple(polygon) {\n  return polygon.length >= 1 && polygon[0].length >= 2 && Number.isFinite(polygon[0][0]);\n}\n\nfunction isNestedRingClosed(simplePolygon) {\n  const p0 = simplePolygon[0];\n  const p1 = simplePolygon[simplePolygon.length - 1];\n  return p0[0] === p1[0] && p0[1] === p1[1] && p0[2] === p1[2];\n}\n\nfunction isFlatRingClosed(positions, size, startIndex, endIndex) {\n  for (let i = 0; i < size; i++) {\n    if (positions[startIndex + i] !== positions[endIndex - size + i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction copyNestedRing(target, targetStartIndex, simplePolygon, size, windingDirection) {\n  let targetIndex = targetStartIndex;\n  const len = simplePolygon.length;\n\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[i][j] || 0;\n    }\n  }\n\n  if (!isNestedRingClosed(simplePolygon)) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[0][j] || 0;\n    }\n  }\n\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n  return targetIndex;\n}\n\nfunction copyFlatRing(target, targetStartIndex, positions, size) {\n  let srcStartIndex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  let srcEndIndex = arguments.length > 5 ? arguments[5] : undefined;\n  let windingDirection = arguments.length > 6 ? arguments[6] : undefined;\n  srcEndIndex = srcEndIndex || positions.length;\n  const srcLength = srcEndIndex - srcStartIndex;\n\n  if (srcLength <= 0) {\n    return targetStartIndex;\n  }\n\n  let targetIndex = targetStartIndex;\n\n  for (let i = 0; i < srcLength; i++) {\n    target[targetIndex++] = positions[srcStartIndex + i];\n  }\n\n  if (!isFlatRingClosed(positions, size, srcStartIndex, srcEndIndex)) {\n    for (let i = 0; i < size; i++) {\n      target[targetIndex++] = positions[srcStartIndex + i];\n    }\n  }\n\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n  return targetIndex;\n}\n\nexport function normalize(polygon, positionSize) {\n  validate(polygon);\n  const positions = [];\n  const holeIndices = [];\n\n  if ('positions' in polygon) {\n    const {\n      positions: srcPositions,\n      holeIndices: srcHoleIndices\n    } = polygon;\n\n    if (srcHoleIndices) {\n      let targetIndex = 0;\n\n      for (let i = 0; i <= srcHoleIndices.length; i++) {\n        targetIndex = copyFlatRing(positions, targetIndex, srcPositions, positionSize, srcHoleIndices[i - 1], srcHoleIndices[i], i === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING);\n        holeIndices.push(targetIndex);\n      }\n\n      holeIndices.pop();\n      return {\n        positions,\n        holeIndices\n      };\n    }\n\n    polygon = srcPositions;\n  }\n\n  if (!isNested(polygon)) {\n    copyFlatRing(positions, 0, polygon, positionSize, 0, positions.length, OUTER_POLYGON_WINDING);\n    return positions;\n  }\n\n  if (!isSimple(polygon)) {\n    let targetIndex = 0;\n\n    for (const [polygonIndex, simplePolygon] of polygon.entries()) {\n      targetIndex = copyNestedRing(positions, targetIndex, simplePolygon, positionSize, polygonIndex === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING);\n      holeIndices.push(targetIndex);\n    }\n\n    holeIndices.pop();\n    return {\n      positions,\n      holeIndices\n    };\n  }\n\n  copyNestedRing(positions, 0, polygon, positionSize, OUTER_POLYGON_WINDING);\n  return positions;\n}\nexport function getSurfaceIndices(polygon, positionSize, preproject) {\n  let holeIndices = getHoleIndices(polygon);\n\n  if (holeIndices) {\n    holeIndices = holeIndices.map(positionIndex => positionIndex / positionSize);\n  }\n\n  let positions = getPositions(polygon);\n\n  if (preproject) {\n    const n = positions.length;\n    positions = positions.slice();\n    const p = [];\n\n    for (let i = 0; i < n; i += positionSize) {\n      p[0] = positions[i];\n      p[1] = positions[i + 1];\n      const xy = preproject(p);\n      positions[i] = xy[0];\n      positions[i + 1] = xy[1];\n    }\n  }\n\n  return earcut(positions, holeIndices, positionSize);\n}","map":{"version":3,"mappings":"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","names":["earcut","modifyPolygonWindingDirection","WINDING","OUTER_POLYGON_WINDING","CLOCKWISE","HOLE_POLYGON_WINDING","COUNTER_CLOCKWISE","windingOptions","isClosed","validate","polygon","positions","Array","isArray","ArrayBuffer","isView","Error","getPositions","getHoleIndices","holeIndices","isNested","isSimple","length","Number","isFinite","isNestedRingClosed","simplePolygon","p0","p1","isFlatRingClosed","size","startIndex","endIndex","i","copyNestedRing","target","targetStartIndex","windingDirection","targetIndex","len","j","start","end","copyFlatRing","srcStartIndex","srcEndIndex","srcLength","normalize","positionSize","srcPositions","srcHoleIndices","push","pop","polygonIndex","entries","getSurfaceIndices","preproject","map","positionIndex","n","slice","p","xy"],"sources":["C:\\Users\\deeag\\OneDrive\\Desktop\\Aplicații\\earthquakes\\node_modules\\@deck.gl\\layers\\src\\solid-polygon-layer\\polygon.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-params */\nimport earcut from 'earcut';\nimport {modifyPolygonWindingDirection, WINDING} from '@math.gl/polygon';\n\nimport type {Position} from '@deck.gl/core';\nimport type {NumericArray} from '@math.gl/core';\n\nconst OUTER_POLYGON_WINDING = WINDING.CLOCKWISE;\nconst HOLE_POLYGON_WINDING = WINDING.COUNTER_CLOCKWISE;\n\ntype WindingOptions = {\n  start?: number;\n  end?: number;\n  size?: number;\n  isClosed?: boolean;\n};\n\n/** A scratch object for sending winding options */\nconst windingOptions: WindingOptions = {\n  isClosed: true\n};\n\n// 4 data formats are supported:\n\n/** Simple Polygon: an array of points */\nexport type NestedSimplePolygonGeometry = Position[];\n/** Complex Polygon: an array of array of points (array of rings)\n * with the first ring representing the outer hull and other rings representing holes\n */\nexport type NestedComplexPolygonGeometry = Position[][];\n/** An array of numbers (flattened \"simple polygon\") */\nexport type FlatSimplePolygonGeometry = NumericArray;\n/** Flattened \"complex polygon\" */\nexport type FlatComplexPolygonGeometry = {positions: NumericArray; holeIndices: NumericArray};\n\nexport type PolygonGeometry =\n  | NestedSimplePolygonGeometry\n  | NestedComplexPolygonGeometry\n  | FlatSimplePolygonGeometry\n  | FlatComplexPolygonGeometry;\n\nexport type NormalizedPolygonGeometry = FlatSimplePolygonGeometry | FlatComplexPolygonGeometry;\n\n/**\n * Ensure a polygon is valid format\n */\nfunction validate(polygon: PolygonGeometry): void {\n  polygon = (polygon && (polygon as FlatComplexPolygonGeometry).positions) || polygon;\n  if (!Array.isArray(polygon) && !ArrayBuffer.isView(polygon)) {\n    throw new Error('invalid polygon');\n  }\n}\n\n/** Get the positions from a normalized polygon */\nexport function getPositions(polygon: NormalizedPolygonGeometry): NumericArray {\n  return 'positions' in polygon ? polygon.positions : polygon;\n}\n\n/** Get the hole indices from a normalized polygon */\nexport function getHoleIndices(polygon: NormalizedPolygonGeometry): NumericArray | null {\n  return 'holeIndices' in polygon ? polygon.holeIndices : null;\n}\n\n/**\n * Check if a polygon is nested or flat\n * Returns true if the polygon is a flat polygon (i.e. not an array of polygons)\n */\nfunction isNested(\n  polygon: PolygonGeometry\n): polygon is NestedSimplePolygonGeometry | NestedComplexPolygonGeometry {\n  return Array.isArray(polygon[0]);\n}\n\n/**\n * Check if a polygon is simple or complex\n * Returns true if the polygon is a simple polygon (i.e. not an array of polygons)\n */\nfunction isSimple(\n  polygon: NestedSimplePolygonGeometry | NestedComplexPolygonGeometry\n): polygon is NestedSimplePolygonGeometry {\n  return polygon.length >= 1 && polygon[0].length >= 2 && Number.isFinite(polygon[0][0]);\n}\n\n/**\n * Check if a simple polygon is a closed ring\n * Returns true if the simple polygon is a closed ring\n */\nfunction isNestedRingClosed(simplePolygon: NestedSimplePolygonGeometry): boolean {\n  // check if first and last vertex are the same\n  const p0 = simplePolygon[0];\n  const p1 = simplePolygon[simplePolygon.length - 1];\n\n  return p0[0] === p1[0] && p0[1] === p1[1] && p0[2] === p1[2];\n}\n\n/**\n * Check if a simple flat array is a closed ring\n * Returns true if the simple flat array is a closed ring\n */\nfunction isFlatRingClosed(\n  positions: FlatSimplePolygonGeometry,\n  /** size of a position, 2 (xy) or 3 (xyz) */\n  size: number,\n  /** start index of the path in the positions array */\n  startIndex: number,\n  /** end index of the path in the positions array */\n  endIndex: number\n): boolean {\n  for (let i = 0; i < size; i++) {\n    if (positions[startIndex + i] !== positions[endIndex - size + i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Copy a simple polygon coordinates into a flat array, closes the ring if needed.\n * Returns the index of the write head in the destination\n */\nfunction copyNestedRing(\n  /** destination */\n  target: NumericArray,\n  /** index in the destination to start copying into */\n  targetStartIndex: number,\n  /** the source polygon */\n  simplePolygon: NestedSimplePolygonGeometry,\n  /** size of a position, 2 (xy) or 3 (xyz) */\n  size: number,\n  /** modify polygon to be of the specified winding direction */\n  windingDirection: number\n): number {\n  let targetIndex = targetStartIndex;\n  const len = simplePolygon.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[i][j] || 0;\n    }\n  }\n\n  if (!isNestedRingClosed(simplePolygon)) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[0][j] || 0;\n    }\n  }\n\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n\n  return targetIndex;\n}\n\n/**\n * Copy a simple flat array into another flat array, closes the ring if needed.\n * Returns the index of the write head in the destination\n */\nfunction copyFlatRing(\n  /** destination */\n  target: NumericArray,\n  /** index in the destination to start copying into */\n  targetStartIndex: number,\n  /** the source polygon */\n  positions: FlatSimplePolygonGeometry,\n  /** size of a position, 2 (xy) or 3 (xyz) */\n  size: number,\n  /** start index of the path in the positions array */\n  srcStartIndex: number = 0,\n  /** end index of the path in the positions array */\n  srcEndIndex: number,\n  windingDirection: number\n): number {\n  srcEndIndex = srcEndIndex || positions.length;\n  const srcLength = srcEndIndex - srcStartIndex;\n  if (srcLength <= 0) {\n    return targetStartIndex;\n  }\n  let targetIndex = targetStartIndex;\n\n  for (let i = 0; i < srcLength; i++) {\n    target[targetIndex++] = positions[srcStartIndex + i];\n  }\n\n  if (!isFlatRingClosed(positions, size, srcStartIndex, srcEndIndex)) {\n    for (let i = 0; i < size; i++) {\n      target[targetIndex++] = positions[srcStartIndex + i];\n    }\n  }\n\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n\n  return targetIndex;\n}\n\n/**\n * Normalize any polygon representation into the \"complex flat\" format\n */\n/* eslint-disable max-statements */\nexport function normalize(\n  polygon: PolygonGeometry,\n  positionSize: number\n): NormalizedPolygonGeometry {\n  validate(polygon);\n\n  const positions: number[] = [];\n  const holeIndices: number[] = [];\n\n  if ('positions' in polygon) {\n    // complex flat\n    const {positions: srcPositions, holeIndices: srcHoleIndices} = polygon;\n\n    if (srcHoleIndices) {\n      let targetIndex = 0;\n      // split the positions array into `holeIndices.length + 1` rings\n      // holeIndices[-1] falls back to 0\n      // holeIndices[holeIndices.length] falls back to positions.length\n      for (let i = 0; i <= srcHoleIndices.length; i++) {\n        targetIndex = copyFlatRing(\n          positions,\n          targetIndex,\n          srcPositions,\n          positionSize,\n          srcHoleIndices[i - 1],\n          srcHoleIndices[i],\n          i === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING\n        );\n        holeIndices.push(targetIndex);\n      }\n      // The last one is not a starting index of a hole, remove\n      holeIndices.pop();\n\n      return {positions, holeIndices};\n    }\n    polygon = srcPositions;\n  }\n  if (!isNested(polygon)) {\n    // simple flat\n    copyFlatRing(positions, 0, polygon, positionSize, 0, positions.length, OUTER_POLYGON_WINDING);\n    return positions;\n  }\n  if (!isSimple(polygon)) {\n    // complex polygon\n    let targetIndex = 0;\n\n    for (const [polygonIndex, simplePolygon] of polygon.entries()) {\n      targetIndex = copyNestedRing(\n        positions,\n        targetIndex,\n        simplePolygon,\n        positionSize,\n        polygonIndex === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING\n      );\n      holeIndices.push(targetIndex);\n    }\n    // The last one is not a starting index of a hole, remove\n    holeIndices.pop();\n    // last index points to the end of the array, remove it\n    return {positions, holeIndices};\n  }\n  // simple polygon\n  copyNestedRing(positions, 0, polygon, positionSize, OUTER_POLYGON_WINDING);\n  return positions;\n}\n/* eslint-enable max-statements */\n\n/*\n * Get vertex indices for drawing polygon mesh (triangulation)\n */\nexport function getSurfaceIndices(\n  polygon: NormalizedPolygonGeometry,\n  positionSize: number,\n  preproject?: (xy: number[]) => number[]\n): number[] {\n  let holeIndices = getHoleIndices(polygon);\n  if (holeIndices) {\n    holeIndices = holeIndices.map(positionIndex => positionIndex / positionSize);\n  }\n\n  let positions = getPositions(polygon);\n\n  if (preproject) {\n    // When tesselating lnglat coordinates, project them to the common space for accuracy\n    const n = positions.length;\n    // Clone the array\n    positions = positions.slice();\n    const p: number[] = [];\n    for (let i = 0; i < n; i += positionSize) {\n      p[0] = positions[i];\n      p[1] = positions[i + 1];\n      const xy = preproject(p);\n      positions[i] = xy[0];\n      positions[i + 1] = xy[1];\n    }\n  }\n\n  // Let earcut triangulate the polygon\n  return earcut(positions, holeIndices, positionSize);\n}\n"]},"metadata":{},"sourceType":"module"}