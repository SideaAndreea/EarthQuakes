{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { DirectionalLight } from './directional-light';\nimport { getSunDirection } from '@math.gl/sun';\nexport default class SunLight extends DirectionalLight {\n  constructor(opts) {\n    super(opts);\n\n    _defineProperty(this, \"timestamp\", void 0);\n\n    this.timestamp = opts.timestamp;\n  }\n\n  getProjectedLight(_ref) {\n    let {\n      layer\n    } = _ref;\n    const {\n      viewport\n    } = layer.context;\n    const isGlobe = viewport.resolution && viewport.resolution > 0;\n\n    if (isGlobe) {\n      const [x, y, z] = getSunDirection(this.timestamp, 0, 0);\n      this.direction = [x, -z, y];\n    } else {\n      const {\n        latitude,\n        longitude\n      } = viewport;\n      this.direction = getSunDirection(this.timestamp, latitude, longitude);\n    }\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":";AAAA,SAAQA,gBAAR,QAA+B,qBAA/B;AACA,SAAQC,eAAR,QAA8B,cAA9B;AAwBA,eAAe,MAAMC,QAAN,SAAuBF,gBAAvB,CAAwC;EAGrDG,WAAW,CAACC,IAAD,EAAwB;IACjC,MAAMA,IAAN;;IADiCC;;IAGjC,KAAKC,SAAL,GAAiBF,IAAI,CAACE,SAAtB;EACD;;EAEDC,iBAAiB,OAA4C;IAAA,IAA3C;MAACC;IAAD,CAA2C;IAC3D,MAAM;MAACC;IAAD,IAAaD,KAAK,CAACE,OAAzB;IACA,MAAMC,OAAO,GAAGF,QAAQ,CAACG,UAATH,IAAuBA,QAAQ,CAACG,UAATH,GAAsB,CAA7D;;IAEA,IAAIE,OAAJ,EAAa;MAEX,MAAM,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYd,eAAe,CAAC,KAAKK,SAAN,EAAiB,CAAjB,EAAoB,CAApB,CAAjC;MACA,KAAKU,SAAL,GAAiB,CAACH,CAAD,EAAI,CAACE,CAAL,EAAQD,CAAR,CAAjB;IAHF,OAIO;MAEL,MAAM;QAACG,QAAD;QAAWC;MAAX,IAAwBT,QAA9B;MACA,KAAKO,SAAL,GAAiBf,eAAe,CAAC,KAAKK,SAAN,EAAiBW,QAAjB,EAA2BC,SAA3B,CAAhC;IACD;;IAED,OAAO,IAAP;EACD;;AAxBoD","names":["DirectionalLight","getSunDirection","SunLight","constructor","opts","_defineProperty","timestamp","getProjectedLight","layer","viewport","context","isGlobe","resolution","x","y","z","direction","latitude","longitude"],"sources":["C:\\Users\\user\\OneDrive\\Desktop\\Internship\\react-internship-22\\Exercices\\earthquakes\\node_modules\\@deck.gl\\core\\src\\effects\\lighting\\sun-light.ts"],"sourcesContent":["import {DirectionalLight} from './directional-light';\nimport {getSunDirection} from '@math.gl/sun';\n\nimport type Layer from '../../lib/layer';\n\nexport type SunLightOptions = {\n  id?: string;\n  /** Light color, [r, g, b] in the 0-255 range\n   * @default [255, 255, 255]\n   */\n  color?: number[];\n  /** Light intensity, higher number is brighter\n   * @default 1.0\n   */\n  intensity?: number;\n  /**\n   * The time at which to position the sun. Either a Date object or a timestamp (milliseconds elapsed since unix time 0)\n   */\n  timestamp: number | Date;\n  /** (Experimental) render shadows casted by this light\n   * @default false\n   */\n  _shadow?: boolean;\n};\n\nexport default class SunLight extends DirectionalLight {\n  timestamp: number | Date;\n\n  constructor(opts: SunLightOptions) {\n    super(opts);\n\n    this.timestamp = opts.timestamp;\n  }\n\n  getProjectedLight({layer}: {layer: Layer}): DirectionalLight {\n    const {viewport} = layer.context;\n    const isGlobe = viewport.resolution && viewport.resolution > 0;\n\n    if (isGlobe) {\n      // Rotate vector to align with the direction of the globe projection (up at lon:0,lat:0 is [0, -1, 0])\n      const [x, y, z] = getSunDirection(this.timestamp, 0, 0);\n      this.direction = [x, -z, y];\n    } else {\n      // @ts-expect-error longitude and latitude are not defined on all viewports\n      const {latitude, longitude} = viewport;\n      this.direction = getSunDirection(this.timestamp, latitude, longitude);\n    }\n\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}